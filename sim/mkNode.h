/*
 * Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
 * 
 * On Sat Jun 28 05:29:27 IST 2014
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkNode_h__
#define __mkNode_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"

namespace bluesim
{
  
  /* Class declaration for the mkNode module */
  class MOD_mkNode : public Module {
   
   /* Clock handles */
   private:
    tClock __clk_handle_0;
   
   /* Clock gate handles */
   public:
    tUInt8 *clk_gate[0];
   
   /* Instantiation parameters */
   public:
   
   /* Module state */
   public:
    MOD_Wire<tUInt8> INST_channelInQ_0_dequeueing;
    MOD_Wire<tUInt64> INST_channelInQ_0_enqw;
    MOD_Fifo<tUInt64> INST_channelInQ_0_ff;
    MOD_Reg<tUInt8> INST_channelInQ_0_firstValid;
    MOD_Wire<tUInt8> INST_channelInQ_1_dequeueing;
    MOD_Wire<tUInt64> INST_channelInQ_1_enqw;
    MOD_Fifo<tUInt64> INST_channelInQ_1_ff;
    MOD_Reg<tUInt8> INST_channelInQ_1_firstValid;
    MOD_Wire<tUInt8> INST_channelInQ_2_dequeueing;
    MOD_Wire<tUInt64> INST_channelInQ_2_enqw;
    MOD_Fifo<tUInt64> INST_channelInQ_2_ff;
    MOD_Reg<tUInt8> INST_channelInQ_2_firstValid;
    MOD_Wire<tUInt8> INST_channelInQ_3_dequeueing;
    MOD_Wire<tUInt64> INST_channelInQ_3_enqw;
    MOD_Fifo<tUInt64> INST_channelInQ_3_ff;
    MOD_Reg<tUInt8> INST_channelInQ_3_firstValid;
    MOD_Wire<tUInt8> INST_channelInQ_4_dequeueing;
    MOD_Wire<tUInt64> INST_channelInQ_4_enqw;
    MOD_Fifo<tUInt64> INST_channelInQ_4_ff;
    MOD_Reg<tUInt8> INST_channelInQ_4_firstValid;
    MOD_Wire<tUInt8> INST_channelOutQ_0_pw_deq;
    MOD_Wire<tUInt64> INST_channelOutQ_0_rw_enq;
    MOD_Reg<tUInt64> INST_channelOutQ_0_taggedReg;
    MOD_Wire<tUInt8> INST_channelOutQ_1_pw_deq;
    MOD_Wire<tUInt64> INST_channelOutQ_1_rw_enq;
    MOD_Reg<tUInt64> INST_channelOutQ_1_taggedReg;
    MOD_Wire<tUInt8> INST_channelOutQ_2_pw_deq;
    MOD_Wire<tUInt64> INST_channelOutQ_2_rw_enq;
    MOD_Reg<tUInt64> INST_channelOutQ_2_taggedReg;
    MOD_Wire<tUInt8> INST_channelOutQ_3_pw_deq;
    MOD_Wire<tUInt64> INST_channelOutQ_3_rw_enq;
    MOD_Reg<tUInt64> INST_channelOutQ_3_taggedReg;
    MOD_Wire<tUInt8> INST_channelOutQ_4_pw_deq;
    MOD_Wire<tUInt64> INST_channelOutQ_4_rw_enq;
    MOD_Reg<tUInt64> INST_channelOutQ_4_taggedReg;
    MOD_Wire<tUInt8> INST_inputChannelArbiter_grant_id_wire;
    MOD_Wire<tUInt8> INST_inputChannelArbiter_grant_vector;
    MOD_Reg<tUInt8> INST_inputChannelArbiter_priority_vector;
    MOD_Wire<tUInt8> INST_inputChannelArbiter_request_vector;
    MOD_Wire<tUInt8> INST_inputChannelArbiter_request_vector_1;
    MOD_Wire<tUInt8> INST_inputChannelArbiter_request_vector_2;
    MOD_Wire<tUInt8> INST_inputChannelArbiter_request_vector_3;
    MOD_Wire<tUInt8> INST_inputChannelArbiter_request_vector_4;
    MOD_Wire<tUInt8> INST_outputChannelArbiter_grant_id_wire;
    MOD_Wire<tUInt8> INST_outputChannelArbiter_grant_vector;
    MOD_Reg<tUInt8> INST_outputChannelArbiter_priority_vector;
    MOD_Wire<tUInt8> INST_outputChannelArbiter_request_vector;
    MOD_Wire<tUInt8> INST_outputChannelArbiter_request_vector_1;
    MOD_Wire<tUInt8> INST_outputChannelArbiter_request_vector_2;
    MOD_Wire<tUInt8> INST_outputChannelArbiter_request_vector_3;
    MOD_Wire<tUInt8> INST_outputChannelArbiter_request_vector_4;
    MOD_Fifo<tUInt64> INST_routePacketQ;
   
   /* Constructor */
   public:
    MOD_mkNode(char const *name, Module *parent, tUInt8 ARG_thisRowAddr, tUInt8 ARG_thisColAddr);
   
   /* Symbol init methods */
   private:
    void init_symbols_0();
   
   /* Reset signal definitions */
   private:
    tUInt8 PORT_RST_N;
   
   /* Port definitions */
   public:
    tUInt8 PORT_thisRowAddr;
    tUInt8 PORT_thisColAddr;
    tUInt8 PORT_EN_channels_0_putNoCPacket_put;
    tUInt8 PORT_EN_channels_0_getNoCPacket_get;
    tUInt8 PORT_EN_channels_1_putNoCPacket_put;
    tUInt8 PORT_EN_channels_1_getNoCPacket_get;
    tUInt8 PORT_EN_channels_2_putNoCPacket_put;
    tUInt8 PORT_EN_channels_2_getNoCPacket_get;
    tUInt8 PORT_EN_channels_3_putNoCPacket_put;
    tUInt8 PORT_EN_channels_3_getNoCPacket_get;
    tUInt8 PORT_EN_channels_4_putNoCPacket_put;
    tUInt8 PORT_EN_channels_4_getNoCPacket_get;
    tUInt64 PORT_channels_0_putNoCPacket_put;
    tUInt64 PORT_channels_1_putNoCPacket_put;
    tUInt64 PORT_channels_2_putNoCPacket_put;
    tUInt64 PORT_channels_3_putNoCPacket_put;
    tUInt64 PORT_channels_4_putNoCPacket_put;
    tUInt8 PORT_RDY_channels_0_putNoCPacket_put;
    tUInt64 PORT_channels_0_getNoCPacket_get;
    tUInt8 PORT_RDY_channels_0_getNoCPacket_get;
    tUInt8 PORT_RDY_channels_1_putNoCPacket_put;
    tUInt64 PORT_channels_1_getNoCPacket_get;
    tUInt8 PORT_RDY_channels_1_getNoCPacket_get;
    tUInt8 PORT_RDY_channels_2_putNoCPacket_put;
    tUInt64 PORT_channels_2_getNoCPacket_get;
    tUInt8 PORT_RDY_channels_2_getNoCPacket_get;
    tUInt8 PORT_RDY_channels_3_putNoCPacket_put;
    tUInt64 PORT_channels_3_getNoCPacket_get;
    tUInt8 PORT_RDY_channels_3_getNoCPacket_get;
    tUInt8 PORT_RDY_channels_4_putNoCPacket_put;
    tUInt64 PORT_channels_4_getNoCPacket_get;
    tUInt8 PORT_RDY_channels_4_getNoCPacket_get;
   
   /* Publicly accessible definitions */
   public:
    tUInt8 DEF_WILL_FIRE_channels_4_getNoCPacket_get;
    tUInt8 DEF_WILL_FIRE_channels_4_putNoCPacket_put;
    tUInt8 DEF_WILL_FIRE_channels_3_getNoCPacket_get;
    tUInt8 DEF_WILL_FIRE_channels_3_putNoCPacket_put;
    tUInt8 DEF_WILL_FIRE_channels_2_getNoCPacket_get;
    tUInt8 DEF_WILL_FIRE_channels_2_putNoCPacket_put;
    tUInt8 DEF_WILL_FIRE_channels_1_getNoCPacket_get;
    tUInt8 DEF_WILL_FIRE_channels_1_putNoCPacket_put;
    tUInt8 DEF_WILL_FIRE_channels_0_getNoCPacket_get;
    tUInt8 DEF_WILL_FIRE_channels_0_putNoCPacket_put;
    tUInt8 DEF_WILL_FIRE___me_check_31;
    tUInt8 DEF_CAN_FIRE___me_check_31;
    tUInt8 DEF_WILL_FIRE___me_check_30;
    tUInt8 DEF_CAN_FIRE___me_check_30;
    tUInt8 DEF_WILL_FIRE___me_check_29;
    tUInt8 DEF_CAN_FIRE___me_check_29;
    tUInt8 DEF_WILL_FIRE___me_check_28;
    tUInt8 DEF_CAN_FIRE___me_check_28;
    tUInt8 DEF_WILL_FIRE___me_check_23;
    tUInt8 DEF_CAN_FIRE___me_check_23;
    tUInt8 DEF_WILL_FIRE_RL_routePacketHome;
    tUInt8 DEF_CAN_FIRE_RL_routePacketHome;
    tUInt8 DEF_WILL_FIRE_RL_routePacketEast;
    tUInt8 DEF_CAN_FIRE_RL_routePacketEast;
    tUInt8 DEF_WILL_FIRE_RL_routePacketWest;
    tUInt8 DEF_CAN_FIRE_RL_routePacketWest;
    tUInt8 DEF_WILL_FIRE_RL_routePacketSouth;
    tUInt8 DEF_CAN_FIRE_RL_routePacketSouth;
    tUInt8 DEF_WILL_FIRE_RL_routePacketNorth;
    tUInt8 DEF_CAN_FIRE_RL_routePacketNorth;
    tUInt8 DEF_WILL_FIRE_RL_inputArbitratei_4;
    tUInt8 DEF_CAN_FIRE_RL_inputArbitratei_4;
    tUInt8 DEF_WILL_FIRE_RL_inputArbitratei_3;
    tUInt8 DEF_CAN_FIRE_RL_inputArbitratei_3;
    tUInt8 DEF_WILL_FIRE_RL_inputArbitratei_2;
    tUInt8 DEF_CAN_FIRE_RL_inputArbitratei_2;
    tUInt8 DEF_WILL_FIRE_RL_inputArbitratei_1;
    tUInt8 DEF_CAN_FIRE_RL_inputArbitratei_1;
    tUInt8 DEF_WILL_FIRE_RL_inputArbitratei;
    tUInt8 DEF_CAN_FIRE_RL_inputArbitratei;
    tUInt8 DEF_WILL_FIRE_RL_inputChannelArbiterRequest;
    tUInt8 DEF_CAN_FIRE_RL_inputChannelArbiterRequest;
    tUInt8 DEF_WILL_FIRE_RL_outputChannelArbiter_every;
    tUInt8 DEF_CAN_FIRE_RL_outputChannelArbiter_every;
    tUInt8 DEF_WILL_FIRE_RL_inputChannelArbiter_every;
    tUInt8 DEF_CAN_FIRE_RL_inputChannelArbiter_every;
    tUInt8 DEF_WILL_FIRE_RL_channelOutQ_4_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_channelOutQ_4_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_channelOutQ_4_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_channelOutQ_4_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_channelInQ_4_dequeue;
    tUInt8 DEF_CAN_FIRE_RL_channelInQ_4_dequeue;
    tUInt8 DEF_WILL_FIRE_RL_channelInQ_4_enqueue;
    tUInt8 DEF_CAN_FIRE_RL_channelInQ_4_enqueue;
    tUInt8 DEF_WILL_FIRE_RL_channelOutQ_3_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_channelOutQ_3_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_channelOutQ_3_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_channelOutQ_3_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_channelInQ_3_dequeue;
    tUInt8 DEF_CAN_FIRE_RL_channelInQ_3_dequeue;
    tUInt8 DEF_WILL_FIRE_RL_channelInQ_3_enqueue;
    tUInt8 DEF_CAN_FIRE_RL_channelInQ_3_enqueue;
    tUInt8 DEF_WILL_FIRE_RL_channelOutQ_2_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_channelOutQ_2_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_channelOutQ_2_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_channelOutQ_2_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_channelInQ_2_dequeue;
    tUInt8 DEF_CAN_FIRE_RL_channelInQ_2_dequeue;
    tUInt8 DEF_WILL_FIRE_RL_channelInQ_2_enqueue;
    tUInt8 DEF_CAN_FIRE_RL_channelInQ_2_enqueue;
    tUInt8 DEF_WILL_FIRE_RL_channelOutQ_1_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_channelOutQ_1_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_channelOutQ_1_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_channelOutQ_1_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_channelInQ_1_dequeue;
    tUInt8 DEF_CAN_FIRE_RL_channelInQ_1_dequeue;
    tUInt8 DEF_WILL_FIRE_RL_channelInQ_1_enqueue;
    tUInt8 DEF_CAN_FIRE_RL_channelInQ_1_enqueue;
    tUInt8 DEF_WILL_FIRE_RL_channelOutQ_0_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_channelOutQ_0_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_channelOutQ_0_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_channelOutQ_0_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_channelInQ_0_dequeue;
    tUInt8 DEF_CAN_FIRE_RL_channelInQ_0_dequeue;
    tUInt8 DEF_WILL_FIRE_RL_channelInQ_0_enqueue;
    tUInt8 DEF_CAN_FIRE_RL_channelInQ_0_enqueue;
    tUInt8 DEF_CAN_FIRE_channels_4_getNoCPacket_get;
    tUInt8 DEF_channelOutQ_4_taggedReg_25_BIT_51___d674;
    tUInt8 DEF_channelOutQ_4_rw_enq_whas____d685;
    tUInt8 DEF_CAN_FIRE_channels_4_putNoCPacket_put;
    tUInt8 DEF_CAN_FIRE_channels_3_getNoCPacket_get;
    tUInt8 DEF_channelOutQ_3_taggedReg_35_BIT_51___d675;
    tUInt8 DEF_channelOutQ_3_rw_enq_whas____d683;
    tUInt8 DEF_CAN_FIRE_channels_3_putNoCPacket_put;
    tUInt8 DEF_CAN_FIRE_channels_2_getNoCPacket_get;
    tUInt8 DEF_channelOutQ_2_taggedReg_17_BIT_51___d673;
    tUInt8 DEF_channelOutQ_2_rw_enq_whas____d681;
    tUInt8 DEF_CAN_FIRE_channels_2_putNoCPacket_put;
    tUInt8 DEF_CAN_FIRE_channels_1_getNoCPacket_get;
    tUInt8 DEF_channelOutQ_1_taggedReg_07_BIT_51___d672;
    tUInt8 DEF_channelOutQ_1_rw_enq_whas____d679;
    tUInt8 DEF_CAN_FIRE_channels_1_putNoCPacket_put;
    tUInt8 DEF_CAN_FIRE_channels_0_getNoCPacket_get;
    tUInt8 DEF_channelOutQ_0_taggedReg_44_BIT_51___d676;
    tUInt8 DEF_channelOutQ_0_rw_enq_whas____d678;
    tUInt8 DEF_CAN_FIRE_channels_0_putNoCPacket_put;
    tUInt64 DEF_channelOutQ_4_taggedReg___d637;
    tUInt64 DEF_channelOutQ_3_taggedReg___d636;
    tUInt64 DEF_channelOutQ_2_taggedReg___d635;
    tUInt64 DEF_channelOutQ_1_taggedReg___d634;
    tUInt64 DEF_channelOutQ_0_taggedReg___d633;
    tUInt64 DEF_routePacketQ_first____d656;
    tUInt8 DEF_channelInQ_4_enqw_whas____d669;
    tUInt8 DEF_channelInQ_4_ff_i_notEmpty____d670;
    tUInt8 DEF_channelInQ_3_enqw_whas____d666;
    tUInt8 DEF_channelInQ_3_ff_i_notEmpty____d667;
    tUInt8 DEF_channelInQ_2_enqw_whas____d663;
    tUInt8 DEF_channelInQ_2_ff_i_notEmpty____d664;
    tUInt8 DEF_channelInQ_1_enqw_whas____d660;
    tUInt8 DEF_channelInQ_1_ff_i_notEmpty____d661;
    tUInt8 DEF_channelInQ_0_enqw_whas____d658;
    tUInt8 DEF_channelInQ_0_ff_i_notEmpty____d659;
   
   /* Local definitions */
   private:
    tUInt64 DEF_channelOutQ_4_rw_enq_wget____d649;
    tUInt64 DEF_channelInQ_4_enqw_wget____d823;
    tUInt64 DEF_channelOutQ_3_rw_enq_wget____d648;
    tUInt64 DEF_channelInQ_3_enqw_wget____d822;
    tUInt64 DEF_channelOutQ_2_rw_enq_wget____d647;
    tUInt64 DEF_channelInQ_2_enqw_wget____d821;
    tUInt64 DEF_channelOutQ_1_rw_enq_wget____d646;
    tUInt64 DEF_channelInQ_1_enqw_wget____d820;
    tUInt64 DEF_channelOutQ_0_rw_enq_wget____d645;
    tUInt64 DEF_channelInQ_0_enqw_wget____d819;
    tUInt8 DEF_x__h16124;
    std::string DEF_IF_IF_channelInQ_4_ff_i_notEmpty__1_THEN_NOT_c_ETC___d505;
    std::string DEF_IF_IF_channelInQ_4_ff_i_notEmpty__1_THEN_chann_ETC___d504;
    std::string DEF_IF_IF_channelInQ_3_ff_i_notEmpty__7_THEN_NOT_c_ETC___d456;
    std::string DEF_IF_IF_channelInQ_3_ff_i_notEmpty__7_THEN_chann_ETC___d455;
    std::string DEF_IF_IF_channelInQ_2_ff_i_notEmpty__3_THEN_NOT_c_ETC___d407;
    std::string DEF_IF_IF_channelInQ_2_ff_i_notEmpty__3_THEN_chann_ETC___d406;
    std::string DEF_IF_IF_channelInQ_1_ff_i_notEmpty__9_THEN_NOT_c_ETC___d358;
    std::string DEF_IF_IF_channelInQ_1_ff_i_notEmpty__9_THEN_chann_ETC___d357;
    std::string DEF_IF_IF_channelInQ_0_ff_i_notEmpty_THEN_channelI_ETC___d303;
    std::string DEF_IF_IF_channelInQ_0_ff_i_notEmpty_THEN_NOT_chan_ETC___d304;
    tUInt8 DEF_x__h16126;
    tUInt8 DEF__0_CONCAT_thisRowAddr_05_MUL_3_06_BITS_3_TO_0_0_ETC___d657;
    tUInt8 DEF_y__h16125;
    tUInt64 DEF__0_CONCAT_DONTCARE___d644;
   
   /* Rules */
   public:
    void RL_channelInQ_0_enqueue();
    void RL_channelInQ_0_dequeue();
    void RL_channelOutQ_0_rule_enq();
    void RL_channelOutQ_0_rule_deq();
    void RL_channelInQ_1_enqueue();
    void RL_channelInQ_1_dequeue();
    void RL_channelOutQ_1_rule_enq();
    void RL_channelOutQ_1_rule_deq();
    void RL_channelInQ_2_enqueue();
    void RL_channelInQ_2_dequeue();
    void RL_channelOutQ_2_rule_enq();
    void RL_channelOutQ_2_rule_deq();
    void RL_channelInQ_3_enqueue();
    void RL_channelInQ_3_dequeue();
    void RL_channelOutQ_3_rule_enq();
    void RL_channelOutQ_3_rule_deq();
    void RL_channelInQ_4_enqueue();
    void RL_channelInQ_4_dequeue();
    void RL_channelOutQ_4_rule_enq();
    void RL_channelOutQ_4_rule_deq();
    void RL_inputChannelArbiter_every();
    void RL_outputChannelArbiter_every();
    void RL_inputChannelArbiterRequest();
    void RL_inputArbitratei();
    void RL_inputArbitratei_1();
    void RL_inputArbitratei_2();
    void RL_inputArbitratei_3();
    void RL_inputArbitratei_4();
    void RL_routePacketNorth();
    void RL_routePacketSouth();
    void RL_routePacketWest();
    void RL_routePacketEast();
    void RL_routePacketHome();
    void __me_check_23();
    void __me_check_28();
    void __me_check_29();
    void __me_check_30();
    void __me_check_31();
   
   /* Methods */
   public:
    void METH_channels_0_putNoCPacket_put(tUInt64 ARG_channels_0_putNoCPacket_put);
    tUInt8 METH_RDY_channels_0_putNoCPacket_put();
    tUInt64 METH_channels_0_getNoCPacket_get();
    tUInt8 METH_RDY_channels_0_getNoCPacket_get();
    void METH_channels_1_putNoCPacket_put(tUInt64 ARG_channels_1_putNoCPacket_put);
    tUInt8 METH_RDY_channels_1_putNoCPacket_put();
    tUInt64 METH_channels_1_getNoCPacket_get();
    tUInt8 METH_RDY_channels_1_getNoCPacket_get();
    void METH_channels_2_putNoCPacket_put(tUInt64 ARG_channels_2_putNoCPacket_put);
    tUInt8 METH_RDY_channels_2_putNoCPacket_put();
    tUInt64 METH_channels_2_getNoCPacket_get();
    tUInt8 METH_RDY_channels_2_getNoCPacket_get();
    void METH_channels_3_putNoCPacket_put(tUInt64 ARG_channels_3_putNoCPacket_put);
    tUInt8 METH_RDY_channels_3_putNoCPacket_put();
    tUInt64 METH_channels_3_getNoCPacket_get();
    tUInt8 METH_RDY_channels_3_getNoCPacket_get();
    void METH_channels_4_putNoCPacket_put(tUInt64 ARG_channels_4_putNoCPacket_put);
    tUInt8 METH_RDY_channels_4_putNoCPacket_put();
    tUInt64 METH_channels_4_getNoCPacket_get();
    tUInt8 METH_RDY_channels_4_getNoCPacket_get();
   
   /* Reset routines */
   public:
    void reset_RST_N(tUInt8 ARG_rst_in);
   
   /* Static handles to reset routines */
   public:
   
   /* Pointers to reset fns in parent module for asserting output resets */
   private:
   
   /* Functions for the parent module to register its reset fns */
   public:
   
   /* Functions to set the elaborated clock id */
   public:
    void set_clk_0(char const *s);
   
   /* State dumping routine */
   public:
    void dump_state(unsigned int indent);
   
   /* VCD dumping routines */
   public:
    unsigned int dump_VCD_defs(unsigned int levels);
    void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkNode &backing);
    void vcd_defs(tVCDDumpType dt, MOD_mkNode &backing);
    void vcd_prims(tVCDDumpType dt, MOD_mkNode &backing);
  };
}

#endif /* ifndef __mkNode_h__ */
