/*
 * Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
 * 
 * On Wed Jun  7 17:27:15 IST 2017
 * 
 */
#include "bluesim_primitives.h"
#include "mkNode.h"


/* String declarations */
static std::string const __str_literal_6("Error: \"../src/Node.bsv\", line 104, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_routePacketNorth] and\n  [RL_routePacketEast] ) fired in the same clock cycle.\n",
					 182u);
static std::string const __str_literal_5("Error: \"../src/Node.bsv\", line 104, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_routePacketNorth] and\n  [RL_routePacketHome] ) fired in the same clock cycle.\n",
					 182u);
static std::string const __str_literal_8("Error: \"../src/Node.bsv\", line 104, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_routePacketNorth] and\n  [RL_routePacketSouth] ) fired in the same clock cycle.\n",
					 183u);
static std::string const __str_literal_7("Error: \"../src/Node.bsv\", line 104, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_routePacketNorth] and\n  [RL_routePacketWest] ) fired in the same clock cycle.\n",
					 182u);
static std::string const __str_literal_10("Error: \"../src/Node.bsv\", line 104, column 44: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_routePacketSouth] and\n  [RL_routePacketEast] ) fired in the same clock cycle.\n",
					  182u);
static std::string const __str_literal_9("Error: \"../src/Node.bsv\", line 104, column 44: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_routePacketSouth] and\n  [RL_routePacketHome] ) fired in the same clock cycle.\n",
					 182u);
static std::string const __str_literal_11("Error: \"../src/Node.bsv\", line 104, column 44: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_routePacketSouth] and\n  [RL_routePacketWest] ) fired in the same clock cycle.\n",
					  182u);
static std::string const __str_literal_13("Error: \"../src/Node.bsv\", line 104, column 61: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_routePacketWest] and\n  [RL_routePacketEast] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_12("Error: \"../src/Node.bsv\", line 104, column 61: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_routePacketWest] and\n  [RL_routePacketHome] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_14("Error: \"../src/Node.bsv\", line 104, column 77: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_routePacketEast] and\n  [RL_routePacketHome] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_4("Error: \"../src/Node.bsv\", line 90, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inputArbitratei,\n  RL_inputArbitratei_1, RL_inputArbitratei_2, RL_inputArbitratei_3] and\n  [RL_inputArbitratei_4] ) fired in the same clock cycle.\n",
					 250u);
static std::string const __str_literal_3("Error: \"../src/Node.bsv\", line 90, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inputArbitratei,\n  RL_inputArbitratei_1, RL_inputArbitratei_2] and [RL_inputArbitratei_3] )\n  fired in the same clock cycle.\n",
					 228u);
static std::string const __str_literal_2("Error: \"../src/Node.bsv\", line 90, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inputArbitratei,\n  RL_inputArbitratei_1] and [RL_inputArbitratei_2] ) fired in the same clock\n  cycle.\n",
					 206u);
static std::string const __str_literal_1("Error: \"../src/Node.bsv\", line 90, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inputArbitratei] and\n  [RL_inputArbitratei_1] ) fired in the same clock cycle.\n",
					 182u);


/* Constructor */
MOD_mkNode::MOD_mkNode(tSimStateHdl simHdl,
		       char const *name,
		       Module *parent,
		       tUInt8 ARG_thisRowAddr,
		       tUInt8 ARG_thisColAddr)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_channelInQ_0_dequeueing(simHdl, "channelInQ_0_dequeueing", this, 0u),
    INST_channelInQ_0_enqw(simHdl, "channelInQ_0_enqw", this, 47u, (tUInt8)0u),
    INST_channelInQ_0_ff(simHdl, "channelInQ_0_ff", this, 47u, 1u, 0u, 0u),
    INST_channelInQ_0_firstValid(simHdl, "channelInQ_0_firstValid", this, 1u, (tUInt8)1u),
    INST_channelInQ_1_dequeueing(simHdl, "channelInQ_1_dequeueing", this, 0u),
    INST_channelInQ_1_enqw(simHdl, "channelInQ_1_enqw", this, 47u, (tUInt8)0u),
    INST_channelInQ_1_ff(simHdl, "channelInQ_1_ff", this, 47u, 1u, 0u, 0u),
    INST_channelInQ_1_firstValid(simHdl, "channelInQ_1_firstValid", this, 1u, (tUInt8)1u),
    INST_channelInQ_2_dequeueing(simHdl, "channelInQ_2_dequeueing", this, 0u),
    INST_channelInQ_2_enqw(simHdl, "channelInQ_2_enqw", this, 47u, (tUInt8)0u),
    INST_channelInQ_2_ff(simHdl, "channelInQ_2_ff", this, 47u, 1u, 0u, 0u),
    INST_channelInQ_2_firstValid(simHdl, "channelInQ_2_firstValid", this, 1u, (tUInt8)1u),
    INST_channelInQ_3_dequeueing(simHdl, "channelInQ_3_dequeueing", this, 0u),
    INST_channelInQ_3_enqw(simHdl, "channelInQ_3_enqw", this, 47u, (tUInt8)0u),
    INST_channelInQ_3_ff(simHdl, "channelInQ_3_ff", this, 47u, 1u, 0u, 0u),
    INST_channelInQ_3_firstValid(simHdl, "channelInQ_3_firstValid", this, 1u, (tUInt8)1u),
    INST_channelInQ_4_dequeueing(simHdl, "channelInQ_4_dequeueing", this, 0u),
    INST_channelInQ_4_enqw(simHdl, "channelInQ_4_enqw", this, 47u, (tUInt8)0u),
    INST_channelInQ_4_ff(simHdl, "channelInQ_4_ff", this, 47u, 1u, 0u, 0u),
    INST_channelInQ_4_firstValid(simHdl, "channelInQ_4_firstValid", this, 1u, (tUInt8)1u),
    INST_channelOutQ_0_rv(simHdl, "channelOutQ_0_rv", this, 48u, 46912496118442llu, (tUInt8)0u),
    INST_channelOutQ_1_rv(simHdl, "channelOutQ_1_rv", this, 48u, 46912496118442llu, (tUInt8)0u),
    INST_channelOutQ_2_rv(simHdl, "channelOutQ_2_rv", this, 48u, 46912496118442llu, (tUInt8)0u),
    INST_channelOutQ_3_rv(simHdl, "channelOutQ_3_rv", this, 48u, 46912496118442llu, (tUInt8)0u),
    INST_channelOutQ_4_rv(simHdl, "channelOutQ_4_rv", this, 48u, 46912496118442llu, (tUInt8)0u),
    INST_inputChannelArbiter_grant_id_wire(simHdl,
					   "inputChannelArbiter_grant_id_wire",
					   this,
					   3u,
					   (tUInt8)0u),
    INST_inputChannelArbiter_grant_vector(simHdl,
					  "inputChannelArbiter_grant_vector",
					  this,
					  5u,
					  (tUInt8)0u),
    INST_inputChannelArbiter_priority_vector(simHdl,
					     "inputChannelArbiter_priority_vector",
					     this,
					     5u,
					     (tUInt8)1u,
					     (tUInt8)0u),
    INST_inputChannelArbiter_request_vector_0(simHdl, "inputChannelArbiter_request_vector_0", this, 0u),
    INST_inputChannelArbiter_request_vector_1(simHdl, "inputChannelArbiter_request_vector_1", this, 0u),
    INST_inputChannelArbiter_request_vector_2(simHdl, "inputChannelArbiter_request_vector_2", this, 0u),
    INST_inputChannelArbiter_request_vector_3(simHdl, "inputChannelArbiter_request_vector_3", this, 0u),
    INST_inputChannelArbiter_request_vector_4(simHdl, "inputChannelArbiter_request_vector_4", this, 0u),
    INST_outputChannelArbiter_grant_id_wire(simHdl,
					    "outputChannelArbiter_grant_id_wire",
					    this,
					    3u,
					    (tUInt8)0u),
    INST_outputChannelArbiter_grant_vector(simHdl,
					   "outputChannelArbiter_grant_vector",
					   this,
					   5u,
					   (tUInt8)0u),
    INST_outputChannelArbiter_priority_vector(simHdl,
					      "outputChannelArbiter_priority_vector",
					      this,
					      5u,
					      (tUInt8)1u,
					      (tUInt8)0u),
    INST_outputChannelArbiter_request_vector_0(simHdl,
					       "outputChannelArbiter_request_vector_0",
					       this,
					       0u),
    INST_outputChannelArbiter_request_vector_1(simHdl,
					       "outputChannelArbiter_request_vector_1",
					       this,
					       0u),
    INST_outputChannelArbiter_request_vector_2(simHdl,
					       "outputChannelArbiter_request_vector_2",
					       this,
					       0u),
    INST_outputChannelArbiter_request_vector_3(simHdl,
					       "outputChannelArbiter_request_vector_3",
					       this,
					       0u),
    INST_outputChannelArbiter_request_vector_4(simHdl,
					       "outputChannelArbiter_request_vector_4",
					       this,
					       0u),
    INST_routePacketQ(simHdl, "routePacketQ", this, 47u, 2u, 1u, 0u),
    PORT_RST_N((tUInt8)1u),
    PORT_thisRowAddr(ARG_thisRowAddr),
    PORT_thisColAddr(ARG_thisColAddr)
{
  PORT_EN_channels_0_putNoCPacket_put = false;
  PORT_EN_channels_0_getNoCPacket_get = false;
  PORT_EN_channels_1_putNoCPacket_put = false;
  PORT_EN_channels_1_getNoCPacket_get = false;
  PORT_EN_channels_2_putNoCPacket_put = false;
  PORT_EN_channels_2_getNoCPacket_get = false;
  PORT_EN_channels_3_putNoCPacket_put = false;
  PORT_EN_channels_3_getNoCPacket_get = false;
  PORT_EN_channels_4_putNoCPacket_put = false;
  PORT_EN_channels_4_getNoCPacket_get = false;
  PORT_channels_0_putNoCPacket_put = 0llu;
  PORT_channels_1_putNoCPacket_put = 0llu;
  PORT_channels_2_putNoCPacket_put = 0llu;
  PORT_channels_3_putNoCPacket_put = 0llu;
  PORT_channels_4_putNoCPacket_put = 0llu;
  PORT_RDY_channels_0_putNoCPacket_put = false;
  PORT_channels_0_getNoCPacket_get = 0llu;
  PORT_RDY_channels_0_getNoCPacket_get = false;
  PORT_RDY_channels_1_putNoCPacket_put = false;
  PORT_channels_1_getNoCPacket_get = 0llu;
  PORT_RDY_channels_1_getNoCPacket_get = false;
  PORT_RDY_channels_2_putNoCPacket_put = false;
  PORT_channels_2_getNoCPacket_get = 0llu;
  PORT_RDY_channels_2_getNoCPacket_get = false;
  PORT_RDY_channels_3_putNoCPacket_put = false;
  PORT_channels_3_getNoCPacket_get = 0llu;
  PORT_RDY_channels_3_getNoCPacket_get = false;
  PORT_RDY_channels_4_putNoCPacket_put = false;
  PORT_channels_4_getNoCPacket_get = 0llu;
  PORT_RDY_channels_4_getNoCPacket_get = false;
  symbol_count = 178u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkNode::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_13", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_18", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_19", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_20", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_21", SYM_RULE);
  init_symbol(&symbols[5u], "CAN_FIRE___me_check_13", SYM_DEF, &DEF_CAN_FIRE___me_check_13, 1u);
  init_symbol(&symbols[6u], "CAN_FIRE___me_check_18", SYM_DEF, &DEF_CAN_FIRE___me_check_18, 1u);
  init_symbol(&symbols[7u], "CAN_FIRE___me_check_19", SYM_DEF, &DEF_CAN_FIRE___me_check_19, 1u);
  init_symbol(&symbols[8u], "CAN_FIRE___me_check_20", SYM_DEF, &DEF_CAN_FIRE___me_check_20, 1u);
  init_symbol(&symbols[9u], "CAN_FIRE___me_check_21", SYM_DEF, &DEF_CAN_FIRE___me_check_21, 1u);
  init_symbol(&symbols[10u],
	      "CAN_FIRE_channels_0_getNoCPacket_get",
	      SYM_DEF,
	      &DEF_CAN_FIRE_channels_0_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[11u],
	      "CAN_FIRE_channels_0_putNoCPacket_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_channels_0_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[12u],
	      "CAN_FIRE_channels_1_getNoCPacket_get",
	      SYM_DEF,
	      &DEF_CAN_FIRE_channels_1_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[13u],
	      "CAN_FIRE_channels_1_putNoCPacket_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_channels_1_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[14u],
	      "CAN_FIRE_channels_2_getNoCPacket_get",
	      SYM_DEF,
	      &DEF_CAN_FIRE_channels_2_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[15u],
	      "CAN_FIRE_channels_2_putNoCPacket_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_channels_2_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[16u],
	      "CAN_FIRE_channels_3_getNoCPacket_get",
	      SYM_DEF,
	      &DEF_CAN_FIRE_channels_3_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[17u],
	      "CAN_FIRE_channels_3_putNoCPacket_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_channels_3_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[18u],
	      "CAN_FIRE_channels_4_getNoCPacket_get",
	      SYM_DEF,
	      &DEF_CAN_FIRE_channels_4_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[19u],
	      "CAN_FIRE_channels_4_putNoCPacket_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_channels_4_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[20u],
	      "CAN_FIRE_RL_channelInQ_0_dequeue",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_channelInQ_0_dequeue,
	      1u);
  init_symbol(&symbols[21u],
	      "CAN_FIRE_RL_channelInQ_0_enqueue",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_channelInQ_0_enqueue,
	      1u);
  init_symbol(&symbols[22u],
	      "CAN_FIRE_RL_channelInQ_1_dequeue",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_channelInQ_1_dequeue,
	      1u);
  init_symbol(&symbols[23u],
	      "CAN_FIRE_RL_channelInQ_1_enqueue",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_channelInQ_1_enqueue,
	      1u);
  init_symbol(&symbols[24u],
	      "CAN_FIRE_RL_channelInQ_2_dequeue",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_channelInQ_2_dequeue,
	      1u);
  init_symbol(&symbols[25u],
	      "CAN_FIRE_RL_channelInQ_2_enqueue",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_channelInQ_2_enqueue,
	      1u);
  init_symbol(&symbols[26u],
	      "CAN_FIRE_RL_channelInQ_3_dequeue",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_channelInQ_3_dequeue,
	      1u);
  init_symbol(&symbols[27u],
	      "CAN_FIRE_RL_channelInQ_3_enqueue",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_channelInQ_3_enqueue,
	      1u);
  init_symbol(&symbols[28u],
	      "CAN_FIRE_RL_channelInQ_4_dequeue",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_channelInQ_4_dequeue,
	      1u);
  init_symbol(&symbols[29u],
	      "CAN_FIRE_RL_channelInQ_4_enqueue",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_channelInQ_4_enqueue,
	      1u);
  init_symbol(&symbols[30u],
	      "CAN_FIRE_RL_inputArbitratei",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_inputArbitratei,
	      1u);
  init_symbol(&symbols[31u],
	      "CAN_FIRE_RL_inputArbitratei_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_inputArbitratei_1,
	      1u);
  init_symbol(&symbols[32u],
	      "CAN_FIRE_RL_inputArbitratei_2",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_inputArbitratei_2,
	      1u);
  init_symbol(&symbols[33u],
	      "CAN_FIRE_RL_inputArbitratei_3",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_inputArbitratei_3,
	      1u);
  init_symbol(&symbols[34u],
	      "CAN_FIRE_RL_inputArbitratei_4",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_inputArbitratei_4,
	      1u);
  init_symbol(&symbols[35u],
	      "CAN_FIRE_RL_inputChannelArbiter_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_inputChannelArbiter_every,
	      1u);
  init_symbol(&symbols[36u],
	      "CAN_FIRE_RL_inputChannelArbiterRequest",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_inputChannelArbiterRequest,
	      1u);
  init_symbol(&symbols[37u],
	      "CAN_FIRE_RL_outputChannelArbiter_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_outputChannelArbiter_every,
	      1u);
  init_symbol(&symbols[38u],
	      "CAN_FIRE_RL_routePacketEast",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_routePacketEast,
	      1u);
  init_symbol(&symbols[39u],
	      "CAN_FIRE_RL_routePacketHome",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_routePacketHome,
	      1u);
  init_symbol(&symbols[40u],
	      "CAN_FIRE_RL_routePacketNorth",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_routePacketNorth,
	      1u);
  init_symbol(&symbols[41u],
	      "CAN_FIRE_RL_routePacketSouth",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_routePacketSouth,
	      1u);
  init_symbol(&symbols[42u],
	      "CAN_FIRE_RL_routePacketWest",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_routePacketWest,
	      1u);
  init_symbol(&symbols[43u], "channelInQ_0_dequeueing", SYM_MODULE, &INST_channelInQ_0_dequeueing);
  init_symbol(&symbols[44u], "channelInQ_0_enqw", SYM_MODULE, &INST_channelInQ_0_enqw);
  init_symbol(&symbols[45u], "channelInQ_0_ff", SYM_MODULE, &INST_channelInQ_0_ff);
  init_symbol(&symbols[46u], "channelInQ_0_firstValid", SYM_MODULE, &INST_channelInQ_0_firstValid);
  init_symbol(&symbols[47u], "channelInQ_1_dequeueing", SYM_MODULE, &INST_channelInQ_1_dequeueing);
  init_symbol(&symbols[48u], "channelInQ_1_enqw", SYM_MODULE, &INST_channelInQ_1_enqw);
  init_symbol(&symbols[49u], "channelInQ_1_ff", SYM_MODULE, &INST_channelInQ_1_ff);
  init_symbol(&symbols[50u], "channelInQ_1_firstValid", SYM_MODULE, &INST_channelInQ_1_firstValid);
  init_symbol(&symbols[51u], "channelInQ_2_dequeueing", SYM_MODULE, &INST_channelInQ_2_dequeueing);
  init_symbol(&symbols[52u], "channelInQ_2_enqw", SYM_MODULE, &INST_channelInQ_2_enqw);
  init_symbol(&symbols[53u], "channelInQ_2_ff", SYM_MODULE, &INST_channelInQ_2_ff);
  init_symbol(&symbols[54u], "channelInQ_2_firstValid", SYM_MODULE, &INST_channelInQ_2_firstValid);
  init_symbol(&symbols[55u], "channelInQ_3_dequeueing", SYM_MODULE, &INST_channelInQ_3_dequeueing);
  init_symbol(&symbols[56u], "channelInQ_3_enqw", SYM_MODULE, &INST_channelInQ_3_enqw);
  init_symbol(&symbols[57u], "channelInQ_3_ff", SYM_MODULE, &INST_channelInQ_3_ff);
  init_symbol(&symbols[58u], "channelInQ_3_firstValid", SYM_MODULE, &INST_channelInQ_3_firstValid);
  init_symbol(&symbols[59u], "channelInQ_4_dequeueing", SYM_MODULE, &INST_channelInQ_4_dequeueing);
  init_symbol(&symbols[60u], "channelInQ_4_enqw", SYM_MODULE, &INST_channelInQ_4_enqw);
  init_symbol(&symbols[61u], "channelInQ_4_ff", SYM_MODULE, &INST_channelInQ_4_ff);
  init_symbol(&symbols[62u], "channelInQ_4_firstValid", SYM_MODULE, &INST_channelInQ_4_firstValid);
  init_symbol(&symbols[63u], "channelOutQ_0_rv", SYM_MODULE, &INST_channelOutQ_0_rv);
  init_symbol(&symbols[64u], "channelOutQ_1_rv", SYM_MODULE, &INST_channelOutQ_1_rv);
  init_symbol(&symbols[65u], "channelOutQ_2_rv", SYM_MODULE, &INST_channelOutQ_2_rv);
  init_symbol(&symbols[66u], "channelOutQ_3_rv", SYM_MODULE, &INST_channelOutQ_3_rv);
  init_symbol(&symbols[67u], "channelOutQ_4_rv", SYM_MODULE, &INST_channelOutQ_4_rv);
  init_symbol(&symbols[68u],
	      "channels_0_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_channels_0_getNoCPacket_get,
	      47u);
  init_symbol(&symbols[69u],
	      "channels_0_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_channels_0_putNoCPacket_put,
	      47u);
  init_symbol(&symbols[70u],
	      "channels_1_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_channels_1_getNoCPacket_get,
	      47u);
  init_symbol(&symbols[71u],
	      "channels_1_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_channels_1_putNoCPacket_put,
	      47u);
  init_symbol(&symbols[72u],
	      "channels_2_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_channels_2_getNoCPacket_get,
	      47u);
  init_symbol(&symbols[73u],
	      "channels_2_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_channels_2_putNoCPacket_put,
	      47u);
  init_symbol(&symbols[74u],
	      "channels_3_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_channels_3_getNoCPacket_get,
	      47u);
  init_symbol(&symbols[75u],
	      "channels_3_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_channels_3_putNoCPacket_put,
	      47u);
  init_symbol(&symbols[76u],
	      "channels_4_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_channels_4_getNoCPacket_get,
	      47u);
  init_symbol(&symbols[77u],
	      "channels_4_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_channels_4_putNoCPacket_put,
	      47u);
  init_symbol(&symbols[78u],
	      "EN_channels_0_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_EN_channels_0_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[79u],
	      "EN_channels_0_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_EN_channels_0_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[80u],
	      "EN_channels_1_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_EN_channels_1_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[81u],
	      "EN_channels_1_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_EN_channels_1_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[82u],
	      "EN_channels_2_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_EN_channels_2_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[83u],
	      "EN_channels_2_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_EN_channels_2_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[84u],
	      "EN_channels_3_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_EN_channels_3_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[85u],
	      "EN_channels_3_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_EN_channels_3_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[86u],
	      "EN_channels_4_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_EN_channels_4_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[87u],
	      "EN_channels_4_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_EN_channels_4_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[88u],
	      "inputChannelArbiter_grant_id_wire",
	      SYM_MODULE,
	      &INST_inputChannelArbiter_grant_id_wire);
  init_symbol(&symbols[89u],
	      "inputChannelArbiter_grant_vector",
	      SYM_MODULE,
	      &INST_inputChannelArbiter_grant_vector);
  init_symbol(&symbols[90u],
	      "inputChannelArbiter_priority_vector",
	      SYM_MODULE,
	      &INST_inputChannelArbiter_priority_vector);
  init_symbol(&symbols[91u],
	      "inputChannelArbiter_request_vector_0",
	      SYM_MODULE,
	      &INST_inputChannelArbiter_request_vector_0);
  init_symbol(&symbols[92u],
	      "inputChannelArbiter_request_vector_1",
	      SYM_MODULE,
	      &INST_inputChannelArbiter_request_vector_1);
  init_symbol(&symbols[93u],
	      "inputChannelArbiter_request_vector_2",
	      SYM_MODULE,
	      &INST_inputChannelArbiter_request_vector_2);
  init_symbol(&symbols[94u],
	      "inputChannelArbiter_request_vector_3",
	      SYM_MODULE,
	      &INST_inputChannelArbiter_request_vector_3);
  init_symbol(&symbols[95u],
	      "inputChannelArbiter_request_vector_4",
	      SYM_MODULE,
	      &INST_inputChannelArbiter_request_vector_4);
  init_symbol(&symbols[96u],
	      "outputChannelArbiter_grant_id_wire",
	      SYM_MODULE,
	      &INST_outputChannelArbiter_grant_id_wire);
  init_symbol(&symbols[97u],
	      "outputChannelArbiter_grant_vector",
	      SYM_MODULE,
	      &INST_outputChannelArbiter_grant_vector);
  init_symbol(&symbols[98u],
	      "outputChannelArbiter_priority_vector",
	      SYM_MODULE,
	      &INST_outputChannelArbiter_priority_vector);
  init_symbol(&symbols[99u],
	      "outputChannelArbiter_request_vector_0",
	      SYM_MODULE,
	      &INST_outputChannelArbiter_request_vector_0);
  init_symbol(&symbols[100u],
	      "outputChannelArbiter_request_vector_1",
	      SYM_MODULE,
	      &INST_outputChannelArbiter_request_vector_1);
  init_symbol(&symbols[101u],
	      "outputChannelArbiter_request_vector_2",
	      SYM_MODULE,
	      &INST_outputChannelArbiter_request_vector_2);
  init_symbol(&symbols[102u],
	      "outputChannelArbiter_request_vector_3",
	      SYM_MODULE,
	      &INST_outputChannelArbiter_request_vector_3);
  init_symbol(&symbols[103u],
	      "outputChannelArbiter_request_vector_4",
	      SYM_MODULE,
	      &INST_outputChannelArbiter_request_vector_4);
  init_symbol(&symbols[104u],
	      "RDY_channels_0_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_RDY_channels_0_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[105u],
	      "RDY_channels_0_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_RDY_channels_0_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[106u],
	      "RDY_channels_1_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_RDY_channels_1_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[107u],
	      "RDY_channels_1_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_RDY_channels_1_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[108u],
	      "RDY_channels_2_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_RDY_channels_2_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[109u],
	      "RDY_channels_2_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_RDY_channels_2_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[110u],
	      "RDY_channels_3_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_RDY_channels_3_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[111u],
	      "RDY_channels_3_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_RDY_channels_3_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[112u],
	      "RDY_channels_4_getNoCPacket_get",
	      SYM_PORT,
	      &PORT_RDY_channels_4_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[113u],
	      "RDY_channels_4_putNoCPacket_put",
	      SYM_PORT,
	      &PORT_RDY_channels_4_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[114u], "RL_channelInQ_0_dequeue", SYM_RULE);
  init_symbol(&symbols[115u], "RL_channelInQ_0_enqueue", SYM_RULE);
  init_symbol(&symbols[116u], "RL_channelInQ_1_dequeue", SYM_RULE);
  init_symbol(&symbols[117u], "RL_channelInQ_1_enqueue", SYM_RULE);
  init_symbol(&symbols[118u], "RL_channelInQ_2_dequeue", SYM_RULE);
  init_symbol(&symbols[119u], "RL_channelInQ_2_enqueue", SYM_RULE);
  init_symbol(&symbols[120u], "RL_channelInQ_3_dequeue", SYM_RULE);
  init_symbol(&symbols[121u], "RL_channelInQ_3_enqueue", SYM_RULE);
  init_symbol(&symbols[122u], "RL_channelInQ_4_dequeue", SYM_RULE);
  init_symbol(&symbols[123u], "RL_channelInQ_4_enqueue", SYM_RULE);
  init_symbol(&symbols[124u], "RL_inputArbitratei", SYM_RULE);
  init_symbol(&symbols[125u], "RL_inputArbitratei_1", SYM_RULE);
  init_symbol(&symbols[126u], "RL_inputArbitratei_2", SYM_RULE);
  init_symbol(&symbols[127u], "RL_inputArbitratei_3", SYM_RULE);
  init_symbol(&symbols[128u], "RL_inputArbitratei_4", SYM_RULE);
  init_symbol(&symbols[129u], "RL_inputChannelArbiter_every", SYM_RULE);
  init_symbol(&symbols[130u], "RL_inputChannelArbiterRequest", SYM_RULE);
  init_symbol(&symbols[131u], "RL_outputChannelArbiter_every", SYM_RULE);
  init_symbol(&symbols[132u], "RL_routePacketEast", SYM_RULE);
  init_symbol(&symbols[133u], "RL_routePacketHome", SYM_RULE);
  init_symbol(&symbols[134u], "RL_routePacketNorth", SYM_RULE);
  init_symbol(&symbols[135u], "RL_routePacketSouth", SYM_RULE);
  init_symbol(&symbols[136u], "RL_routePacketWest", SYM_RULE);
  init_symbol(&symbols[137u], "routePacketQ", SYM_MODULE, &INST_routePacketQ);
  init_symbol(&symbols[138u], "thisColAddr", SYM_PORT, &PORT_thisColAddr, 2u);
  init_symbol(&symbols[139u], "thisRowAddr", SYM_PORT, &PORT_thisRowAddr, 2u);
  init_symbol(&symbols[140u], "WILL_FIRE___me_check_13", SYM_DEF, &DEF_WILL_FIRE___me_check_13, 1u);
  init_symbol(&symbols[141u], "WILL_FIRE___me_check_18", SYM_DEF, &DEF_WILL_FIRE___me_check_18, 1u);
  init_symbol(&symbols[142u], "WILL_FIRE___me_check_19", SYM_DEF, &DEF_WILL_FIRE___me_check_19, 1u);
  init_symbol(&symbols[143u], "WILL_FIRE___me_check_20", SYM_DEF, &DEF_WILL_FIRE___me_check_20, 1u);
  init_symbol(&symbols[144u], "WILL_FIRE___me_check_21", SYM_DEF, &DEF_WILL_FIRE___me_check_21, 1u);
  init_symbol(&symbols[145u],
	      "WILL_FIRE_channels_0_getNoCPacket_get",
	      SYM_DEF,
	      &DEF_WILL_FIRE_channels_0_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[146u],
	      "WILL_FIRE_channels_0_putNoCPacket_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_channels_0_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[147u],
	      "WILL_FIRE_channels_1_getNoCPacket_get",
	      SYM_DEF,
	      &DEF_WILL_FIRE_channels_1_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[148u],
	      "WILL_FIRE_channels_1_putNoCPacket_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_channels_1_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[149u],
	      "WILL_FIRE_channels_2_getNoCPacket_get",
	      SYM_DEF,
	      &DEF_WILL_FIRE_channels_2_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[150u],
	      "WILL_FIRE_channels_2_putNoCPacket_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_channels_2_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[151u],
	      "WILL_FIRE_channels_3_getNoCPacket_get",
	      SYM_DEF,
	      &DEF_WILL_FIRE_channels_3_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[152u],
	      "WILL_FIRE_channels_3_putNoCPacket_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_channels_3_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[153u],
	      "WILL_FIRE_channels_4_getNoCPacket_get",
	      SYM_DEF,
	      &DEF_WILL_FIRE_channels_4_getNoCPacket_get,
	      1u);
  init_symbol(&symbols[154u],
	      "WILL_FIRE_channels_4_putNoCPacket_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_channels_4_putNoCPacket_put,
	      1u);
  init_symbol(&symbols[155u],
	      "WILL_FIRE_RL_channelInQ_0_dequeue",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_channelInQ_0_dequeue,
	      1u);
  init_symbol(&symbols[156u],
	      "WILL_FIRE_RL_channelInQ_0_enqueue",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_channelInQ_0_enqueue,
	      1u);
  init_symbol(&symbols[157u],
	      "WILL_FIRE_RL_channelInQ_1_dequeue",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_channelInQ_1_dequeue,
	      1u);
  init_symbol(&symbols[158u],
	      "WILL_FIRE_RL_channelInQ_1_enqueue",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_channelInQ_1_enqueue,
	      1u);
  init_symbol(&symbols[159u],
	      "WILL_FIRE_RL_channelInQ_2_dequeue",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_channelInQ_2_dequeue,
	      1u);
  init_symbol(&symbols[160u],
	      "WILL_FIRE_RL_channelInQ_2_enqueue",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_channelInQ_2_enqueue,
	      1u);
  init_symbol(&symbols[161u],
	      "WILL_FIRE_RL_channelInQ_3_dequeue",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_channelInQ_3_dequeue,
	      1u);
  init_symbol(&symbols[162u],
	      "WILL_FIRE_RL_channelInQ_3_enqueue",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_channelInQ_3_enqueue,
	      1u);
  init_symbol(&symbols[163u],
	      "WILL_FIRE_RL_channelInQ_4_dequeue",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_channelInQ_4_dequeue,
	      1u);
  init_symbol(&symbols[164u],
	      "WILL_FIRE_RL_channelInQ_4_enqueue",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_channelInQ_4_enqueue,
	      1u);
  init_symbol(&symbols[165u],
	      "WILL_FIRE_RL_inputArbitratei",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_inputArbitratei,
	      1u);
  init_symbol(&symbols[166u],
	      "WILL_FIRE_RL_inputArbitratei_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_inputArbitratei_1,
	      1u);
  init_symbol(&symbols[167u],
	      "WILL_FIRE_RL_inputArbitratei_2",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_inputArbitratei_2,
	      1u);
  init_symbol(&symbols[168u],
	      "WILL_FIRE_RL_inputArbitratei_3",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_inputArbitratei_3,
	      1u);
  init_symbol(&symbols[169u],
	      "WILL_FIRE_RL_inputArbitratei_4",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_inputArbitratei_4,
	      1u);
  init_symbol(&symbols[170u],
	      "WILL_FIRE_RL_inputChannelArbiter_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_inputChannelArbiter_every,
	      1u);
  init_symbol(&symbols[171u],
	      "WILL_FIRE_RL_inputChannelArbiterRequest",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_inputChannelArbiterRequest,
	      1u);
  init_symbol(&symbols[172u],
	      "WILL_FIRE_RL_outputChannelArbiter_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_outputChannelArbiter_every,
	      1u);
  init_symbol(&symbols[173u],
	      "WILL_FIRE_RL_routePacketEast",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_routePacketEast,
	      1u);
  init_symbol(&symbols[174u],
	      "WILL_FIRE_RL_routePacketHome",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_routePacketHome,
	      1u);
  init_symbol(&symbols[175u],
	      "WILL_FIRE_RL_routePacketNorth",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_routePacketNorth,
	      1u);
  init_symbol(&symbols[176u],
	      "WILL_FIRE_RL_routePacketSouth",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_routePacketSouth,
	      1u);
  init_symbol(&symbols[177u],
	      "WILL_FIRE_RL_routePacketWest",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_routePacketWest,
	      1u);
}


/* Rule actions */

void MOD_mkNode::RL_channelInQ_0_enqueue()
{
  DEF_channelInQ_0_enqw_wget____d7 = INST_channelInQ_0_enqw.METH_wget();
  INST_channelInQ_0_ff.METH_enq(DEF_channelInQ_0_enqw_wget____d7);
}

void MOD_mkNode::RL_channelInQ_0_dequeue()
{
  INST_channelInQ_0_ff.METH_deq();
}

void MOD_mkNode::RL_channelInQ_1_enqueue()
{
  DEF_channelInQ_1_enqw_wget____d15 = INST_channelInQ_1_enqw.METH_wget();
  INST_channelInQ_1_ff.METH_enq(DEF_channelInQ_1_enqw_wget____d15);
}

void MOD_mkNode::RL_channelInQ_1_dequeue()
{
  INST_channelInQ_1_ff.METH_deq();
}

void MOD_mkNode::RL_channelInQ_2_enqueue()
{
  DEF_channelInQ_2_enqw_wget____d23 = INST_channelInQ_2_enqw.METH_wget();
  INST_channelInQ_2_ff.METH_enq(DEF_channelInQ_2_enqw_wget____d23);
}

void MOD_mkNode::RL_channelInQ_2_dequeue()
{
  INST_channelInQ_2_ff.METH_deq();
}

void MOD_mkNode::RL_channelInQ_3_enqueue()
{
  DEF_channelInQ_3_enqw_wget____d31 = INST_channelInQ_3_enqw.METH_wget();
  INST_channelInQ_3_ff.METH_enq(DEF_channelInQ_3_enqw_wget____d31);
}

void MOD_mkNode::RL_channelInQ_3_dequeue()
{
  INST_channelInQ_3_ff.METH_deq();
}

void MOD_mkNode::RL_channelInQ_4_enqueue()
{
  DEF_channelInQ_4_enqw_wget____d39 = INST_channelInQ_4_enqw.METH_wget();
  INST_channelInQ_4_ff.METH_enq(DEF_channelInQ_4_enqw_wget____d39);
}

void MOD_mkNode::RL_channelInQ_4_dequeue()
{
  INST_channelInQ_4_ff.METH_deq();
}

void MOD_mkNode::RL_inputChannelArbiter_every()
{
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d131;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d113;
  tUInt8 DEF_NOT_inputChannelArbiter_request_vector_0_whas__3___d54;
  tUInt8 DEF_NOT_inputChannelArbiter_request_vector_1_whas__0___d51;
  tUInt8 DEF_NOT_inputChannelArbiter_request_vector_2_whas__7___d48;
  tUInt8 DEF_NOT_inputChannelArbiter_request_vector_4_whas__4___d67;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d66;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d78;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d89;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d101;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d112;
  tUInt8 DEF_NOT_inputChannelArbiter_request_vector_3_whas__3___d44;
  tUInt8 DEF_x1__h6318;
  tUInt8 DEF_inputChannelArbiter_priority_vector__h5293;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d77;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d88;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d100;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d116;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d110;
  tUInt8 DEF_inputChannelArbiter_priority_vector_BIT_1___h5245;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d61;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d99;
  tUInt8 DEF_inputChannelArbiter_priority_vector_BIT_2___h5196;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d87;
  tUInt8 DEF_inputChannelArbiter_priority_vector_BIT_3___h5147;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d76;
  tUInt8 DEF_inputChannelArbiter_request_vector_2_whas____d47;
  tUInt8 DEF_inputChannelArbiter_request_vector_3_whas____d43;
  tUInt8 DEF_inputChannelArbiter_priority_vector_BIT_4___h5098;
  tUInt8 DEF_inputChannelArbiter_request_vector_1_whas____d50;
  tUInt8 DEF_inputChannelArbiter_priority_vector_BIT_0___h5294;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d57;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d59;
  tUInt8 DEF_inputChannelArbiter_request_vector_4_whas____d64;
  tUInt8 DEF_inputChannelArbiter_request_vector_0_whas____d53;
  tUInt8 DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d129;
  DEF_inputChannelArbiter_request_vector_0_whas____d53 = INST_inputChannelArbiter_request_vector_0.METH_whas();
  DEF_inputChannelArbiter_request_vector_4_whas____d64 = INST_inputChannelArbiter_request_vector_4.METH_whas();
  DEF_inputChannelArbiter_request_vector_1_whas____d50 = INST_inputChannelArbiter_request_vector_1.METH_whas();
  DEF_inputChannelArbiter_request_vector_3_whas____d43 = INST_inputChannelArbiter_request_vector_3.METH_whas();
  DEF_inputChannelArbiter_request_vector_2_whas____d47 = INST_inputChannelArbiter_request_vector_2.METH_whas();
  DEF_inputChannelArbiter_priority_vector__h5293 = INST_inputChannelArbiter_priority_vector.METH_read();
  DEF_inputChannelArbiter_priority_vector_BIT_0___h5294 = (tUInt8)((tUInt8)1u & DEF_inputChannelArbiter_priority_vector__h5293);
  DEF_inputChannelArbiter_priority_vector_BIT_4___h5098 = (tUInt8)(DEF_inputChannelArbiter_priority_vector__h5293 >> 4u);
  DEF_inputChannelArbiter_priority_vector_BIT_3___h5147 = (tUInt8)((tUInt8)1u & (DEF_inputChannelArbiter_priority_vector__h5293 >> 3u));
  DEF_inputChannelArbiter_priority_vector_BIT_2___h5196 = (tUInt8)((tUInt8)1u & (DEF_inputChannelArbiter_priority_vector__h5293 >> 2u));
  DEF_inputChannelArbiter_priority_vector_BIT_1___h5245 = (tUInt8)((tUInt8)1u & (DEF_inputChannelArbiter_priority_vector__h5293 >> 1u));
  DEF_NOT_inputChannelArbiter_request_vector_3_whas__3___d44 = !DEF_inputChannelArbiter_request_vector_3_whas____d43;
  DEF_NOT_inputChannelArbiter_request_vector_4_whas__4___d67 = !DEF_inputChannelArbiter_request_vector_4_whas____d64;
  DEF_NOT_inputChannelArbiter_request_vector_2_whas__7___d48 = !DEF_inputChannelArbiter_request_vector_2_whas____d47;
  DEF_NOT_inputChannelArbiter_request_vector_1_whas__0___d51 = !DEF_inputChannelArbiter_request_vector_1_whas____d50;
  DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d110 = (DEF_inputChannelArbiter_priority_vector_BIT_0___h5294 || (DEF_NOT_inputChannelArbiter_request_vector_4_whas__4___d67 && (DEF_inputChannelArbiter_priority_vector_BIT_4___h5098 || (DEF_NOT_inputChannelArbiter_request_vector_3_whas__3___d44 && (DEF_inputChannelArbiter_priority_vector_BIT_3___h5147 || (DEF_NOT_inputChannelArbiter_request_vector_2_whas__7___d48 && (DEF_inputChannelArbiter_priority_vector_BIT_2___h5196 || (DEF_NOT_inputChannelArbiter_request_vector_1_whas__0___d51 && DEF_inputChannelArbiter_priority_vector_BIT_1___h5245)))))))) && DEF_inputChannelArbiter_request_vector_0_whas____d53;
  DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d112 = DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d110 || (DEF_inputChannelArbiter_priority_vector_BIT_0___h5294 && DEF_inputChannelArbiter_request_vector_0_whas____d53);
  DEF_NOT_inputChannelArbiter_request_vector_0_whas__3___d54 = !DEF_inputChannelArbiter_request_vector_0_whas____d53;
  DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d57 = DEF_inputChannelArbiter_priority_vector_BIT_1___h5245 || (DEF_NOT_inputChannelArbiter_request_vector_0_whas__3___d54 && DEF_inputChannelArbiter_priority_vector_BIT_0___h5294);
  DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d59 = DEF_inputChannelArbiter_priority_vector_BIT_2___h5196 || (DEF_NOT_inputChannelArbiter_request_vector_1_whas__0___d51 && DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d57);
  DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d76 = (DEF_inputChannelArbiter_priority_vector_BIT_3___h5147 || (DEF_NOT_inputChannelArbiter_request_vector_2_whas__7___d48 && (DEF_inputChannelArbiter_priority_vector_BIT_2___h5196 || (DEF_NOT_inputChannelArbiter_request_vector_1_whas__0___d51 && (DEF_inputChannelArbiter_priority_vector_BIT_1___h5245 || (DEF_NOT_inputChannelArbiter_request_vector_0_whas__3___d54 && (DEF_inputChannelArbiter_priority_vector_BIT_0___h5294 || (DEF_NOT_inputChannelArbiter_request_vector_4_whas__4___d67 && DEF_inputChannelArbiter_priority_vector_BIT_4___h5098)))))))) && DEF_inputChannelArbiter_request_vector_3_whas____d43;
  DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d87 = (DEF_inputChannelArbiter_priority_vector_BIT_2___h5196 || (DEF_NOT_inputChannelArbiter_request_vector_1_whas__0___d51 && (DEF_inputChannelArbiter_priority_vector_BIT_1___h5245 || (DEF_NOT_inputChannelArbiter_request_vector_0_whas__3___d54 && (DEF_inputChannelArbiter_priority_vector_BIT_0___h5294 || (DEF_NOT_inputChannelArbiter_request_vector_4_whas__4___d67 && (DEF_inputChannelArbiter_priority_vector_BIT_4___h5098 || (DEF_NOT_inputChannelArbiter_request_vector_3_whas__3___d44 && DEF_inputChannelArbiter_priority_vector_BIT_3___h5147)))))))) && DEF_inputChannelArbiter_request_vector_2_whas____d47;
  DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d99 = (DEF_inputChannelArbiter_priority_vector_BIT_1___h5245 || (DEF_NOT_inputChannelArbiter_request_vector_0_whas__3___d54 && (DEF_inputChannelArbiter_priority_vector_BIT_0___h5294 || (DEF_NOT_inputChannelArbiter_request_vector_4_whas__4___d67 && (DEF_inputChannelArbiter_priority_vector_BIT_4___h5098 || (DEF_NOT_inputChannelArbiter_request_vector_3_whas__3___d44 && (DEF_inputChannelArbiter_priority_vector_BIT_3___h5147 || (DEF_NOT_inputChannelArbiter_request_vector_2_whas__7___d48 && DEF_inputChannelArbiter_priority_vector_BIT_2___h5196)))))))) && DEF_inputChannelArbiter_request_vector_1_whas____d50;
  DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d61 = DEF_inputChannelArbiter_priority_vector_BIT_3___h5147 || (DEF_NOT_inputChannelArbiter_request_vector_2_whas__7___d48 && DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d59);
  DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d116 = (DEF_inputChannelArbiter_priority_vector_BIT_4___h5098 || (DEF_NOT_inputChannelArbiter_request_vector_3_whas__3___d44 && DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d61)) && DEF_inputChannelArbiter_request_vector_4_whas____d64;
  DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d129 = DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d110 || (DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d99 || (DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d87 || (DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d76 || DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d116)));
  DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d100 = DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d57 && DEF_inputChannelArbiter_request_vector_1_whas____d50;
  DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d88 = DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d59 && DEF_inputChannelArbiter_request_vector_2_whas____d47;
  DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d77 = DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d61 && DEF_inputChannelArbiter_request_vector_3_whas____d43;
  DEF_x1__h6318 = DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d116 ? (tUInt8)4u : (DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d76 ? (tUInt8)3u : (DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d87 ? (tUInt8)2u : (DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d99 ? (tUInt8)1u : (DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d110 ? (tUInt8)0u : (DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d116 ? (tUInt8)4u : (DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d77 ? (tUInt8)3u : (DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d88 ? (tUInt8)2u : (DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d100 ? (tUInt8)1u : (tUInt8)0u))))))));
  DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d101 = DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d99 || DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d100;
  DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d89 = DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d87 || DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d88;
  DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d78 = DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d76 || DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d77;
  DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d66 = (DEF_inputChannelArbiter_priority_vector_BIT_4___h5098 || (DEF_NOT_inputChannelArbiter_request_vector_3_whas__3___d44 && DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d61)) && DEF_inputChannelArbiter_request_vector_4_whas____d64;
  DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d113 = (tUInt8)31u & (((((DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d66 << 4u) | (DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d78 << 3u)) | (DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d89 << 2u)) | (DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d101 << 1u)) | DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d112);
  DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d131 = (tUInt8)31u & (((((DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d78 << 4u) | (DEF_inputChannelArbiter_priority_vector_1_BIT_2_9__ETC___d89 << 3u)) | (DEF_inputChannelArbiter_priority_vector_1_BIT_1_2__ETC___d101 << 2u)) | (DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d112 << 1u)) | DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d66);
  INST_inputChannelArbiter_grant_vector.METH_wset(DEF_inputChannelArbiter_priority_vector_1_BIT_4_2__ETC___d113);
  INST_inputChannelArbiter_grant_id_wire.METH_wset(DEF_x1__h6318);
  if (DEF_inputChannelArbiter_priority_vector_1_BIT_0_5__ETC___d129)
    INST_inputChannelArbiter_priority_vector.METH_write(DEF_inputChannelArbiter_priority_vector_1_BIT_3_6__ETC___d131);
}

void MOD_mkNode::RL_outputChannelArbiter_every()
{
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d204;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d222;
  tUInt8 DEF_NOT_outputChannelArbiter_request_vector_0_whas_ETC___d145;
  tUInt8 DEF_NOT_outputChannelArbiter_request_vector_1_whas_ETC___d142;
  tUInt8 DEF_NOT_outputChannelArbiter_request_vector_2_whas_ETC___d139;
  tUInt8 DEF_NOT_outputChannelArbiter_request_vector_4_whas_ETC___d158;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d157;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d169;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d180;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d192;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d203;
  tUInt8 DEF_NOT_outputChannelArbiter_request_vector_3_whas_ETC___d135;
  tUInt8 DEF_x1__h10294;
  tUInt8 DEF_outputChannelArbiter_priority_vector__h9269;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d168;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d179;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d191;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d207;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d201;
  tUInt8 DEF_outputChannelArbiter_priority_vector_BIT_1___h9221;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d152;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d190;
  tUInt8 DEF_outputChannelArbiter_priority_vector_BIT_2___h9172;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d178;
  tUInt8 DEF_outputChannelArbiter_priority_vector_BIT_3___h9123;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d167;
  tUInt8 DEF_outputChannelArbiter_request_vector_2_whas____d138;
  tUInt8 DEF_outputChannelArbiter_request_vector_3_whas____d134;
  tUInt8 DEF_outputChannelArbiter_priority_vector_BIT_4___h9074;
  tUInt8 DEF_outputChannelArbiter_request_vector_1_whas____d141;
  tUInt8 DEF_outputChannelArbiter_priority_vector_BIT_0___h9270;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d148;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d150;
  tUInt8 DEF_outputChannelArbiter_request_vector_4_whas____d155;
  tUInt8 DEF_outputChannelArbiter_request_vector_0_whas____d144;
  tUInt8 DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d220;
  DEF_outputChannelArbiter_request_vector_0_whas____d144 = INST_outputChannelArbiter_request_vector_0.METH_whas();
  DEF_outputChannelArbiter_request_vector_4_whas____d155 = INST_outputChannelArbiter_request_vector_4.METH_whas();
  DEF_outputChannelArbiter_request_vector_1_whas____d141 = INST_outputChannelArbiter_request_vector_1.METH_whas();
  DEF_outputChannelArbiter_request_vector_3_whas____d134 = INST_outputChannelArbiter_request_vector_3.METH_whas();
  DEF_outputChannelArbiter_request_vector_2_whas____d138 = INST_outputChannelArbiter_request_vector_2.METH_whas();
  DEF_outputChannelArbiter_priority_vector__h9269 = INST_outputChannelArbiter_priority_vector.METH_read();
  DEF_outputChannelArbiter_priority_vector_BIT_0___h9270 = (tUInt8)((tUInt8)1u & DEF_outputChannelArbiter_priority_vector__h9269);
  DEF_outputChannelArbiter_priority_vector_BIT_4___h9074 = (tUInt8)(DEF_outputChannelArbiter_priority_vector__h9269 >> 4u);
  DEF_outputChannelArbiter_priority_vector_BIT_3___h9123 = (tUInt8)((tUInt8)1u & (DEF_outputChannelArbiter_priority_vector__h9269 >> 3u));
  DEF_outputChannelArbiter_priority_vector_BIT_2___h9172 = (tUInt8)((tUInt8)1u & (DEF_outputChannelArbiter_priority_vector__h9269 >> 2u));
  DEF_outputChannelArbiter_priority_vector_BIT_1___h9221 = (tUInt8)((tUInt8)1u & (DEF_outputChannelArbiter_priority_vector__h9269 >> 1u));
  DEF_NOT_outputChannelArbiter_request_vector_3_whas_ETC___d135 = !DEF_outputChannelArbiter_request_vector_3_whas____d134;
  DEF_NOT_outputChannelArbiter_request_vector_4_whas_ETC___d158 = !DEF_outputChannelArbiter_request_vector_4_whas____d155;
  DEF_NOT_outputChannelArbiter_request_vector_2_whas_ETC___d139 = !DEF_outputChannelArbiter_request_vector_2_whas____d138;
  DEF_NOT_outputChannelArbiter_request_vector_1_whas_ETC___d142 = !DEF_outputChannelArbiter_request_vector_1_whas____d141;
  DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d201 = (DEF_outputChannelArbiter_priority_vector_BIT_0___h9270 || (DEF_NOT_outputChannelArbiter_request_vector_4_whas_ETC___d158 && (DEF_outputChannelArbiter_priority_vector_BIT_4___h9074 || (DEF_NOT_outputChannelArbiter_request_vector_3_whas_ETC___d135 && (DEF_outputChannelArbiter_priority_vector_BIT_3___h9123 || (DEF_NOT_outputChannelArbiter_request_vector_2_whas_ETC___d139 && (DEF_outputChannelArbiter_priority_vector_BIT_2___h9172 || (DEF_NOT_outputChannelArbiter_request_vector_1_whas_ETC___d142 && DEF_outputChannelArbiter_priority_vector_BIT_1___h9221)))))))) && DEF_outputChannelArbiter_request_vector_0_whas____d144;
  DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d203 = DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d201 || (DEF_outputChannelArbiter_priority_vector_BIT_0___h9270 && DEF_outputChannelArbiter_request_vector_0_whas____d144);
  DEF_NOT_outputChannelArbiter_request_vector_0_whas_ETC___d145 = !DEF_outputChannelArbiter_request_vector_0_whas____d144;
  DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d148 = DEF_outputChannelArbiter_priority_vector_BIT_1___h9221 || (DEF_NOT_outputChannelArbiter_request_vector_0_whas_ETC___d145 && DEF_outputChannelArbiter_priority_vector_BIT_0___h9270);
  DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d150 = DEF_outputChannelArbiter_priority_vector_BIT_2___h9172 || (DEF_NOT_outputChannelArbiter_request_vector_1_whas_ETC___d142 && DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d148);
  DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d167 = (DEF_outputChannelArbiter_priority_vector_BIT_3___h9123 || (DEF_NOT_outputChannelArbiter_request_vector_2_whas_ETC___d139 && (DEF_outputChannelArbiter_priority_vector_BIT_2___h9172 || (DEF_NOT_outputChannelArbiter_request_vector_1_whas_ETC___d142 && (DEF_outputChannelArbiter_priority_vector_BIT_1___h9221 || (DEF_NOT_outputChannelArbiter_request_vector_0_whas_ETC___d145 && (DEF_outputChannelArbiter_priority_vector_BIT_0___h9270 || (DEF_NOT_outputChannelArbiter_request_vector_4_whas_ETC___d158 && DEF_outputChannelArbiter_priority_vector_BIT_4___h9074)))))))) && DEF_outputChannelArbiter_request_vector_3_whas____d134;
  DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d178 = (DEF_outputChannelArbiter_priority_vector_BIT_2___h9172 || (DEF_NOT_outputChannelArbiter_request_vector_1_whas_ETC___d142 && (DEF_outputChannelArbiter_priority_vector_BIT_1___h9221 || (DEF_NOT_outputChannelArbiter_request_vector_0_whas_ETC___d145 && (DEF_outputChannelArbiter_priority_vector_BIT_0___h9270 || (DEF_NOT_outputChannelArbiter_request_vector_4_whas_ETC___d158 && (DEF_outputChannelArbiter_priority_vector_BIT_4___h9074 || (DEF_NOT_outputChannelArbiter_request_vector_3_whas_ETC___d135 && DEF_outputChannelArbiter_priority_vector_BIT_3___h9123)))))))) && DEF_outputChannelArbiter_request_vector_2_whas____d138;
  DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d190 = (DEF_outputChannelArbiter_priority_vector_BIT_1___h9221 || (DEF_NOT_outputChannelArbiter_request_vector_0_whas_ETC___d145 && (DEF_outputChannelArbiter_priority_vector_BIT_0___h9270 || (DEF_NOT_outputChannelArbiter_request_vector_4_whas_ETC___d158 && (DEF_outputChannelArbiter_priority_vector_BIT_4___h9074 || (DEF_NOT_outputChannelArbiter_request_vector_3_whas_ETC___d135 && (DEF_outputChannelArbiter_priority_vector_BIT_3___h9123 || (DEF_NOT_outputChannelArbiter_request_vector_2_whas_ETC___d139 && DEF_outputChannelArbiter_priority_vector_BIT_2___h9172)))))))) && DEF_outputChannelArbiter_request_vector_1_whas____d141;
  DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d152 = DEF_outputChannelArbiter_priority_vector_BIT_3___h9123 || (DEF_NOT_outputChannelArbiter_request_vector_2_whas_ETC___d139 && DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d150);
  DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d207 = (DEF_outputChannelArbiter_priority_vector_BIT_4___h9074 || (DEF_NOT_outputChannelArbiter_request_vector_3_whas_ETC___d135 && DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d152)) && DEF_outputChannelArbiter_request_vector_4_whas____d155;
  DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d220 = DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d201 || (DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d190 || (DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d178 || (DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d167 || DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d207)));
  DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d191 = DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d148 && DEF_outputChannelArbiter_request_vector_1_whas____d141;
  DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d179 = DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d150 && DEF_outputChannelArbiter_request_vector_2_whas____d138;
  DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d168 = DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d152 && DEF_outputChannelArbiter_request_vector_3_whas____d134;
  DEF_x1__h10294 = DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d207 ? (tUInt8)4u : (DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d167 ? (tUInt8)3u : (DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d178 ? (tUInt8)2u : (DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d190 ? (tUInt8)1u : (DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d201 ? (tUInt8)0u : (DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d207 ? (tUInt8)4u : (DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d168 ? (tUInt8)3u : (DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d179 ? (tUInt8)2u : (DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d191 ? (tUInt8)1u : (tUInt8)0u))))))));
  DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d192 = DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d190 || DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d191;
  DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d180 = DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d178 || DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d179;
  DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d169 = DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d167 || DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d168;
  DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d157 = (DEF_outputChannelArbiter_priority_vector_BIT_4___h9074 || (DEF_NOT_outputChannelArbiter_request_vector_3_whas_ETC___d135 && DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d152)) && DEF_outputChannelArbiter_request_vector_4_whas____d155;
  DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d222 = (tUInt8)31u & (((((DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d169 << 4u) | (DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d180 << 3u)) | (DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d192 << 2u)) | (DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d203 << 1u)) | DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d157);
  DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d204 = (tUInt8)31u & (((((DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d157 << 4u) | (DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d169 << 3u)) | (DEF_outputChannelArbiter_priority_vector_32_BIT_2__ETC___d180 << 2u)) | (DEF_outputChannelArbiter_priority_vector_32_BIT_1__ETC___d192 << 1u)) | DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d203);
  INST_outputChannelArbiter_grant_vector.METH_wset(DEF_outputChannelArbiter_priority_vector_32_BIT_4__ETC___d204);
  INST_outputChannelArbiter_grant_id_wire.METH_wset(DEF_x1__h10294);
  if (DEF_outputChannelArbiter_priority_vector_32_BIT_0__ETC___d220)
    INST_outputChannelArbiter_priority_vector.METH_write(DEF_outputChannelArbiter_priority_vector_32_BIT_3__ETC___d222);
}

void MOD_mkNode::RL_inputChannelArbiterRequest()
{
  DEF_channelInQ_4_ff_i_notEmpty____d36 = INST_channelInQ_4_ff.METH_i_notEmpty();
  DEF_channelInQ_3_ff_i_notEmpty____d28 = INST_channelInQ_3_ff.METH_i_notEmpty();
  DEF_channelInQ_2_ff_i_notEmpty____d20 = INST_channelInQ_2_ff.METH_i_notEmpty();
  DEF_channelInQ_1_ff_i_notEmpty____d12 = INST_channelInQ_1_ff.METH_i_notEmpty();
  DEF_channelInQ_0_ff_i_notEmpty____d4 = INST_channelInQ_0_ff.METH_i_notEmpty();
  if (DEF_channelInQ_0_ff_i_notEmpty____d4)
    INST_inputChannelArbiter_request_vector_0.METH_wset();
  if (DEF_channelInQ_1_ff_i_notEmpty____d12)
    INST_inputChannelArbiter_request_vector_1.METH_wset();
  if (DEF_channelInQ_2_ff_i_notEmpty____d20)
    INST_inputChannelArbiter_request_vector_2.METH_wset();
  if (DEF_channelInQ_3_ff_i_notEmpty____d28)
    INST_inputChannelArbiter_request_vector_3.METH_wset();
  if (DEF_channelInQ_4_ff_i_notEmpty____d36)
    INST_inputChannelArbiter_request_vector_4.METH_wset();
}

void MOD_mkNode::RL_inputArbitratei()
{
  tUInt64 DEF_IF_channelInQ_0_ff_i_notEmpty_THEN_channelInQ__ETC___d240;
  DEF_channelInQ_0_enqw_wget____d7 = INST_channelInQ_0_enqw.METH_wget();
  DEF_channelInQ_0_enqw_whas____d1 = INST_channelInQ_0_enqw.METH_whas();
  DEF_channelInQ_0_ff_i_notEmpty____d4 = INST_channelInQ_0_ff.METH_i_notEmpty();
  DEF_IF_channelInQ_0_ff_i_notEmpty_THEN_channelInQ__ETC___d240 = DEF_channelInQ_0_ff_i_notEmpty____d4 ? INST_channelInQ_0_ff.METH_first() : (DEF_channelInQ_0_enqw_whas____d1 ? DEF_channelInQ_0_enqw_wget____d7 : 140737488355327llu & (((((((tUInt64)((tUInt8)(DEF_channelInQ_0_enqw_wget____d7 >> 41u))) << 41u) | (((tUInt64)((tUInt8)((tUInt8)15u & (DEF_channelInQ_0_enqw_wget____d7 >> 37u)))) << 37u)) | (((tUInt64)((tUInt8)((tUInt8)15u & (DEF_channelInQ_0_enqw_wget____d7 >> 33u)))) << 33u)) | (((tUInt64)((tUInt32)(DEF_channelInQ_0_enqw_wget____d7 >> 1u))) << 1u)) | (tUInt64)((tUInt8)((tUInt8)1u & DEF_channelInQ_0_enqw_wget____d7))));
  INST_channelInQ_0_dequeueing.METH_wset();
  INST_channelInQ_0_firstValid.METH_write((tUInt8)1u);
  INST_routePacketQ.METH_enq(DEF_IF_channelInQ_0_ff_i_notEmpty_THEN_channelInQ__ETC___d240);
}

void MOD_mkNode::RL_inputArbitratei_1()
{
  tUInt64 DEF_IF_channelInQ_1_ff_i_notEmpty__2_THEN_channelI_ETC___d256;
  DEF_channelInQ_1_enqw_wget____d15 = INST_channelInQ_1_enqw.METH_wget();
  DEF_channelInQ_1_enqw_whas____d9 = INST_channelInQ_1_enqw.METH_whas();
  DEF_channelInQ_1_ff_i_notEmpty____d12 = INST_channelInQ_1_ff.METH_i_notEmpty();
  DEF_IF_channelInQ_1_ff_i_notEmpty__2_THEN_channelI_ETC___d256 = DEF_channelInQ_1_ff_i_notEmpty____d12 ? INST_channelInQ_1_ff.METH_first() : (DEF_channelInQ_1_enqw_whas____d9 ? DEF_channelInQ_1_enqw_wget____d15 : 140737488355327llu & (((((((tUInt64)((tUInt8)(DEF_channelInQ_1_enqw_wget____d15 >> 41u))) << 41u) | (((tUInt64)((tUInt8)((tUInt8)15u & (DEF_channelInQ_1_enqw_wget____d15 >> 37u)))) << 37u)) | (((tUInt64)((tUInt8)((tUInt8)15u & (DEF_channelInQ_1_enqw_wget____d15 >> 33u)))) << 33u)) | (((tUInt64)((tUInt32)(DEF_channelInQ_1_enqw_wget____d15 >> 1u))) << 1u)) | (tUInt64)((tUInt8)((tUInt8)1u & DEF_channelInQ_1_enqw_wget____d15))));
  INST_channelInQ_1_dequeueing.METH_wset();
  INST_channelInQ_1_firstValid.METH_write((tUInt8)1u);
  INST_routePacketQ.METH_enq(DEF_IF_channelInQ_1_ff_i_notEmpty__2_THEN_channelI_ETC___d256);
}

void MOD_mkNode::RL_inputArbitratei_2()
{
  tUInt64 DEF_IF_channelInQ_2_ff_i_notEmpty__0_THEN_channelI_ETC___d272;
  DEF_channelInQ_2_enqw_wget____d23 = INST_channelInQ_2_enqw.METH_wget();
  DEF_channelInQ_2_enqw_whas____d17 = INST_channelInQ_2_enqw.METH_whas();
  DEF_channelInQ_2_ff_i_notEmpty____d20 = INST_channelInQ_2_ff.METH_i_notEmpty();
  DEF_IF_channelInQ_2_ff_i_notEmpty__0_THEN_channelI_ETC___d272 = DEF_channelInQ_2_ff_i_notEmpty____d20 ? INST_channelInQ_2_ff.METH_first() : (DEF_channelInQ_2_enqw_whas____d17 ? DEF_channelInQ_2_enqw_wget____d23 : 140737488355327llu & (((((((tUInt64)((tUInt8)(DEF_channelInQ_2_enqw_wget____d23 >> 41u))) << 41u) | (((tUInt64)((tUInt8)((tUInt8)15u & (DEF_channelInQ_2_enqw_wget____d23 >> 37u)))) << 37u)) | (((tUInt64)((tUInt8)((tUInt8)15u & (DEF_channelInQ_2_enqw_wget____d23 >> 33u)))) << 33u)) | (((tUInt64)((tUInt32)(DEF_channelInQ_2_enqw_wget____d23 >> 1u))) << 1u)) | (tUInt64)((tUInt8)((tUInt8)1u & DEF_channelInQ_2_enqw_wget____d23))));
  INST_channelInQ_2_dequeueing.METH_wset();
  INST_channelInQ_2_firstValid.METH_write((tUInt8)1u);
  INST_routePacketQ.METH_enq(DEF_IF_channelInQ_2_ff_i_notEmpty__0_THEN_channelI_ETC___d272);
}

void MOD_mkNode::RL_inputArbitratei_3()
{
  tUInt64 DEF_IF_channelInQ_3_ff_i_notEmpty__8_THEN_channelI_ETC___d288;
  DEF_channelInQ_3_enqw_wget____d31 = INST_channelInQ_3_enqw.METH_wget();
  DEF_channelInQ_3_enqw_whas____d25 = INST_channelInQ_3_enqw.METH_whas();
  DEF_channelInQ_3_ff_i_notEmpty____d28 = INST_channelInQ_3_ff.METH_i_notEmpty();
  DEF_IF_channelInQ_3_ff_i_notEmpty__8_THEN_channelI_ETC___d288 = DEF_channelInQ_3_ff_i_notEmpty____d28 ? INST_channelInQ_3_ff.METH_first() : (DEF_channelInQ_3_enqw_whas____d25 ? DEF_channelInQ_3_enqw_wget____d31 : 140737488355327llu & (((((((tUInt64)((tUInt8)(DEF_channelInQ_3_enqw_wget____d31 >> 41u))) << 41u) | (((tUInt64)((tUInt8)((tUInt8)15u & (DEF_channelInQ_3_enqw_wget____d31 >> 37u)))) << 37u)) | (((tUInt64)((tUInt8)((tUInt8)15u & (DEF_channelInQ_3_enqw_wget____d31 >> 33u)))) << 33u)) | (((tUInt64)((tUInt32)(DEF_channelInQ_3_enqw_wget____d31 >> 1u))) << 1u)) | (tUInt64)((tUInt8)((tUInt8)1u & DEF_channelInQ_3_enqw_wget____d31))));
  INST_channelInQ_3_dequeueing.METH_wset();
  INST_channelInQ_3_firstValid.METH_write((tUInt8)1u);
  INST_routePacketQ.METH_enq(DEF_IF_channelInQ_3_ff_i_notEmpty__8_THEN_channelI_ETC___d288);
}

void MOD_mkNode::RL_inputArbitratei_4()
{
  tUInt64 DEF_IF_channelInQ_4_ff_i_notEmpty__6_THEN_channelI_ETC___d304;
  DEF_channelInQ_4_enqw_wget____d39 = INST_channelInQ_4_enqw.METH_wget();
  DEF_channelInQ_4_enqw_whas____d33 = INST_channelInQ_4_enqw.METH_whas();
  DEF_channelInQ_4_ff_i_notEmpty____d36 = INST_channelInQ_4_ff.METH_i_notEmpty();
  DEF_IF_channelInQ_4_ff_i_notEmpty__6_THEN_channelI_ETC___d304 = DEF_channelInQ_4_ff_i_notEmpty____d36 ? INST_channelInQ_4_ff.METH_first() : (DEF_channelInQ_4_enqw_whas____d33 ? DEF_channelInQ_4_enqw_wget____d39 : 140737488355327llu & (((((((tUInt64)((tUInt8)(DEF_channelInQ_4_enqw_wget____d39 >> 41u))) << 41u) | (((tUInt64)((tUInt8)((tUInt8)15u & (DEF_channelInQ_4_enqw_wget____d39 >> 37u)))) << 37u)) | (((tUInt64)((tUInt8)((tUInt8)15u & (DEF_channelInQ_4_enqw_wget____d39 >> 33u)))) << 33u)) | (((tUInt64)((tUInt32)(DEF_channelInQ_4_enqw_wget____d39 >> 1u))) << 1u)) | (tUInt64)((tUInt8)((tUInt8)1u & DEF_channelInQ_4_enqw_wget____d39))));
  INST_channelInQ_4_dequeueing.METH_wset();
  INST_channelInQ_4_firstValid.METH_write((tUInt8)1u);
  INST_routePacketQ.METH_enq(DEF_IF_channelInQ_4_ff_i_notEmpty__6_THEN_channelI_ETC___d304);
}

void MOD_mkNode::RL_routePacketNorth()
{
  DEF_routePacketQ_first____d314 = INST_routePacketQ.METH_first();
  DEF__1_CONCAT_routePacketQ_first__14___d462 = 281474976710655llu & ((((tUInt64)((tUInt8)1u)) << 47u) | DEF_routePacketQ_first____d314);
  INST_routePacketQ.METH_deq();
  INST_channelOutQ_1_rv.METH_port0__write(DEF__1_CONCAT_routePacketQ_first__14___d462);
}

void MOD_mkNode::RL_routePacketSouth()
{
  DEF_routePacketQ_first____d314 = INST_routePacketQ.METH_first();
  DEF__1_CONCAT_routePacketQ_first__14___d462 = 281474976710655llu & ((((tUInt64)((tUInt8)1u)) << 47u) | DEF_routePacketQ_first____d314);
  INST_routePacketQ.METH_deq();
  INST_channelOutQ_2_rv.METH_port0__write(DEF__1_CONCAT_routePacketQ_first__14___d462);
}

void MOD_mkNode::RL_routePacketWest()
{
  DEF_routePacketQ_first____d314 = INST_routePacketQ.METH_first();
  DEF__1_CONCAT_routePacketQ_first__14___d462 = 281474976710655llu & ((((tUInt64)((tUInt8)1u)) << 47u) | DEF_routePacketQ_first____d314);
  INST_routePacketQ.METH_deq();
  INST_channelOutQ_4_rv.METH_port0__write(DEF__1_CONCAT_routePacketQ_first__14___d462);
}

void MOD_mkNode::RL_routePacketEast()
{
  DEF_routePacketQ_first____d314 = INST_routePacketQ.METH_first();
  DEF__1_CONCAT_routePacketQ_first__14___d462 = 281474976710655llu & ((((tUInt64)((tUInt8)1u)) << 47u) | DEF_routePacketQ_first____d314);
  INST_routePacketQ.METH_deq();
  INST_channelOutQ_3_rv.METH_port0__write(DEF__1_CONCAT_routePacketQ_first__14___d462);
}

void MOD_mkNode::RL_routePacketHome()
{
  DEF_routePacketQ_first____d314 = INST_routePacketQ.METH_first();
  DEF__1_CONCAT_routePacketQ_first__14___d462 = 281474976710655llu & ((((tUInt64)((tUInt8)1u)) << 47u) | DEF_routePacketQ_first____d314);
  INST_routePacketQ.METH_deq();
  INST_channelOutQ_0_rv.METH_port0__write(DEF__1_CONCAT_routePacketQ_first__14___d462);
}

void MOD_mkNode::__me_check_13()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_inputArbitratei && DEF_WILL_FIRE_RL_inputArbitratei_1)
      dollar_error(sim_hdl, this, "s", &__str_literal_1);
    if ((DEF_WILL_FIRE_RL_inputArbitratei || DEF_WILL_FIRE_RL_inputArbitratei_1) && DEF_WILL_FIRE_RL_inputArbitratei_2)
      dollar_error(sim_hdl, this, "s", &__str_literal_2);
    if (((DEF_WILL_FIRE_RL_inputArbitratei || DEF_WILL_FIRE_RL_inputArbitratei_1) || DEF_WILL_FIRE_RL_inputArbitratei_2) && DEF_WILL_FIRE_RL_inputArbitratei_3)
      dollar_error(sim_hdl, this, "s", &__str_literal_3);
    if ((((DEF_WILL_FIRE_RL_inputArbitratei || DEF_WILL_FIRE_RL_inputArbitratei_1) || DEF_WILL_FIRE_RL_inputArbitratei_2) || DEF_WILL_FIRE_RL_inputArbitratei_3) && DEF_WILL_FIRE_RL_inputArbitratei_4)
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
  }
}

void MOD_mkNode::__me_check_18()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_routePacketNorth && DEF_WILL_FIRE_RL_routePacketHome)
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
    if (DEF_WILL_FIRE_RL_routePacketNorth && DEF_WILL_FIRE_RL_routePacketEast)
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
    if (DEF_WILL_FIRE_RL_routePacketNorth && DEF_WILL_FIRE_RL_routePacketWest)
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
    if (DEF_WILL_FIRE_RL_routePacketNorth && DEF_WILL_FIRE_RL_routePacketSouth)
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
  }
}

void MOD_mkNode::__me_check_19()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_routePacketSouth && DEF_WILL_FIRE_RL_routePacketHome)
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
    if (DEF_WILL_FIRE_RL_routePacketSouth && DEF_WILL_FIRE_RL_routePacketEast)
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
    if (DEF_WILL_FIRE_RL_routePacketSouth && DEF_WILL_FIRE_RL_routePacketWest)
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
  }
}

void MOD_mkNode::__me_check_20()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_routePacketWest && DEF_WILL_FIRE_RL_routePacketHome)
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
    if (DEF_WILL_FIRE_RL_routePacketWest && DEF_WILL_FIRE_RL_routePacketEast)
      dollar_error(sim_hdl, this, "s", &__str_literal_13);
  }
}

void MOD_mkNode::__me_check_21()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_routePacketEast && DEF_WILL_FIRE_RL_routePacketHome)
      dollar_error(sim_hdl, this, "s", &__str_literal_14);
}


/* Methods */

void MOD_mkNode::METH_channels_0_putNoCPacket_put(tUInt64 ARG_channels_0_putNoCPacket_put)
{
  PORT_EN_channels_0_putNoCPacket_put = (tUInt8)1u;
  DEF_WILL_FIRE_channels_0_putNoCPacket_put = (tUInt8)1u;
  PORT_channels_0_putNoCPacket_put = ARG_channels_0_putNoCPacket_put;
  INST_channelInQ_0_enqw.METH_wset(ARG_channels_0_putNoCPacket_put);
}

tUInt8 MOD_mkNode::METH_RDY_channels_0_putNoCPacket_put()
{
  DEF_CAN_FIRE_channels_0_putNoCPacket_put = INST_channelInQ_0_ff.METH_i_notFull();
  PORT_RDY_channels_0_putNoCPacket_put = DEF_CAN_FIRE_channels_0_putNoCPacket_put;
  return PORT_RDY_channels_0_putNoCPacket_put;
}

tUInt64 MOD_mkNode::METH_channels_0_getNoCPacket_get()
{
  PORT_EN_channels_0_getNoCPacket_get = (tUInt8)1u;
  DEF_WILL_FIRE_channels_0_getNoCPacket_get = (tUInt8)1u;
  DEF_channelOutQ_0_rv_port1__read____d681 = INST_channelOutQ_0_rv.METH_port1__read();
  PORT_channels_0_getNoCPacket_get = (tUInt64)(140737488355327llu & DEF_channelOutQ_0_rv_port1__read____d681);
  DEF__0_CONCAT_DONTCARE___d680 = 46912496118442llu;
  INST_channelOutQ_0_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d680);
  return PORT_channels_0_getNoCPacket_get;
}

tUInt8 MOD_mkNode::METH_RDY_channels_0_getNoCPacket_get()
{
  DEF_channelOutQ_0_rv_port1__read____d681 = INST_channelOutQ_0_rv.METH_port1__read();
  DEF_CAN_FIRE_channels_0_getNoCPacket_get = (tUInt8)(DEF_channelOutQ_0_rv_port1__read____d681 >> 47u);
  PORT_RDY_channels_0_getNoCPacket_get = DEF_CAN_FIRE_channels_0_getNoCPacket_get;
  return PORT_RDY_channels_0_getNoCPacket_get;
}

void MOD_mkNode::METH_channels_1_putNoCPacket_put(tUInt64 ARG_channels_1_putNoCPacket_put)
{
  PORT_EN_channels_1_putNoCPacket_put = (tUInt8)1u;
  DEF_WILL_FIRE_channels_1_putNoCPacket_put = (tUInt8)1u;
  PORT_channels_1_putNoCPacket_put = ARG_channels_1_putNoCPacket_put;
  INST_channelInQ_1_enqw.METH_wset(ARG_channels_1_putNoCPacket_put);
}

tUInt8 MOD_mkNode::METH_RDY_channels_1_putNoCPacket_put()
{
  DEF_CAN_FIRE_channels_1_putNoCPacket_put = INST_channelInQ_1_ff.METH_i_notFull();
  PORT_RDY_channels_1_putNoCPacket_put = DEF_CAN_FIRE_channels_1_putNoCPacket_put;
  return PORT_RDY_channels_1_putNoCPacket_put;
}

tUInt64 MOD_mkNode::METH_channels_1_getNoCPacket_get()
{
  PORT_EN_channels_1_getNoCPacket_get = (tUInt8)1u;
  DEF_WILL_FIRE_channels_1_getNoCPacket_get = (tUInt8)1u;
  DEF_channelOutQ_1_rv_port1__read____d682 = INST_channelOutQ_1_rv.METH_port1__read();
  PORT_channels_1_getNoCPacket_get = (tUInt64)(140737488355327llu & DEF_channelOutQ_1_rv_port1__read____d682);
  DEF__0_CONCAT_DONTCARE___d680 = 46912496118442llu;
  INST_channelOutQ_1_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d680);
  return PORT_channels_1_getNoCPacket_get;
}

tUInt8 MOD_mkNode::METH_RDY_channels_1_getNoCPacket_get()
{
  DEF_channelOutQ_1_rv_port1__read____d682 = INST_channelOutQ_1_rv.METH_port1__read();
  DEF_CAN_FIRE_channels_1_getNoCPacket_get = (tUInt8)(DEF_channelOutQ_1_rv_port1__read____d682 >> 47u);
  PORT_RDY_channels_1_getNoCPacket_get = DEF_CAN_FIRE_channels_1_getNoCPacket_get;
  return PORT_RDY_channels_1_getNoCPacket_get;
}

void MOD_mkNode::METH_channels_2_putNoCPacket_put(tUInt64 ARG_channels_2_putNoCPacket_put)
{
  PORT_EN_channels_2_putNoCPacket_put = (tUInt8)1u;
  DEF_WILL_FIRE_channels_2_putNoCPacket_put = (tUInt8)1u;
  PORT_channels_2_putNoCPacket_put = ARG_channels_2_putNoCPacket_put;
  INST_channelInQ_2_enqw.METH_wset(ARG_channels_2_putNoCPacket_put);
}

tUInt8 MOD_mkNode::METH_RDY_channels_2_putNoCPacket_put()
{
  DEF_CAN_FIRE_channels_2_putNoCPacket_put = INST_channelInQ_2_ff.METH_i_notFull();
  PORT_RDY_channels_2_putNoCPacket_put = DEF_CAN_FIRE_channels_2_putNoCPacket_put;
  return PORT_RDY_channels_2_putNoCPacket_put;
}

tUInt64 MOD_mkNode::METH_channels_2_getNoCPacket_get()
{
  PORT_EN_channels_2_getNoCPacket_get = (tUInt8)1u;
  DEF_WILL_FIRE_channels_2_getNoCPacket_get = (tUInt8)1u;
  DEF_channelOutQ_2_rv_port1__read____d683 = INST_channelOutQ_2_rv.METH_port1__read();
  PORT_channels_2_getNoCPacket_get = (tUInt64)(140737488355327llu & DEF_channelOutQ_2_rv_port1__read____d683);
  DEF__0_CONCAT_DONTCARE___d680 = 46912496118442llu;
  INST_channelOutQ_2_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d680);
  return PORT_channels_2_getNoCPacket_get;
}

tUInt8 MOD_mkNode::METH_RDY_channels_2_getNoCPacket_get()
{
  DEF_channelOutQ_2_rv_port1__read____d683 = INST_channelOutQ_2_rv.METH_port1__read();
  DEF_CAN_FIRE_channels_2_getNoCPacket_get = (tUInt8)(DEF_channelOutQ_2_rv_port1__read____d683 >> 47u);
  PORT_RDY_channels_2_getNoCPacket_get = DEF_CAN_FIRE_channels_2_getNoCPacket_get;
  return PORT_RDY_channels_2_getNoCPacket_get;
}

void MOD_mkNode::METH_channels_3_putNoCPacket_put(tUInt64 ARG_channels_3_putNoCPacket_put)
{
  PORT_EN_channels_3_putNoCPacket_put = (tUInt8)1u;
  DEF_WILL_FIRE_channels_3_putNoCPacket_put = (tUInt8)1u;
  PORT_channels_3_putNoCPacket_put = ARG_channels_3_putNoCPacket_put;
  INST_channelInQ_3_enqw.METH_wset(ARG_channels_3_putNoCPacket_put);
}

tUInt8 MOD_mkNode::METH_RDY_channels_3_putNoCPacket_put()
{
  DEF_CAN_FIRE_channels_3_putNoCPacket_put = INST_channelInQ_3_ff.METH_i_notFull();
  PORT_RDY_channels_3_putNoCPacket_put = DEF_CAN_FIRE_channels_3_putNoCPacket_put;
  return PORT_RDY_channels_3_putNoCPacket_put;
}

tUInt64 MOD_mkNode::METH_channels_3_getNoCPacket_get()
{
  PORT_EN_channels_3_getNoCPacket_get = (tUInt8)1u;
  DEF_WILL_FIRE_channels_3_getNoCPacket_get = (tUInt8)1u;
  DEF_channelOutQ_3_rv_port1__read____d684 = INST_channelOutQ_3_rv.METH_port1__read();
  PORT_channels_3_getNoCPacket_get = (tUInt64)(140737488355327llu & DEF_channelOutQ_3_rv_port1__read____d684);
  DEF__0_CONCAT_DONTCARE___d680 = 46912496118442llu;
  INST_channelOutQ_3_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d680);
  return PORT_channels_3_getNoCPacket_get;
}

tUInt8 MOD_mkNode::METH_RDY_channels_3_getNoCPacket_get()
{
  DEF_channelOutQ_3_rv_port1__read____d684 = INST_channelOutQ_3_rv.METH_port1__read();
  DEF_CAN_FIRE_channels_3_getNoCPacket_get = (tUInt8)(DEF_channelOutQ_3_rv_port1__read____d684 >> 47u);
  PORT_RDY_channels_3_getNoCPacket_get = DEF_CAN_FIRE_channels_3_getNoCPacket_get;
  return PORT_RDY_channels_3_getNoCPacket_get;
}

void MOD_mkNode::METH_channels_4_putNoCPacket_put(tUInt64 ARG_channels_4_putNoCPacket_put)
{
  PORT_EN_channels_4_putNoCPacket_put = (tUInt8)1u;
  DEF_WILL_FIRE_channels_4_putNoCPacket_put = (tUInt8)1u;
  PORT_channels_4_putNoCPacket_put = ARG_channels_4_putNoCPacket_put;
  INST_channelInQ_4_enqw.METH_wset(ARG_channels_4_putNoCPacket_put);
}

tUInt8 MOD_mkNode::METH_RDY_channels_4_putNoCPacket_put()
{
  DEF_CAN_FIRE_channels_4_putNoCPacket_put = INST_channelInQ_4_ff.METH_i_notFull();
  PORT_RDY_channels_4_putNoCPacket_put = DEF_CAN_FIRE_channels_4_putNoCPacket_put;
  return PORT_RDY_channels_4_putNoCPacket_put;
}

tUInt64 MOD_mkNode::METH_channels_4_getNoCPacket_get()
{
  PORT_EN_channels_4_getNoCPacket_get = (tUInt8)1u;
  DEF_WILL_FIRE_channels_4_getNoCPacket_get = (tUInt8)1u;
  DEF_channelOutQ_4_rv_port1__read____d685 = INST_channelOutQ_4_rv.METH_port1__read();
  PORT_channels_4_getNoCPacket_get = (tUInt64)(140737488355327llu & DEF_channelOutQ_4_rv_port1__read____d685);
  DEF__0_CONCAT_DONTCARE___d680 = 46912496118442llu;
  INST_channelOutQ_4_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d680);
  return PORT_channels_4_getNoCPacket_get;
}

tUInt8 MOD_mkNode::METH_RDY_channels_4_getNoCPacket_get()
{
  DEF_channelOutQ_4_rv_port1__read____d685 = INST_channelOutQ_4_rv.METH_port1__read();
  DEF_CAN_FIRE_channels_4_getNoCPacket_get = (tUInt8)(DEF_channelOutQ_4_rv_port1__read____d685 >> 47u);
  PORT_RDY_channels_4_getNoCPacket_get = DEF_CAN_FIRE_channels_4_getNoCPacket_get;
  return PORT_RDY_channels_4_getNoCPacket_get;
}


/* Reset routines */

void MOD_mkNode::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_routePacketQ.reset_RST(ARG_rst_in);
  INST_outputChannelArbiter_priority_vector.reset_RST(ARG_rst_in);
  INST_inputChannelArbiter_priority_vector.reset_RST(ARG_rst_in);
  INST_channelOutQ_4_rv.reset_RST(ARG_rst_in);
  INST_channelOutQ_3_rv.reset_RST(ARG_rst_in);
  INST_channelOutQ_2_rv.reset_RST(ARG_rst_in);
  INST_channelOutQ_1_rv.reset_RST(ARG_rst_in);
  INST_channelOutQ_0_rv.reset_RST(ARG_rst_in);
  INST_channelInQ_4_ff.reset_RST(ARG_rst_in);
  INST_channelInQ_3_ff.reset_RST(ARG_rst_in);
  INST_channelInQ_2_ff.reset_RST(ARG_rst_in);
  INST_channelInQ_1_ff.reset_RST(ARG_rst_in);
  INST_channelInQ_0_ff.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkNode::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkNode::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_channelInQ_0_dequeueing.dump_state(indent + 2u);
  INST_channelInQ_0_enqw.dump_state(indent + 2u);
  INST_channelInQ_0_ff.dump_state(indent + 2u);
  INST_channelInQ_0_firstValid.dump_state(indent + 2u);
  INST_channelInQ_1_dequeueing.dump_state(indent + 2u);
  INST_channelInQ_1_enqw.dump_state(indent + 2u);
  INST_channelInQ_1_ff.dump_state(indent + 2u);
  INST_channelInQ_1_firstValid.dump_state(indent + 2u);
  INST_channelInQ_2_dequeueing.dump_state(indent + 2u);
  INST_channelInQ_2_enqw.dump_state(indent + 2u);
  INST_channelInQ_2_ff.dump_state(indent + 2u);
  INST_channelInQ_2_firstValid.dump_state(indent + 2u);
  INST_channelInQ_3_dequeueing.dump_state(indent + 2u);
  INST_channelInQ_3_enqw.dump_state(indent + 2u);
  INST_channelInQ_3_ff.dump_state(indent + 2u);
  INST_channelInQ_3_firstValid.dump_state(indent + 2u);
  INST_channelInQ_4_dequeueing.dump_state(indent + 2u);
  INST_channelInQ_4_enqw.dump_state(indent + 2u);
  INST_channelInQ_4_ff.dump_state(indent + 2u);
  INST_channelInQ_4_firstValid.dump_state(indent + 2u);
  INST_channelOutQ_0_rv.dump_state(indent + 2u);
  INST_channelOutQ_1_rv.dump_state(indent + 2u);
  INST_channelOutQ_2_rv.dump_state(indent + 2u);
  INST_channelOutQ_3_rv.dump_state(indent + 2u);
  INST_channelOutQ_4_rv.dump_state(indent + 2u);
  INST_inputChannelArbiter_grant_id_wire.dump_state(indent + 2u);
  INST_inputChannelArbiter_grant_vector.dump_state(indent + 2u);
  INST_inputChannelArbiter_priority_vector.dump_state(indent + 2u);
  INST_inputChannelArbiter_request_vector_0.dump_state(indent + 2u);
  INST_inputChannelArbiter_request_vector_1.dump_state(indent + 2u);
  INST_inputChannelArbiter_request_vector_2.dump_state(indent + 2u);
  INST_inputChannelArbiter_request_vector_3.dump_state(indent + 2u);
  INST_inputChannelArbiter_request_vector_4.dump_state(indent + 2u);
  INST_outputChannelArbiter_grant_id_wire.dump_state(indent + 2u);
  INST_outputChannelArbiter_grant_vector.dump_state(indent + 2u);
  INST_outputChannelArbiter_priority_vector.dump_state(indent + 2u);
  INST_outputChannelArbiter_request_vector_0.dump_state(indent + 2u);
  INST_outputChannelArbiter_request_vector_1.dump_state(indent + 2u);
  INST_outputChannelArbiter_request_vector_2.dump_state(indent + 2u);
  INST_outputChannelArbiter_request_vector_3.dump_state(indent + 2u);
  INST_outputChannelArbiter_request_vector_4.dump_state(indent + 2u);
  INST_routePacketQ.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkNode::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 172u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_channelInQ_0_dequeue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_channelInQ_0_enqueue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_channelInQ_1_dequeue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_channelInQ_1_enqueue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_channelInQ_2_dequeue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_channelInQ_2_enqueue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_channelInQ_3_dequeue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_channelInQ_3_enqueue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_channelInQ_4_dequeue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_channelInQ_4_enqueue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_inputArbitratei", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_inputArbitratei_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_inputArbitratei_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_inputArbitratei_3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_inputArbitratei_4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_inputChannelArbiterRequest", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_inputChannelArbiter_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_outputChannelArbiter_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_routePacketEast", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_routePacketHome", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_routePacketNorth", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_routePacketSouth", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_routePacketWest", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_18", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_19", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_20", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_21", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_channels_0_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_channels_0_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_channels_1_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_channels_1_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_channels_2_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_channels_2_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_channels_3_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_channels_3_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_channels_4_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_channels_4_putNoCPacket_put", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_channelInQ_0_dequeue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_channelInQ_0_enqueue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_channelInQ_1_dequeue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_channelInQ_1_enqueue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_channelInQ_2_dequeue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_channelInQ_2_enqueue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_channelInQ_3_dequeue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_channelInQ_3_enqueue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_channelInQ_4_dequeue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_channelInQ_4_enqueue", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_inputArbitratei", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_inputArbitratei_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_inputArbitratei_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_inputArbitratei_3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_inputArbitratei_4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_inputChannelArbiterRequest", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_inputChannelArbiter_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_outputChannelArbiter_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_routePacketEast", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_routePacketHome", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_routePacketNorth", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_routePacketSouth", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_routePacketWest", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_18", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_19", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_20", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_21", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_channels_0_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_channels_0_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_channels_1_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_channels_1_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_channels_2_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_channels_2_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_channels_3_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_channels_3_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_channels_4_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_channels_4_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_DONTCARE___d680", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_routePacketQ_first__14___d462", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_0_enqw_wget____d7", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_0_enqw_whas____d1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_0_ff_i_notEmpty____d4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_1_enqw_wget____d15", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_1_enqw_whas____d9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_1_ff_i_notEmpty____d12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_2_enqw_wget____d23", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_2_enqw_whas____d17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_2_ff_i_notEmpty____d20", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_3_enqw_wget____d31", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_3_enqw_whas____d25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_3_ff_i_notEmpty____d28", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_4_enqw_wget____d39", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_4_enqw_whas____d33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelInQ_4_ff_i_notEmpty____d36", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelOutQ_0_rv_port1__read____d681", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelOutQ_1_rv_port1__read____d682", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelOutQ_2_rv_port1__read____d683", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelOutQ_3_rv_port1__read____d684", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channelOutQ_4_rv_port1__read____d685", 48u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "routePacketQ_first____d314", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_channels_0_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_channels_0_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_channels_1_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_channels_1_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_channels_2_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_channels_2_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_channels_3_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_channels_3_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_channels_4_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_channels_4_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_channels_0_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_channels_0_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_channels_1_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_channels_1_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_channels_2_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_channels_2_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_channels_3_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_channels_3_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_channels_4_getNoCPacket_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_channels_4_putNoCPacket_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channels_0_getNoCPacket_get", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channels_0_putNoCPacket_put", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channels_1_getNoCPacket_get", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channels_1_putNoCPacket_put", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channels_2_getNoCPacket_get", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channels_2_putNoCPacket_put", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channels_3_getNoCPacket_get", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channels_3_putNoCPacket_put", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channels_4_getNoCPacket_get", 47u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "channels_4_putNoCPacket_put", 47u);
  num = INST_channelInQ_0_dequeueing.dump_VCD_defs(num);
  num = INST_channelInQ_0_enqw.dump_VCD_defs(num);
  num = INST_channelInQ_0_ff.dump_VCD_defs(num);
  num = INST_channelInQ_0_firstValid.dump_VCD_defs(num);
  num = INST_channelInQ_1_dequeueing.dump_VCD_defs(num);
  num = INST_channelInQ_1_enqw.dump_VCD_defs(num);
  num = INST_channelInQ_1_ff.dump_VCD_defs(num);
  num = INST_channelInQ_1_firstValid.dump_VCD_defs(num);
  num = INST_channelInQ_2_dequeueing.dump_VCD_defs(num);
  num = INST_channelInQ_2_enqw.dump_VCD_defs(num);
  num = INST_channelInQ_2_ff.dump_VCD_defs(num);
  num = INST_channelInQ_2_firstValid.dump_VCD_defs(num);
  num = INST_channelInQ_3_dequeueing.dump_VCD_defs(num);
  num = INST_channelInQ_3_enqw.dump_VCD_defs(num);
  num = INST_channelInQ_3_ff.dump_VCD_defs(num);
  num = INST_channelInQ_3_firstValid.dump_VCD_defs(num);
  num = INST_channelInQ_4_dequeueing.dump_VCD_defs(num);
  num = INST_channelInQ_4_enqw.dump_VCD_defs(num);
  num = INST_channelInQ_4_ff.dump_VCD_defs(num);
  num = INST_channelInQ_4_firstValid.dump_VCD_defs(num);
  num = INST_channelOutQ_0_rv.dump_VCD_defs(num);
  num = INST_channelOutQ_1_rv.dump_VCD_defs(num);
  num = INST_channelOutQ_2_rv.dump_VCD_defs(num);
  num = INST_channelOutQ_3_rv.dump_VCD_defs(num);
  num = INST_channelOutQ_4_rv.dump_VCD_defs(num);
  num = INST_inputChannelArbiter_grant_id_wire.dump_VCD_defs(num);
  num = INST_inputChannelArbiter_grant_vector.dump_VCD_defs(num);
  num = INST_inputChannelArbiter_priority_vector.dump_VCD_defs(num);
  num = INST_inputChannelArbiter_request_vector_0.dump_VCD_defs(num);
  num = INST_inputChannelArbiter_request_vector_1.dump_VCD_defs(num);
  num = INST_inputChannelArbiter_request_vector_2.dump_VCD_defs(num);
  num = INST_inputChannelArbiter_request_vector_3.dump_VCD_defs(num);
  num = INST_inputChannelArbiter_request_vector_4.dump_VCD_defs(num);
  num = INST_outputChannelArbiter_grant_id_wire.dump_VCD_defs(num);
  num = INST_outputChannelArbiter_grant_vector.dump_VCD_defs(num);
  num = INST_outputChannelArbiter_priority_vector.dump_VCD_defs(num);
  num = INST_outputChannelArbiter_request_vector_0.dump_VCD_defs(num);
  num = INST_outputChannelArbiter_request_vector_1.dump_VCD_defs(num);
  num = INST_outputChannelArbiter_request_vector_2.dump_VCD_defs(num);
  num = INST_outputChannelArbiter_request_vector_3.dump_VCD_defs(num);
  num = INST_outputChannelArbiter_request_vector_4.dump_VCD_defs(num);
  num = INST_routePacketQ.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkNode::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkNode &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkNode::vcd_defs(tVCDDumpType dt, MOD_mkNode &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 48u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 47u);
    vcd_write_x(sim_hdl, num++, 47u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_channelInQ_0_dequeue) != DEF_CAN_FIRE_RL_channelInQ_0_dequeue)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_channelInQ_0_dequeue, 1u);
	backing.DEF_CAN_FIRE_RL_channelInQ_0_dequeue = DEF_CAN_FIRE_RL_channelInQ_0_dequeue;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_channelInQ_0_enqueue) != DEF_CAN_FIRE_RL_channelInQ_0_enqueue)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_channelInQ_0_enqueue, 1u);
	backing.DEF_CAN_FIRE_RL_channelInQ_0_enqueue = DEF_CAN_FIRE_RL_channelInQ_0_enqueue;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_channelInQ_1_dequeue) != DEF_CAN_FIRE_RL_channelInQ_1_dequeue)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_channelInQ_1_dequeue, 1u);
	backing.DEF_CAN_FIRE_RL_channelInQ_1_dequeue = DEF_CAN_FIRE_RL_channelInQ_1_dequeue;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_channelInQ_1_enqueue) != DEF_CAN_FIRE_RL_channelInQ_1_enqueue)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_channelInQ_1_enqueue, 1u);
	backing.DEF_CAN_FIRE_RL_channelInQ_1_enqueue = DEF_CAN_FIRE_RL_channelInQ_1_enqueue;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_channelInQ_2_dequeue) != DEF_CAN_FIRE_RL_channelInQ_2_dequeue)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_channelInQ_2_dequeue, 1u);
	backing.DEF_CAN_FIRE_RL_channelInQ_2_dequeue = DEF_CAN_FIRE_RL_channelInQ_2_dequeue;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_channelInQ_2_enqueue) != DEF_CAN_FIRE_RL_channelInQ_2_enqueue)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_channelInQ_2_enqueue, 1u);
	backing.DEF_CAN_FIRE_RL_channelInQ_2_enqueue = DEF_CAN_FIRE_RL_channelInQ_2_enqueue;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_channelInQ_3_dequeue) != DEF_CAN_FIRE_RL_channelInQ_3_dequeue)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_channelInQ_3_dequeue, 1u);
	backing.DEF_CAN_FIRE_RL_channelInQ_3_dequeue = DEF_CAN_FIRE_RL_channelInQ_3_dequeue;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_channelInQ_3_enqueue) != DEF_CAN_FIRE_RL_channelInQ_3_enqueue)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_channelInQ_3_enqueue, 1u);
	backing.DEF_CAN_FIRE_RL_channelInQ_3_enqueue = DEF_CAN_FIRE_RL_channelInQ_3_enqueue;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_channelInQ_4_dequeue) != DEF_CAN_FIRE_RL_channelInQ_4_dequeue)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_channelInQ_4_dequeue, 1u);
	backing.DEF_CAN_FIRE_RL_channelInQ_4_dequeue = DEF_CAN_FIRE_RL_channelInQ_4_dequeue;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_channelInQ_4_enqueue) != DEF_CAN_FIRE_RL_channelInQ_4_enqueue)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_channelInQ_4_enqueue, 1u);
	backing.DEF_CAN_FIRE_RL_channelInQ_4_enqueue = DEF_CAN_FIRE_RL_channelInQ_4_enqueue;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_inputArbitratei) != DEF_CAN_FIRE_RL_inputArbitratei)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_inputArbitratei, 1u);
	backing.DEF_CAN_FIRE_RL_inputArbitratei = DEF_CAN_FIRE_RL_inputArbitratei;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_inputArbitratei_1) != DEF_CAN_FIRE_RL_inputArbitratei_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_inputArbitratei_1, 1u);
	backing.DEF_CAN_FIRE_RL_inputArbitratei_1 = DEF_CAN_FIRE_RL_inputArbitratei_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_inputArbitratei_2) != DEF_CAN_FIRE_RL_inputArbitratei_2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_inputArbitratei_2, 1u);
	backing.DEF_CAN_FIRE_RL_inputArbitratei_2 = DEF_CAN_FIRE_RL_inputArbitratei_2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_inputArbitratei_3) != DEF_CAN_FIRE_RL_inputArbitratei_3)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_inputArbitratei_3, 1u);
	backing.DEF_CAN_FIRE_RL_inputArbitratei_3 = DEF_CAN_FIRE_RL_inputArbitratei_3;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_inputArbitratei_4) != DEF_CAN_FIRE_RL_inputArbitratei_4)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_inputArbitratei_4, 1u);
	backing.DEF_CAN_FIRE_RL_inputArbitratei_4 = DEF_CAN_FIRE_RL_inputArbitratei_4;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_inputChannelArbiterRequest) != DEF_CAN_FIRE_RL_inputChannelArbiterRequest)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_inputChannelArbiterRequest, 1u);
	backing.DEF_CAN_FIRE_RL_inputChannelArbiterRequest = DEF_CAN_FIRE_RL_inputChannelArbiterRequest;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_inputChannelArbiter_every) != DEF_CAN_FIRE_RL_inputChannelArbiter_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_inputChannelArbiter_every, 1u);
	backing.DEF_CAN_FIRE_RL_inputChannelArbiter_every = DEF_CAN_FIRE_RL_inputChannelArbiter_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_outputChannelArbiter_every) != DEF_CAN_FIRE_RL_outputChannelArbiter_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_outputChannelArbiter_every, 1u);
	backing.DEF_CAN_FIRE_RL_outputChannelArbiter_every = DEF_CAN_FIRE_RL_outputChannelArbiter_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_routePacketEast) != DEF_CAN_FIRE_RL_routePacketEast)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_routePacketEast, 1u);
	backing.DEF_CAN_FIRE_RL_routePacketEast = DEF_CAN_FIRE_RL_routePacketEast;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_routePacketHome) != DEF_CAN_FIRE_RL_routePacketHome)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_routePacketHome, 1u);
	backing.DEF_CAN_FIRE_RL_routePacketHome = DEF_CAN_FIRE_RL_routePacketHome;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_routePacketNorth) != DEF_CAN_FIRE_RL_routePacketNorth)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_routePacketNorth, 1u);
	backing.DEF_CAN_FIRE_RL_routePacketNorth = DEF_CAN_FIRE_RL_routePacketNorth;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_routePacketSouth) != DEF_CAN_FIRE_RL_routePacketSouth)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_routePacketSouth, 1u);
	backing.DEF_CAN_FIRE_RL_routePacketSouth = DEF_CAN_FIRE_RL_routePacketSouth;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_routePacketWest) != DEF_CAN_FIRE_RL_routePacketWest)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_routePacketWest, 1u);
	backing.DEF_CAN_FIRE_RL_routePacketWest = DEF_CAN_FIRE_RL_routePacketWest;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_13) != DEF_CAN_FIRE___me_check_13)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_13, 1u);
	backing.DEF_CAN_FIRE___me_check_13 = DEF_CAN_FIRE___me_check_13;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_18) != DEF_CAN_FIRE___me_check_18)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_18, 1u);
	backing.DEF_CAN_FIRE___me_check_18 = DEF_CAN_FIRE___me_check_18;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_19) != DEF_CAN_FIRE___me_check_19)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_19, 1u);
	backing.DEF_CAN_FIRE___me_check_19 = DEF_CAN_FIRE___me_check_19;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_20) != DEF_CAN_FIRE___me_check_20)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_20, 1u);
	backing.DEF_CAN_FIRE___me_check_20 = DEF_CAN_FIRE___me_check_20;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_21) != DEF_CAN_FIRE___me_check_21)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_21, 1u);
	backing.DEF_CAN_FIRE___me_check_21 = DEF_CAN_FIRE___me_check_21;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_channels_0_getNoCPacket_get) != DEF_CAN_FIRE_channels_0_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_channels_0_getNoCPacket_get, 1u);
	backing.DEF_CAN_FIRE_channels_0_getNoCPacket_get = DEF_CAN_FIRE_channels_0_getNoCPacket_get;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_channels_0_putNoCPacket_put) != DEF_CAN_FIRE_channels_0_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_channels_0_putNoCPacket_put, 1u);
	backing.DEF_CAN_FIRE_channels_0_putNoCPacket_put = DEF_CAN_FIRE_channels_0_putNoCPacket_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_channels_1_getNoCPacket_get) != DEF_CAN_FIRE_channels_1_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_channels_1_getNoCPacket_get, 1u);
	backing.DEF_CAN_FIRE_channels_1_getNoCPacket_get = DEF_CAN_FIRE_channels_1_getNoCPacket_get;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_channels_1_putNoCPacket_put) != DEF_CAN_FIRE_channels_1_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_channels_1_putNoCPacket_put, 1u);
	backing.DEF_CAN_FIRE_channels_1_putNoCPacket_put = DEF_CAN_FIRE_channels_1_putNoCPacket_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_channels_2_getNoCPacket_get) != DEF_CAN_FIRE_channels_2_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_channels_2_getNoCPacket_get, 1u);
	backing.DEF_CAN_FIRE_channels_2_getNoCPacket_get = DEF_CAN_FIRE_channels_2_getNoCPacket_get;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_channels_2_putNoCPacket_put) != DEF_CAN_FIRE_channels_2_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_channels_2_putNoCPacket_put, 1u);
	backing.DEF_CAN_FIRE_channels_2_putNoCPacket_put = DEF_CAN_FIRE_channels_2_putNoCPacket_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_channels_3_getNoCPacket_get) != DEF_CAN_FIRE_channels_3_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_channels_3_getNoCPacket_get, 1u);
	backing.DEF_CAN_FIRE_channels_3_getNoCPacket_get = DEF_CAN_FIRE_channels_3_getNoCPacket_get;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_channels_3_putNoCPacket_put) != DEF_CAN_FIRE_channels_3_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_channels_3_putNoCPacket_put, 1u);
	backing.DEF_CAN_FIRE_channels_3_putNoCPacket_put = DEF_CAN_FIRE_channels_3_putNoCPacket_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_channels_4_getNoCPacket_get) != DEF_CAN_FIRE_channels_4_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_channels_4_getNoCPacket_get, 1u);
	backing.DEF_CAN_FIRE_channels_4_getNoCPacket_get = DEF_CAN_FIRE_channels_4_getNoCPacket_get;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_channels_4_putNoCPacket_put) != DEF_CAN_FIRE_channels_4_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_channels_4_putNoCPacket_put, 1u);
	backing.DEF_CAN_FIRE_channels_4_putNoCPacket_put = DEF_CAN_FIRE_channels_4_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_channelInQ_0_dequeue) != DEF_WILL_FIRE_RL_channelInQ_0_dequeue)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_channelInQ_0_dequeue, 1u);
	backing.DEF_WILL_FIRE_RL_channelInQ_0_dequeue = DEF_WILL_FIRE_RL_channelInQ_0_dequeue;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_channelInQ_0_enqueue) != DEF_WILL_FIRE_RL_channelInQ_0_enqueue)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_channelInQ_0_enqueue, 1u);
	backing.DEF_WILL_FIRE_RL_channelInQ_0_enqueue = DEF_WILL_FIRE_RL_channelInQ_0_enqueue;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_channelInQ_1_dequeue) != DEF_WILL_FIRE_RL_channelInQ_1_dequeue)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_channelInQ_1_dequeue, 1u);
	backing.DEF_WILL_FIRE_RL_channelInQ_1_dequeue = DEF_WILL_FIRE_RL_channelInQ_1_dequeue;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_channelInQ_1_enqueue) != DEF_WILL_FIRE_RL_channelInQ_1_enqueue)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_channelInQ_1_enqueue, 1u);
	backing.DEF_WILL_FIRE_RL_channelInQ_1_enqueue = DEF_WILL_FIRE_RL_channelInQ_1_enqueue;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_channelInQ_2_dequeue) != DEF_WILL_FIRE_RL_channelInQ_2_dequeue)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_channelInQ_2_dequeue, 1u);
	backing.DEF_WILL_FIRE_RL_channelInQ_2_dequeue = DEF_WILL_FIRE_RL_channelInQ_2_dequeue;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_channelInQ_2_enqueue) != DEF_WILL_FIRE_RL_channelInQ_2_enqueue)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_channelInQ_2_enqueue, 1u);
	backing.DEF_WILL_FIRE_RL_channelInQ_2_enqueue = DEF_WILL_FIRE_RL_channelInQ_2_enqueue;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_channelInQ_3_dequeue) != DEF_WILL_FIRE_RL_channelInQ_3_dequeue)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_channelInQ_3_dequeue, 1u);
	backing.DEF_WILL_FIRE_RL_channelInQ_3_dequeue = DEF_WILL_FIRE_RL_channelInQ_3_dequeue;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_channelInQ_3_enqueue) != DEF_WILL_FIRE_RL_channelInQ_3_enqueue)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_channelInQ_3_enqueue, 1u);
	backing.DEF_WILL_FIRE_RL_channelInQ_3_enqueue = DEF_WILL_FIRE_RL_channelInQ_3_enqueue;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_channelInQ_4_dequeue) != DEF_WILL_FIRE_RL_channelInQ_4_dequeue)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_channelInQ_4_dequeue, 1u);
	backing.DEF_WILL_FIRE_RL_channelInQ_4_dequeue = DEF_WILL_FIRE_RL_channelInQ_4_dequeue;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_channelInQ_4_enqueue) != DEF_WILL_FIRE_RL_channelInQ_4_enqueue)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_channelInQ_4_enqueue, 1u);
	backing.DEF_WILL_FIRE_RL_channelInQ_4_enqueue = DEF_WILL_FIRE_RL_channelInQ_4_enqueue;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_inputArbitratei) != DEF_WILL_FIRE_RL_inputArbitratei)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_inputArbitratei, 1u);
	backing.DEF_WILL_FIRE_RL_inputArbitratei = DEF_WILL_FIRE_RL_inputArbitratei;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_inputArbitratei_1) != DEF_WILL_FIRE_RL_inputArbitratei_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_inputArbitratei_1, 1u);
	backing.DEF_WILL_FIRE_RL_inputArbitratei_1 = DEF_WILL_FIRE_RL_inputArbitratei_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_inputArbitratei_2) != DEF_WILL_FIRE_RL_inputArbitratei_2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_inputArbitratei_2, 1u);
	backing.DEF_WILL_FIRE_RL_inputArbitratei_2 = DEF_WILL_FIRE_RL_inputArbitratei_2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_inputArbitratei_3) != DEF_WILL_FIRE_RL_inputArbitratei_3)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_inputArbitratei_3, 1u);
	backing.DEF_WILL_FIRE_RL_inputArbitratei_3 = DEF_WILL_FIRE_RL_inputArbitratei_3;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_inputArbitratei_4) != DEF_WILL_FIRE_RL_inputArbitratei_4)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_inputArbitratei_4, 1u);
	backing.DEF_WILL_FIRE_RL_inputArbitratei_4 = DEF_WILL_FIRE_RL_inputArbitratei_4;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_inputChannelArbiterRequest) != DEF_WILL_FIRE_RL_inputChannelArbiterRequest)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_inputChannelArbiterRequest, 1u);
	backing.DEF_WILL_FIRE_RL_inputChannelArbiterRequest = DEF_WILL_FIRE_RL_inputChannelArbiterRequest;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_inputChannelArbiter_every) != DEF_WILL_FIRE_RL_inputChannelArbiter_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_inputChannelArbiter_every, 1u);
	backing.DEF_WILL_FIRE_RL_inputChannelArbiter_every = DEF_WILL_FIRE_RL_inputChannelArbiter_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_outputChannelArbiter_every) != DEF_WILL_FIRE_RL_outputChannelArbiter_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_outputChannelArbiter_every, 1u);
	backing.DEF_WILL_FIRE_RL_outputChannelArbiter_every = DEF_WILL_FIRE_RL_outputChannelArbiter_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_routePacketEast) != DEF_WILL_FIRE_RL_routePacketEast)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_routePacketEast, 1u);
	backing.DEF_WILL_FIRE_RL_routePacketEast = DEF_WILL_FIRE_RL_routePacketEast;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_routePacketHome) != DEF_WILL_FIRE_RL_routePacketHome)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_routePacketHome, 1u);
	backing.DEF_WILL_FIRE_RL_routePacketHome = DEF_WILL_FIRE_RL_routePacketHome;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_routePacketNorth) != DEF_WILL_FIRE_RL_routePacketNorth)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_routePacketNorth, 1u);
	backing.DEF_WILL_FIRE_RL_routePacketNorth = DEF_WILL_FIRE_RL_routePacketNorth;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_routePacketSouth) != DEF_WILL_FIRE_RL_routePacketSouth)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_routePacketSouth, 1u);
	backing.DEF_WILL_FIRE_RL_routePacketSouth = DEF_WILL_FIRE_RL_routePacketSouth;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_routePacketWest) != DEF_WILL_FIRE_RL_routePacketWest)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_routePacketWest, 1u);
	backing.DEF_WILL_FIRE_RL_routePacketWest = DEF_WILL_FIRE_RL_routePacketWest;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_13) != DEF_WILL_FIRE___me_check_13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_13, 1u);
	backing.DEF_WILL_FIRE___me_check_13 = DEF_WILL_FIRE___me_check_13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_18) != DEF_WILL_FIRE___me_check_18)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_18, 1u);
	backing.DEF_WILL_FIRE___me_check_18 = DEF_WILL_FIRE___me_check_18;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_19) != DEF_WILL_FIRE___me_check_19)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_19, 1u);
	backing.DEF_WILL_FIRE___me_check_19 = DEF_WILL_FIRE___me_check_19;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_20) != DEF_WILL_FIRE___me_check_20)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_20, 1u);
	backing.DEF_WILL_FIRE___me_check_20 = DEF_WILL_FIRE___me_check_20;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_21) != DEF_WILL_FIRE___me_check_21)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_21, 1u);
	backing.DEF_WILL_FIRE___me_check_21 = DEF_WILL_FIRE___me_check_21;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_channels_0_getNoCPacket_get) != DEF_WILL_FIRE_channels_0_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_channels_0_getNoCPacket_get, 1u);
	backing.DEF_WILL_FIRE_channels_0_getNoCPacket_get = DEF_WILL_FIRE_channels_0_getNoCPacket_get;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_channels_0_putNoCPacket_put) != DEF_WILL_FIRE_channels_0_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_channels_0_putNoCPacket_put, 1u);
	backing.DEF_WILL_FIRE_channels_0_putNoCPacket_put = DEF_WILL_FIRE_channels_0_putNoCPacket_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_channels_1_getNoCPacket_get) != DEF_WILL_FIRE_channels_1_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_channels_1_getNoCPacket_get, 1u);
	backing.DEF_WILL_FIRE_channels_1_getNoCPacket_get = DEF_WILL_FIRE_channels_1_getNoCPacket_get;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_channels_1_putNoCPacket_put) != DEF_WILL_FIRE_channels_1_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_channels_1_putNoCPacket_put, 1u);
	backing.DEF_WILL_FIRE_channels_1_putNoCPacket_put = DEF_WILL_FIRE_channels_1_putNoCPacket_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_channels_2_getNoCPacket_get) != DEF_WILL_FIRE_channels_2_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_channels_2_getNoCPacket_get, 1u);
	backing.DEF_WILL_FIRE_channels_2_getNoCPacket_get = DEF_WILL_FIRE_channels_2_getNoCPacket_get;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_channels_2_putNoCPacket_put) != DEF_WILL_FIRE_channels_2_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_channels_2_putNoCPacket_put, 1u);
	backing.DEF_WILL_FIRE_channels_2_putNoCPacket_put = DEF_WILL_FIRE_channels_2_putNoCPacket_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_channels_3_getNoCPacket_get) != DEF_WILL_FIRE_channels_3_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_channels_3_getNoCPacket_get, 1u);
	backing.DEF_WILL_FIRE_channels_3_getNoCPacket_get = DEF_WILL_FIRE_channels_3_getNoCPacket_get;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_channels_3_putNoCPacket_put) != DEF_WILL_FIRE_channels_3_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_channels_3_putNoCPacket_put, 1u);
	backing.DEF_WILL_FIRE_channels_3_putNoCPacket_put = DEF_WILL_FIRE_channels_3_putNoCPacket_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_channels_4_getNoCPacket_get) != DEF_WILL_FIRE_channels_4_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_channels_4_getNoCPacket_get, 1u);
	backing.DEF_WILL_FIRE_channels_4_getNoCPacket_get = DEF_WILL_FIRE_channels_4_getNoCPacket_get;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_channels_4_putNoCPacket_put) != DEF_WILL_FIRE_channels_4_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_channels_4_putNoCPacket_put, 1u);
	backing.DEF_WILL_FIRE_channels_4_putNoCPacket_put = DEF_WILL_FIRE_channels_4_putNoCPacket_put;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_DONTCARE___d680) != DEF__0_CONCAT_DONTCARE___d680)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_DONTCARE___d680, 48u);
	backing.DEF__0_CONCAT_DONTCARE___d680 = DEF__0_CONCAT_DONTCARE___d680;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_routePacketQ_first__14___d462) != DEF__1_CONCAT_routePacketQ_first__14___d462)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_routePacketQ_first__14___d462, 48u);
	backing.DEF__1_CONCAT_routePacketQ_first__14___d462 = DEF__1_CONCAT_routePacketQ_first__14___d462;
      }
      ++num;
      if ((backing.DEF_channelInQ_0_enqw_wget____d7) != DEF_channelInQ_0_enqw_wget____d7)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_0_enqw_wget____d7, 47u);
	backing.DEF_channelInQ_0_enqw_wget____d7 = DEF_channelInQ_0_enqw_wget____d7;
      }
      ++num;
      if ((backing.DEF_channelInQ_0_enqw_whas____d1) != DEF_channelInQ_0_enqw_whas____d1)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_0_enqw_whas____d1, 1u);
	backing.DEF_channelInQ_0_enqw_whas____d1 = DEF_channelInQ_0_enqw_whas____d1;
      }
      ++num;
      if ((backing.DEF_channelInQ_0_ff_i_notEmpty____d4) != DEF_channelInQ_0_ff_i_notEmpty____d4)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_0_ff_i_notEmpty____d4, 1u);
	backing.DEF_channelInQ_0_ff_i_notEmpty____d4 = DEF_channelInQ_0_ff_i_notEmpty____d4;
      }
      ++num;
      if ((backing.DEF_channelInQ_1_enqw_wget____d15) != DEF_channelInQ_1_enqw_wget____d15)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_1_enqw_wget____d15, 47u);
	backing.DEF_channelInQ_1_enqw_wget____d15 = DEF_channelInQ_1_enqw_wget____d15;
      }
      ++num;
      if ((backing.DEF_channelInQ_1_enqw_whas____d9) != DEF_channelInQ_1_enqw_whas____d9)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_1_enqw_whas____d9, 1u);
	backing.DEF_channelInQ_1_enqw_whas____d9 = DEF_channelInQ_1_enqw_whas____d9;
      }
      ++num;
      if ((backing.DEF_channelInQ_1_ff_i_notEmpty____d12) != DEF_channelInQ_1_ff_i_notEmpty____d12)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_1_ff_i_notEmpty____d12, 1u);
	backing.DEF_channelInQ_1_ff_i_notEmpty____d12 = DEF_channelInQ_1_ff_i_notEmpty____d12;
      }
      ++num;
      if ((backing.DEF_channelInQ_2_enqw_wget____d23) != DEF_channelInQ_2_enqw_wget____d23)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_2_enqw_wget____d23, 47u);
	backing.DEF_channelInQ_2_enqw_wget____d23 = DEF_channelInQ_2_enqw_wget____d23;
      }
      ++num;
      if ((backing.DEF_channelInQ_2_enqw_whas____d17) != DEF_channelInQ_2_enqw_whas____d17)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_2_enqw_whas____d17, 1u);
	backing.DEF_channelInQ_2_enqw_whas____d17 = DEF_channelInQ_2_enqw_whas____d17;
      }
      ++num;
      if ((backing.DEF_channelInQ_2_ff_i_notEmpty____d20) != DEF_channelInQ_2_ff_i_notEmpty____d20)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_2_ff_i_notEmpty____d20, 1u);
	backing.DEF_channelInQ_2_ff_i_notEmpty____d20 = DEF_channelInQ_2_ff_i_notEmpty____d20;
      }
      ++num;
      if ((backing.DEF_channelInQ_3_enqw_wget____d31) != DEF_channelInQ_3_enqw_wget____d31)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_3_enqw_wget____d31, 47u);
	backing.DEF_channelInQ_3_enqw_wget____d31 = DEF_channelInQ_3_enqw_wget____d31;
      }
      ++num;
      if ((backing.DEF_channelInQ_3_enqw_whas____d25) != DEF_channelInQ_3_enqw_whas____d25)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_3_enqw_whas____d25, 1u);
	backing.DEF_channelInQ_3_enqw_whas____d25 = DEF_channelInQ_3_enqw_whas____d25;
      }
      ++num;
      if ((backing.DEF_channelInQ_3_ff_i_notEmpty____d28) != DEF_channelInQ_3_ff_i_notEmpty____d28)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_3_ff_i_notEmpty____d28, 1u);
	backing.DEF_channelInQ_3_ff_i_notEmpty____d28 = DEF_channelInQ_3_ff_i_notEmpty____d28;
      }
      ++num;
      if ((backing.DEF_channelInQ_4_enqw_wget____d39) != DEF_channelInQ_4_enqw_wget____d39)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_4_enqw_wget____d39, 47u);
	backing.DEF_channelInQ_4_enqw_wget____d39 = DEF_channelInQ_4_enqw_wget____d39;
      }
      ++num;
      if ((backing.DEF_channelInQ_4_enqw_whas____d33) != DEF_channelInQ_4_enqw_whas____d33)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_4_enqw_whas____d33, 1u);
	backing.DEF_channelInQ_4_enqw_whas____d33 = DEF_channelInQ_4_enqw_whas____d33;
      }
      ++num;
      if ((backing.DEF_channelInQ_4_ff_i_notEmpty____d36) != DEF_channelInQ_4_ff_i_notEmpty____d36)
      {
	vcd_write_val(sim_hdl, num, DEF_channelInQ_4_ff_i_notEmpty____d36, 1u);
	backing.DEF_channelInQ_4_ff_i_notEmpty____d36 = DEF_channelInQ_4_ff_i_notEmpty____d36;
      }
      ++num;
      if ((backing.DEF_channelOutQ_0_rv_port1__read____d681) != DEF_channelOutQ_0_rv_port1__read____d681)
      {
	vcd_write_val(sim_hdl, num, DEF_channelOutQ_0_rv_port1__read____d681, 48u);
	backing.DEF_channelOutQ_0_rv_port1__read____d681 = DEF_channelOutQ_0_rv_port1__read____d681;
      }
      ++num;
      if ((backing.DEF_channelOutQ_1_rv_port1__read____d682) != DEF_channelOutQ_1_rv_port1__read____d682)
      {
	vcd_write_val(sim_hdl, num, DEF_channelOutQ_1_rv_port1__read____d682, 48u);
	backing.DEF_channelOutQ_1_rv_port1__read____d682 = DEF_channelOutQ_1_rv_port1__read____d682;
      }
      ++num;
      if ((backing.DEF_channelOutQ_2_rv_port1__read____d683) != DEF_channelOutQ_2_rv_port1__read____d683)
      {
	vcd_write_val(sim_hdl, num, DEF_channelOutQ_2_rv_port1__read____d683, 48u);
	backing.DEF_channelOutQ_2_rv_port1__read____d683 = DEF_channelOutQ_2_rv_port1__read____d683;
      }
      ++num;
      if ((backing.DEF_channelOutQ_3_rv_port1__read____d684) != DEF_channelOutQ_3_rv_port1__read____d684)
      {
	vcd_write_val(sim_hdl, num, DEF_channelOutQ_3_rv_port1__read____d684, 48u);
	backing.DEF_channelOutQ_3_rv_port1__read____d684 = DEF_channelOutQ_3_rv_port1__read____d684;
      }
      ++num;
      if ((backing.DEF_channelOutQ_4_rv_port1__read____d685) != DEF_channelOutQ_4_rv_port1__read____d685)
      {
	vcd_write_val(sim_hdl, num, DEF_channelOutQ_4_rv_port1__read____d685, 48u);
	backing.DEF_channelOutQ_4_rv_port1__read____d685 = DEF_channelOutQ_4_rv_port1__read____d685;
      }
      ++num;
      if ((backing.DEF_routePacketQ_first____d314) != DEF_routePacketQ_first____d314)
      {
	vcd_write_val(sim_hdl, num, DEF_routePacketQ_first____d314, 47u);
	backing.DEF_routePacketQ_first____d314 = DEF_routePacketQ_first____d314;
      }
      ++num;
      if ((backing.PORT_EN_channels_0_getNoCPacket_get) != PORT_EN_channels_0_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_channels_0_getNoCPacket_get, 1u);
	backing.PORT_EN_channels_0_getNoCPacket_get = PORT_EN_channels_0_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_EN_channels_0_putNoCPacket_put) != PORT_EN_channels_0_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_channels_0_putNoCPacket_put, 1u);
	backing.PORT_EN_channels_0_putNoCPacket_put = PORT_EN_channels_0_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_EN_channels_1_getNoCPacket_get) != PORT_EN_channels_1_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_channels_1_getNoCPacket_get, 1u);
	backing.PORT_EN_channels_1_getNoCPacket_get = PORT_EN_channels_1_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_EN_channels_1_putNoCPacket_put) != PORT_EN_channels_1_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_channels_1_putNoCPacket_put, 1u);
	backing.PORT_EN_channels_1_putNoCPacket_put = PORT_EN_channels_1_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_EN_channels_2_getNoCPacket_get) != PORT_EN_channels_2_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_channels_2_getNoCPacket_get, 1u);
	backing.PORT_EN_channels_2_getNoCPacket_get = PORT_EN_channels_2_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_EN_channels_2_putNoCPacket_put) != PORT_EN_channels_2_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_channels_2_putNoCPacket_put, 1u);
	backing.PORT_EN_channels_2_putNoCPacket_put = PORT_EN_channels_2_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_EN_channels_3_getNoCPacket_get) != PORT_EN_channels_3_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_channels_3_getNoCPacket_get, 1u);
	backing.PORT_EN_channels_3_getNoCPacket_get = PORT_EN_channels_3_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_EN_channels_3_putNoCPacket_put) != PORT_EN_channels_3_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_channels_3_putNoCPacket_put, 1u);
	backing.PORT_EN_channels_3_putNoCPacket_put = PORT_EN_channels_3_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_EN_channels_4_getNoCPacket_get) != PORT_EN_channels_4_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_channels_4_getNoCPacket_get, 1u);
	backing.PORT_EN_channels_4_getNoCPacket_get = PORT_EN_channels_4_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_EN_channels_4_putNoCPacket_put) != PORT_EN_channels_4_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_channels_4_putNoCPacket_put, 1u);
	backing.PORT_EN_channels_4_putNoCPacket_put = PORT_EN_channels_4_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_RDY_channels_0_getNoCPacket_get) != PORT_RDY_channels_0_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_channels_0_getNoCPacket_get, 1u);
	backing.PORT_RDY_channels_0_getNoCPacket_get = PORT_RDY_channels_0_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_RDY_channels_0_putNoCPacket_put) != PORT_RDY_channels_0_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_channels_0_putNoCPacket_put, 1u);
	backing.PORT_RDY_channels_0_putNoCPacket_put = PORT_RDY_channels_0_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_RDY_channels_1_getNoCPacket_get) != PORT_RDY_channels_1_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_channels_1_getNoCPacket_get, 1u);
	backing.PORT_RDY_channels_1_getNoCPacket_get = PORT_RDY_channels_1_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_RDY_channels_1_putNoCPacket_put) != PORT_RDY_channels_1_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_channels_1_putNoCPacket_put, 1u);
	backing.PORT_RDY_channels_1_putNoCPacket_put = PORT_RDY_channels_1_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_RDY_channels_2_getNoCPacket_get) != PORT_RDY_channels_2_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_channels_2_getNoCPacket_get, 1u);
	backing.PORT_RDY_channels_2_getNoCPacket_get = PORT_RDY_channels_2_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_RDY_channels_2_putNoCPacket_put) != PORT_RDY_channels_2_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_channels_2_putNoCPacket_put, 1u);
	backing.PORT_RDY_channels_2_putNoCPacket_put = PORT_RDY_channels_2_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_RDY_channels_3_getNoCPacket_get) != PORT_RDY_channels_3_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_channels_3_getNoCPacket_get, 1u);
	backing.PORT_RDY_channels_3_getNoCPacket_get = PORT_RDY_channels_3_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_RDY_channels_3_putNoCPacket_put) != PORT_RDY_channels_3_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_channels_3_putNoCPacket_put, 1u);
	backing.PORT_RDY_channels_3_putNoCPacket_put = PORT_RDY_channels_3_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_RDY_channels_4_getNoCPacket_get) != PORT_RDY_channels_4_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_channels_4_getNoCPacket_get, 1u);
	backing.PORT_RDY_channels_4_getNoCPacket_get = PORT_RDY_channels_4_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_RDY_channels_4_putNoCPacket_put) != PORT_RDY_channels_4_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_channels_4_putNoCPacket_put, 1u);
	backing.PORT_RDY_channels_4_putNoCPacket_put = PORT_RDY_channels_4_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_channels_0_getNoCPacket_get) != PORT_channels_0_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_channels_0_getNoCPacket_get, 47u);
	backing.PORT_channels_0_getNoCPacket_get = PORT_channels_0_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_channels_0_putNoCPacket_put) != PORT_channels_0_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_channels_0_putNoCPacket_put, 47u);
	backing.PORT_channels_0_putNoCPacket_put = PORT_channels_0_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_channels_1_getNoCPacket_get) != PORT_channels_1_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_channels_1_getNoCPacket_get, 47u);
	backing.PORT_channels_1_getNoCPacket_get = PORT_channels_1_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_channels_1_putNoCPacket_put) != PORT_channels_1_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_channels_1_putNoCPacket_put, 47u);
	backing.PORT_channels_1_putNoCPacket_put = PORT_channels_1_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_channels_2_getNoCPacket_get) != PORT_channels_2_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_channels_2_getNoCPacket_get, 47u);
	backing.PORT_channels_2_getNoCPacket_get = PORT_channels_2_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_channels_2_putNoCPacket_put) != PORT_channels_2_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_channels_2_putNoCPacket_put, 47u);
	backing.PORT_channels_2_putNoCPacket_put = PORT_channels_2_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_channels_3_getNoCPacket_get) != PORT_channels_3_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_channels_3_getNoCPacket_get, 47u);
	backing.PORT_channels_3_getNoCPacket_get = PORT_channels_3_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_channels_3_putNoCPacket_put) != PORT_channels_3_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_channels_3_putNoCPacket_put, 47u);
	backing.PORT_channels_3_putNoCPacket_put = PORT_channels_3_putNoCPacket_put;
      }
      ++num;
      if ((backing.PORT_channels_4_getNoCPacket_get) != PORT_channels_4_getNoCPacket_get)
      {
	vcd_write_val(sim_hdl, num, PORT_channels_4_getNoCPacket_get, 47u);
	backing.PORT_channels_4_getNoCPacket_get = PORT_channels_4_getNoCPacket_get;
      }
      ++num;
      if ((backing.PORT_channels_4_putNoCPacket_put) != PORT_channels_4_putNoCPacket_put)
      {
	vcd_write_val(sim_hdl, num, PORT_channels_4_putNoCPacket_put, 47u);
	backing.PORT_channels_4_putNoCPacket_put = PORT_channels_4_putNoCPacket_put;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_channelInQ_0_dequeue, 1u);
      backing.DEF_CAN_FIRE_RL_channelInQ_0_dequeue = DEF_CAN_FIRE_RL_channelInQ_0_dequeue;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_channelInQ_0_enqueue, 1u);
      backing.DEF_CAN_FIRE_RL_channelInQ_0_enqueue = DEF_CAN_FIRE_RL_channelInQ_0_enqueue;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_channelInQ_1_dequeue, 1u);
      backing.DEF_CAN_FIRE_RL_channelInQ_1_dequeue = DEF_CAN_FIRE_RL_channelInQ_1_dequeue;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_channelInQ_1_enqueue, 1u);
      backing.DEF_CAN_FIRE_RL_channelInQ_1_enqueue = DEF_CAN_FIRE_RL_channelInQ_1_enqueue;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_channelInQ_2_dequeue, 1u);
      backing.DEF_CAN_FIRE_RL_channelInQ_2_dequeue = DEF_CAN_FIRE_RL_channelInQ_2_dequeue;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_channelInQ_2_enqueue, 1u);
      backing.DEF_CAN_FIRE_RL_channelInQ_2_enqueue = DEF_CAN_FIRE_RL_channelInQ_2_enqueue;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_channelInQ_3_dequeue, 1u);
      backing.DEF_CAN_FIRE_RL_channelInQ_3_dequeue = DEF_CAN_FIRE_RL_channelInQ_3_dequeue;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_channelInQ_3_enqueue, 1u);
      backing.DEF_CAN_FIRE_RL_channelInQ_3_enqueue = DEF_CAN_FIRE_RL_channelInQ_3_enqueue;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_channelInQ_4_dequeue, 1u);
      backing.DEF_CAN_FIRE_RL_channelInQ_4_dequeue = DEF_CAN_FIRE_RL_channelInQ_4_dequeue;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_channelInQ_4_enqueue, 1u);
      backing.DEF_CAN_FIRE_RL_channelInQ_4_enqueue = DEF_CAN_FIRE_RL_channelInQ_4_enqueue;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_inputArbitratei, 1u);
      backing.DEF_CAN_FIRE_RL_inputArbitratei = DEF_CAN_FIRE_RL_inputArbitratei;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_inputArbitratei_1, 1u);
      backing.DEF_CAN_FIRE_RL_inputArbitratei_1 = DEF_CAN_FIRE_RL_inputArbitratei_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_inputArbitratei_2, 1u);
      backing.DEF_CAN_FIRE_RL_inputArbitratei_2 = DEF_CAN_FIRE_RL_inputArbitratei_2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_inputArbitratei_3, 1u);
      backing.DEF_CAN_FIRE_RL_inputArbitratei_3 = DEF_CAN_FIRE_RL_inputArbitratei_3;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_inputArbitratei_4, 1u);
      backing.DEF_CAN_FIRE_RL_inputArbitratei_4 = DEF_CAN_FIRE_RL_inputArbitratei_4;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_inputChannelArbiterRequest, 1u);
      backing.DEF_CAN_FIRE_RL_inputChannelArbiterRequest = DEF_CAN_FIRE_RL_inputChannelArbiterRequest;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_inputChannelArbiter_every, 1u);
      backing.DEF_CAN_FIRE_RL_inputChannelArbiter_every = DEF_CAN_FIRE_RL_inputChannelArbiter_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_outputChannelArbiter_every, 1u);
      backing.DEF_CAN_FIRE_RL_outputChannelArbiter_every = DEF_CAN_FIRE_RL_outputChannelArbiter_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_routePacketEast, 1u);
      backing.DEF_CAN_FIRE_RL_routePacketEast = DEF_CAN_FIRE_RL_routePacketEast;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_routePacketHome, 1u);
      backing.DEF_CAN_FIRE_RL_routePacketHome = DEF_CAN_FIRE_RL_routePacketHome;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_routePacketNorth, 1u);
      backing.DEF_CAN_FIRE_RL_routePacketNorth = DEF_CAN_FIRE_RL_routePacketNorth;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_routePacketSouth, 1u);
      backing.DEF_CAN_FIRE_RL_routePacketSouth = DEF_CAN_FIRE_RL_routePacketSouth;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_routePacketWest, 1u);
      backing.DEF_CAN_FIRE_RL_routePacketWest = DEF_CAN_FIRE_RL_routePacketWest;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_13, 1u);
      backing.DEF_CAN_FIRE___me_check_13 = DEF_CAN_FIRE___me_check_13;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_18, 1u);
      backing.DEF_CAN_FIRE___me_check_18 = DEF_CAN_FIRE___me_check_18;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_19, 1u);
      backing.DEF_CAN_FIRE___me_check_19 = DEF_CAN_FIRE___me_check_19;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_20, 1u);
      backing.DEF_CAN_FIRE___me_check_20 = DEF_CAN_FIRE___me_check_20;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_21, 1u);
      backing.DEF_CAN_FIRE___me_check_21 = DEF_CAN_FIRE___me_check_21;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_channels_0_getNoCPacket_get, 1u);
      backing.DEF_CAN_FIRE_channels_0_getNoCPacket_get = DEF_CAN_FIRE_channels_0_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_channels_0_putNoCPacket_put, 1u);
      backing.DEF_CAN_FIRE_channels_0_putNoCPacket_put = DEF_CAN_FIRE_channels_0_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_channels_1_getNoCPacket_get, 1u);
      backing.DEF_CAN_FIRE_channels_1_getNoCPacket_get = DEF_CAN_FIRE_channels_1_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_channels_1_putNoCPacket_put, 1u);
      backing.DEF_CAN_FIRE_channels_1_putNoCPacket_put = DEF_CAN_FIRE_channels_1_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_channels_2_getNoCPacket_get, 1u);
      backing.DEF_CAN_FIRE_channels_2_getNoCPacket_get = DEF_CAN_FIRE_channels_2_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_channels_2_putNoCPacket_put, 1u);
      backing.DEF_CAN_FIRE_channels_2_putNoCPacket_put = DEF_CAN_FIRE_channels_2_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_channels_3_getNoCPacket_get, 1u);
      backing.DEF_CAN_FIRE_channels_3_getNoCPacket_get = DEF_CAN_FIRE_channels_3_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_channels_3_putNoCPacket_put, 1u);
      backing.DEF_CAN_FIRE_channels_3_putNoCPacket_put = DEF_CAN_FIRE_channels_3_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_channels_4_getNoCPacket_get, 1u);
      backing.DEF_CAN_FIRE_channels_4_getNoCPacket_get = DEF_CAN_FIRE_channels_4_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_channels_4_putNoCPacket_put, 1u);
      backing.DEF_CAN_FIRE_channels_4_putNoCPacket_put = DEF_CAN_FIRE_channels_4_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_channelInQ_0_dequeue, 1u);
      backing.DEF_WILL_FIRE_RL_channelInQ_0_dequeue = DEF_WILL_FIRE_RL_channelInQ_0_dequeue;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_channelInQ_0_enqueue, 1u);
      backing.DEF_WILL_FIRE_RL_channelInQ_0_enqueue = DEF_WILL_FIRE_RL_channelInQ_0_enqueue;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_channelInQ_1_dequeue, 1u);
      backing.DEF_WILL_FIRE_RL_channelInQ_1_dequeue = DEF_WILL_FIRE_RL_channelInQ_1_dequeue;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_channelInQ_1_enqueue, 1u);
      backing.DEF_WILL_FIRE_RL_channelInQ_1_enqueue = DEF_WILL_FIRE_RL_channelInQ_1_enqueue;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_channelInQ_2_dequeue, 1u);
      backing.DEF_WILL_FIRE_RL_channelInQ_2_dequeue = DEF_WILL_FIRE_RL_channelInQ_2_dequeue;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_channelInQ_2_enqueue, 1u);
      backing.DEF_WILL_FIRE_RL_channelInQ_2_enqueue = DEF_WILL_FIRE_RL_channelInQ_2_enqueue;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_channelInQ_3_dequeue, 1u);
      backing.DEF_WILL_FIRE_RL_channelInQ_3_dequeue = DEF_WILL_FIRE_RL_channelInQ_3_dequeue;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_channelInQ_3_enqueue, 1u);
      backing.DEF_WILL_FIRE_RL_channelInQ_3_enqueue = DEF_WILL_FIRE_RL_channelInQ_3_enqueue;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_channelInQ_4_dequeue, 1u);
      backing.DEF_WILL_FIRE_RL_channelInQ_4_dequeue = DEF_WILL_FIRE_RL_channelInQ_4_dequeue;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_channelInQ_4_enqueue, 1u);
      backing.DEF_WILL_FIRE_RL_channelInQ_4_enqueue = DEF_WILL_FIRE_RL_channelInQ_4_enqueue;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_inputArbitratei, 1u);
      backing.DEF_WILL_FIRE_RL_inputArbitratei = DEF_WILL_FIRE_RL_inputArbitratei;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_inputArbitratei_1, 1u);
      backing.DEF_WILL_FIRE_RL_inputArbitratei_1 = DEF_WILL_FIRE_RL_inputArbitratei_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_inputArbitratei_2, 1u);
      backing.DEF_WILL_FIRE_RL_inputArbitratei_2 = DEF_WILL_FIRE_RL_inputArbitratei_2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_inputArbitratei_3, 1u);
      backing.DEF_WILL_FIRE_RL_inputArbitratei_3 = DEF_WILL_FIRE_RL_inputArbitratei_3;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_inputArbitratei_4, 1u);
      backing.DEF_WILL_FIRE_RL_inputArbitratei_4 = DEF_WILL_FIRE_RL_inputArbitratei_4;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_inputChannelArbiterRequest, 1u);
      backing.DEF_WILL_FIRE_RL_inputChannelArbiterRequest = DEF_WILL_FIRE_RL_inputChannelArbiterRequest;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_inputChannelArbiter_every, 1u);
      backing.DEF_WILL_FIRE_RL_inputChannelArbiter_every = DEF_WILL_FIRE_RL_inputChannelArbiter_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_outputChannelArbiter_every, 1u);
      backing.DEF_WILL_FIRE_RL_outputChannelArbiter_every = DEF_WILL_FIRE_RL_outputChannelArbiter_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_routePacketEast, 1u);
      backing.DEF_WILL_FIRE_RL_routePacketEast = DEF_WILL_FIRE_RL_routePacketEast;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_routePacketHome, 1u);
      backing.DEF_WILL_FIRE_RL_routePacketHome = DEF_WILL_FIRE_RL_routePacketHome;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_routePacketNorth, 1u);
      backing.DEF_WILL_FIRE_RL_routePacketNorth = DEF_WILL_FIRE_RL_routePacketNorth;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_routePacketSouth, 1u);
      backing.DEF_WILL_FIRE_RL_routePacketSouth = DEF_WILL_FIRE_RL_routePacketSouth;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_routePacketWest, 1u);
      backing.DEF_WILL_FIRE_RL_routePacketWest = DEF_WILL_FIRE_RL_routePacketWest;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_13, 1u);
      backing.DEF_WILL_FIRE___me_check_13 = DEF_WILL_FIRE___me_check_13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_18, 1u);
      backing.DEF_WILL_FIRE___me_check_18 = DEF_WILL_FIRE___me_check_18;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_19, 1u);
      backing.DEF_WILL_FIRE___me_check_19 = DEF_WILL_FIRE___me_check_19;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_20, 1u);
      backing.DEF_WILL_FIRE___me_check_20 = DEF_WILL_FIRE___me_check_20;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_21, 1u);
      backing.DEF_WILL_FIRE___me_check_21 = DEF_WILL_FIRE___me_check_21;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_channels_0_getNoCPacket_get, 1u);
      backing.DEF_WILL_FIRE_channels_0_getNoCPacket_get = DEF_WILL_FIRE_channels_0_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_channels_0_putNoCPacket_put, 1u);
      backing.DEF_WILL_FIRE_channels_0_putNoCPacket_put = DEF_WILL_FIRE_channels_0_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_channels_1_getNoCPacket_get, 1u);
      backing.DEF_WILL_FIRE_channels_1_getNoCPacket_get = DEF_WILL_FIRE_channels_1_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_channels_1_putNoCPacket_put, 1u);
      backing.DEF_WILL_FIRE_channels_1_putNoCPacket_put = DEF_WILL_FIRE_channels_1_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_channels_2_getNoCPacket_get, 1u);
      backing.DEF_WILL_FIRE_channels_2_getNoCPacket_get = DEF_WILL_FIRE_channels_2_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_channels_2_putNoCPacket_put, 1u);
      backing.DEF_WILL_FIRE_channels_2_putNoCPacket_put = DEF_WILL_FIRE_channels_2_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_channels_3_getNoCPacket_get, 1u);
      backing.DEF_WILL_FIRE_channels_3_getNoCPacket_get = DEF_WILL_FIRE_channels_3_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_channels_3_putNoCPacket_put, 1u);
      backing.DEF_WILL_FIRE_channels_3_putNoCPacket_put = DEF_WILL_FIRE_channels_3_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_channels_4_getNoCPacket_get, 1u);
      backing.DEF_WILL_FIRE_channels_4_getNoCPacket_get = DEF_WILL_FIRE_channels_4_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_channels_4_putNoCPacket_put, 1u);
      backing.DEF_WILL_FIRE_channels_4_putNoCPacket_put = DEF_WILL_FIRE_channels_4_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_DONTCARE___d680, 48u);
      backing.DEF__0_CONCAT_DONTCARE___d680 = DEF__0_CONCAT_DONTCARE___d680;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_routePacketQ_first__14___d462, 48u);
      backing.DEF__1_CONCAT_routePacketQ_first__14___d462 = DEF__1_CONCAT_routePacketQ_first__14___d462;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_0_enqw_wget____d7, 47u);
      backing.DEF_channelInQ_0_enqw_wget____d7 = DEF_channelInQ_0_enqw_wget____d7;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_0_enqw_whas____d1, 1u);
      backing.DEF_channelInQ_0_enqw_whas____d1 = DEF_channelInQ_0_enqw_whas____d1;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_0_ff_i_notEmpty____d4, 1u);
      backing.DEF_channelInQ_0_ff_i_notEmpty____d4 = DEF_channelInQ_0_ff_i_notEmpty____d4;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_1_enqw_wget____d15, 47u);
      backing.DEF_channelInQ_1_enqw_wget____d15 = DEF_channelInQ_1_enqw_wget____d15;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_1_enqw_whas____d9, 1u);
      backing.DEF_channelInQ_1_enqw_whas____d9 = DEF_channelInQ_1_enqw_whas____d9;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_1_ff_i_notEmpty____d12, 1u);
      backing.DEF_channelInQ_1_ff_i_notEmpty____d12 = DEF_channelInQ_1_ff_i_notEmpty____d12;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_2_enqw_wget____d23, 47u);
      backing.DEF_channelInQ_2_enqw_wget____d23 = DEF_channelInQ_2_enqw_wget____d23;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_2_enqw_whas____d17, 1u);
      backing.DEF_channelInQ_2_enqw_whas____d17 = DEF_channelInQ_2_enqw_whas____d17;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_2_ff_i_notEmpty____d20, 1u);
      backing.DEF_channelInQ_2_ff_i_notEmpty____d20 = DEF_channelInQ_2_ff_i_notEmpty____d20;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_3_enqw_wget____d31, 47u);
      backing.DEF_channelInQ_3_enqw_wget____d31 = DEF_channelInQ_3_enqw_wget____d31;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_3_enqw_whas____d25, 1u);
      backing.DEF_channelInQ_3_enqw_whas____d25 = DEF_channelInQ_3_enqw_whas____d25;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_3_ff_i_notEmpty____d28, 1u);
      backing.DEF_channelInQ_3_ff_i_notEmpty____d28 = DEF_channelInQ_3_ff_i_notEmpty____d28;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_4_enqw_wget____d39, 47u);
      backing.DEF_channelInQ_4_enqw_wget____d39 = DEF_channelInQ_4_enqw_wget____d39;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_4_enqw_whas____d33, 1u);
      backing.DEF_channelInQ_4_enqw_whas____d33 = DEF_channelInQ_4_enqw_whas____d33;
      vcd_write_val(sim_hdl, num++, DEF_channelInQ_4_ff_i_notEmpty____d36, 1u);
      backing.DEF_channelInQ_4_ff_i_notEmpty____d36 = DEF_channelInQ_4_ff_i_notEmpty____d36;
      vcd_write_val(sim_hdl, num++, DEF_channelOutQ_0_rv_port1__read____d681, 48u);
      backing.DEF_channelOutQ_0_rv_port1__read____d681 = DEF_channelOutQ_0_rv_port1__read____d681;
      vcd_write_val(sim_hdl, num++, DEF_channelOutQ_1_rv_port1__read____d682, 48u);
      backing.DEF_channelOutQ_1_rv_port1__read____d682 = DEF_channelOutQ_1_rv_port1__read____d682;
      vcd_write_val(sim_hdl, num++, DEF_channelOutQ_2_rv_port1__read____d683, 48u);
      backing.DEF_channelOutQ_2_rv_port1__read____d683 = DEF_channelOutQ_2_rv_port1__read____d683;
      vcd_write_val(sim_hdl, num++, DEF_channelOutQ_3_rv_port1__read____d684, 48u);
      backing.DEF_channelOutQ_3_rv_port1__read____d684 = DEF_channelOutQ_3_rv_port1__read____d684;
      vcd_write_val(sim_hdl, num++, DEF_channelOutQ_4_rv_port1__read____d685, 48u);
      backing.DEF_channelOutQ_4_rv_port1__read____d685 = DEF_channelOutQ_4_rv_port1__read____d685;
      vcd_write_val(sim_hdl, num++, DEF_routePacketQ_first____d314, 47u);
      backing.DEF_routePacketQ_first____d314 = DEF_routePacketQ_first____d314;
      vcd_write_val(sim_hdl, num++, PORT_EN_channels_0_getNoCPacket_get, 1u);
      backing.PORT_EN_channels_0_getNoCPacket_get = PORT_EN_channels_0_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_EN_channels_0_putNoCPacket_put, 1u);
      backing.PORT_EN_channels_0_putNoCPacket_put = PORT_EN_channels_0_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_channels_1_getNoCPacket_get, 1u);
      backing.PORT_EN_channels_1_getNoCPacket_get = PORT_EN_channels_1_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_EN_channels_1_putNoCPacket_put, 1u);
      backing.PORT_EN_channels_1_putNoCPacket_put = PORT_EN_channels_1_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_channels_2_getNoCPacket_get, 1u);
      backing.PORT_EN_channels_2_getNoCPacket_get = PORT_EN_channels_2_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_EN_channels_2_putNoCPacket_put, 1u);
      backing.PORT_EN_channels_2_putNoCPacket_put = PORT_EN_channels_2_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_channels_3_getNoCPacket_get, 1u);
      backing.PORT_EN_channels_3_getNoCPacket_get = PORT_EN_channels_3_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_EN_channels_3_putNoCPacket_put, 1u);
      backing.PORT_EN_channels_3_putNoCPacket_put = PORT_EN_channels_3_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_channels_4_getNoCPacket_get, 1u);
      backing.PORT_EN_channels_4_getNoCPacket_get = PORT_EN_channels_4_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_EN_channels_4_putNoCPacket_put, 1u);
      backing.PORT_EN_channels_4_putNoCPacket_put = PORT_EN_channels_4_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_channels_0_getNoCPacket_get, 1u);
      backing.PORT_RDY_channels_0_getNoCPacket_get = PORT_RDY_channels_0_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_channels_0_putNoCPacket_put, 1u);
      backing.PORT_RDY_channels_0_putNoCPacket_put = PORT_RDY_channels_0_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_channels_1_getNoCPacket_get, 1u);
      backing.PORT_RDY_channels_1_getNoCPacket_get = PORT_RDY_channels_1_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_channels_1_putNoCPacket_put, 1u);
      backing.PORT_RDY_channels_1_putNoCPacket_put = PORT_RDY_channels_1_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_channels_2_getNoCPacket_get, 1u);
      backing.PORT_RDY_channels_2_getNoCPacket_get = PORT_RDY_channels_2_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_channels_2_putNoCPacket_put, 1u);
      backing.PORT_RDY_channels_2_putNoCPacket_put = PORT_RDY_channels_2_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_channels_3_getNoCPacket_get, 1u);
      backing.PORT_RDY_channels_3_getNoCPacket_get = PORT_RDY_channels_3_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_channels_3_putNoCPacket_put, 1u);
      backing.PORT_RDY_channels_3_putNoCPacket_put = PORT_RDY_channels_3_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_channels_4_getNoCPacket_get, 1u);
      backing.PORT_RDY_channels_4_getNoCPacket_get = PORT_RDY_channels_4_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_channels_4_putNoCPacket_put, 1u);
      backing.PORT_RDY_channels_4_putNoCPacket_put = PORT_RDY_channels_4_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_channels_0_getNoCPacket_get, 47u);
      backing.PORT_channels_0_getNoCPacket_get = PORT_channels_0_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_channels_0_putNoCPacket_put, 47u);
      backing.PORT_channels_0_putNoCPacket_put = PORT_channels_0_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_channels_1_getNoCPacket_get, 47u);
      backing.PORT_channels_1_getNoCPacket_get = PORT_channels_1_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_channels_1_putNoCPacket_put, 47u);
      backing.PORT_channels_1_putNoCPacket_put = PORT_channels_1_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_channels_2_getNoCPacket_get, 47u);
      backing.PORT_channels_2_getNoCPacket_get = PORT_channels_2_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_channels_2_putNoCPacket_put, 47u);
      backing.PORT_channels_2_putNoCPacket_put = PORT_channels_2_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_channels_3_getNoCPacket_get, 47u);
      backing.PORT_channels_3_getNoCPacket_get = PORT_channels_3_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_channels_3_putNoCPacket_put, 47u);
      backing.PORT_channels_3_putNoCPacket_put = PORT_channels_3_putNoCPacket_put;
      vcd_write_val(sim_hdl, num++, PORT_channels_4_getNoCPacket_get, 47u);
      backing.PORT_channels_4_getNoCPacket_get = PORT_channels_4_getNoCPacket_get;
      vcd_write_val(sim_hdl, num++, PORT_channels_4_putNoCPacket_put, 47u);
      backing.PORT_channels_4_putNoCPacket_put = PORT_channels_4_putNoCPacket_put;
    }
}

void MOD_mkNode::vcd_prims(tVCDDumpType dt, MOD_mkNode &backing)
{
  INST_channelInQ_0_dequeueing.dump_VCD(dt, backing.INST_channelInQ_0_dequeueing);
  INST_channelInQ_0_enqw.dump_VCD(dt, backing.INST_channelInQ_0_enqw);
  INST_channelInQ_0_ff.dump_VCD(dt, backing.INST_channelInQ_0_ff);
  INST_channelInQ_0_firstValid.dump_VCD(dt, backing.INST_channelInQ_0_firstValid);
  INST_channelInQ_1_dequeueing.dump_VCD(dt, backing.INST_channelInQ_1_dequeueing);
  INST_channelInQ_1_enqw.dump_VCD(dt, backing.INST_channelInQ_1_enqw);
  INST_channelInQ_1_ff.dump_VCD(dt, backing.INST_channelInQ_1_ff);
  INST_channelInQ_1_firstValid.dump_VCD(dt, backing.INST_channelInQ_1_firstValid);
  INST_channelInQ_2_dequeueing.dump_VCD(dt, backing.INST_channelInQ_2_dequeueing);
  INST_channelInQ_2_enqw.dump_VCD(dt, backing.INST_channelInQ_2_enqw);
  INST_channelInQ_2_ff.dump_VCD(dt, backing.INST_channelInQ_2_ff);
  INST_channelInQ_2_firstValid.dump_VCD(dt, backing.INST_channelInQ_2_firstValid);
  INST_channelInQ_3_dequeueing.dump_VCD(dt, backing.INST_channelInQ_3_dequeueing);
  INST_channelInQ_3_enqw.dump_VCD(dt, backing.INST_channelInQ_3_enqw);
  INST_channelInQ_3_ff.dump_VCD(dt, backing.INST_channelInQ_3_ff);
  INST_channelInQ_3_firstValid.dump_VCD(dt, backing.INST_channelInQ_3_firstValid);
  INST_channelInQ_4_dequeueing.dump_VCD(dt, backing.INST_channelInQ_4_dequeueing);
  INST_channelInQ_4_enqw.dump_VCD(dt, backing.INST_channelInQ_4_enqw);
  INST_channelInQ_4_ff.dump_VCD(dt, backing.INST_channelInQ_4_ff);
  INST_channelInQ_4_firstValid.dump_VCD(dt, backing.INST_channelInQ_4_firstValid);
  INST_channelOutQ_0_rv.dump_VCD(dt, backing.INST_channelOutQ_0_rv);
  INST_channelOutQ_1_rv.dump_VCD(dt, backing.INST_channelOutQ_1_rv);
  INST_channelOutQ_2_rv.dump_VCD(dt, backing.INST_channelOutQ_2_rv);
  INST_channelOutQ_3_rv.dump_VCD(dt, backing.INST_channelOutQ_3_rv);
  INST_channelOutQ_4_rv.dump_VCD(dt, backing.INST_channelOutQ_4_rv);
  INST_inputChannelArbiter_grant_id_wire.dump_VCD(dt, backing.INST_inputChannelArbiter_grant_id_wire);
  INST_inputChannelArbiter_grant_vector.dump_VCD(dt, backing.INST_inputChannelArbiter_grant_vector);
  INST_inputChannelArbiter_priority_vector.dump_VCD(dt,
						    backing.INST_inputChannelArbiter_priority_vector);
  INST_inputChannelArbiter_request_vector_0.dump_VCD(dt,
						     backing.INST_inputChannelArbiter_request_vector_0);
  INST_inputChannelArbiter_request_vector_1.dump_VCD(dt,
						     backing.INST_inputChannelArbiter_request_vector_1);
  INST_inputChannelArbiter_request_vector_2.dump_VCD(dt,
						     backing.INST_inputChannelArbiter_request_vector_2);
  INST_inputChannelArbiter_request_vector_3.dump_VCD(dt,
						     backing.INST_inputChannelArbiter_request_vector_3);
  INST_inputChannelArbiter_request_vector_4.dump_VCD(dt,
						     backing.INST_inputChannelArbiter_request_vector_4);
  INST_outputChannelArbiter_grant_id_wire.dump_VCD(dt,
						   backing.INST_outputChannelArbiter_grant_id_wire);
  INST_outputChannelArbiter_grant_vector.dump_VCD(dt, backing.INST_outputChannelArbiter_grant_vector);
  INST_outputChannelArbiter_priority_vector.dump_VCD(dt,
						     backing.INST_outputChannelArbiter_priority_vector);
  INST_outputChannelArbiter_request_vector_0.dump_VCD(dt,
						      backing.INST_outputChannelArbiter_request_vector_0);
  INST_outputChannelArbiter_request_vector_1.dump_VCD(dt,
						      backing.INST_outputChannelArbiter_request_vector_1);
  INST_outputChannelArbiter_request_vector_2.dump_VCD(dt,
						      backing.INST_outputChannelArbiter_request_vector_2);
  INST_outputChannelArbiter_request_vector_3.dump_VCD(dt,
						      backing.INST_outputChannelArbiter_request_vector_3);
  INST_outputChannelArbiter_request_vector_4.dump_VCD(dt,
						      backing.INST_outputChannelArbiter_request_vector_4);
  INST_routePacketQ.dump_VCD(dt, backing.INST_routePacketQ);
}
