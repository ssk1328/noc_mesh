/*
 * Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
 * 
 * On Sat Jun 28 05:29:27 IST 2014
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkPGEmulate_h__
#define __mkPGEmulate_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"

namespace bluesim
{
  
  /* Class declaration for the mkPGEmulate module */
  class MOD_mkPGEmulate : public Module {
   
   /* Clock handles */
   private:
    tClock __clk_handle_0;
   
   /* Clock gate handles */
   public:
    tUInt8 *clk_gate[0];
   
   /* Instantiation parameters */
   public:
    tUInt8 const PARAM_thisProcID;
   
   /* Module state */
   public:
    MOD_Reg<tUInt32> INST_countLinksL2P;
    MOD_Reg<tUInt32> INST_countLinksP2L;
    MOD_Wire<tUInt8> INST_netConnectPacketInQ_pw_deq;
    MOD_Wire<tUInt64> INST_netConnectPacketInQ_rw_enq;
    MOD_Reg<tUInt64> INST_netConnectPacketInQ_taggedReg;
    MOD_Wire<tUInt8> INST_netConnectPacketOutQ_pw_deq;
    MOD_Wire<tUInt64> INST_netConnectPacketOutQ_rw_enq;
    MOD_Reg<tUInt64> INST_netConnectPacketOutQ_taggedReg;
    MOD_Wire<tUInt8> INST_nocPacketInQ_pw_deq;
    MOD_Wire<tUInt64> INST_nocPacketInQ_rw_enq;
    MOD_Reg<tUInt64> INST_nocPacketInQ_taggedReg;
    MOD_Wire<tUInt8> INST_nocPacketOutQArbiter_grant_id_wire;
    MOD_Wire<tUInt8> INST_nocPacketOutQArbiter_grant_vector;
    MOD_Reg<tUInt8> INST_nocPacketOutQArbiter_priority_vector;
    MOD_Wire<tUInt8> INST_nocPacketOutQArbiter_request_vector;
    MOD_Wire<tUInt8> INST_nocPacketOutQArbiter_request_vector_1;
    MOD_Wire<tUInt8> INST_nocPacketOutQ_pw_deq;
    MOD_Wire<tUInt64> INST_nocPacketOutQ_rw_enq;
    MOD_Reg<tUInt64> INST_nocPacketOutQ_taggedReg;
    MOD_Wire<tUInt8> INST_nocPacketTempQ_0_pw_deq;
    MOD_Wire<tUInt64> INST_nocPacketTempQ_0_rw_enq;
    MOD_Reg<tUInt64> INST_nocPacketTempQ_0_taggedReg;
    MOD_Wire<tUInt8> INST_nocPacketTempQ_1_pw_deq;
    MOD_Wire<tUInt64> INST_nocPacketTempQ_1_rw_enq;
    MOD_Reg<tUInt64> INST_nocPacketTempQ_1_taggedReg;
   
   /* Constructor */
   public:
    MOD_mkPGEmulate(char const *name, Module *parent, tUInt8 ARG_thisProcID);
   
   /* Symbol init methods */
   private:
    void init_symbols_0();
   
   /* Reset signal definitions */
   private:
    tUInt8 PORT_RST_N;
   
   /* Port definitions */
   public:
    tUInt8 PORT_EN_putNoCPacket_put;
    tUInt8 PORT_EN_getNoCPacket_get;
    tUInt8 PORT_EN_putNetConnectPacket_put;
    tUInt8 PORT_EN_getNetConnectPacket_get;
    tUInt64 PORT_putNoCPacket_put;
    tUInt64 PORT_putNetConnectPacket_put;
    tUInt8 PORT_RDY_putNoCPacket_put;
    tUInt64 PORT_getNoCPacket_get;
    tUInt8 PORT_RDY_getNoCPacket_get;
    tUInt8 PORT_RDY_putNetConnectPacket_put;
    tUInt64 PORT_getNetConnectPacket_get;
    tUInt8 PORT_RDY_getNetConnectPacket_get;
   
   /* Publicly accessible definitions */
   public:
    tUInt8 DEF_WILL_FIRE_getNoCPacket_get;
    tUInt8 DEF_WILL_FIRE_putNoCPacket_put;
    tUInt8 DEF_CAN_FIRE_getNoCPacket_get;
    tUInt8 DEF_CAN_FIRE_putNoCPacket_put;
    tUInt8 DEF_WILL_FIRE___me_check_18;
    tUInt8 DEF_CAN_FIRE___me_check_18;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketOutQ_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketOutQ_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketOutQ_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketOutQ_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketInQ_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketInQ_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketInQ_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketInQ_rule_enq;
    tUInt8 DEF_WILL_FIRE_getNetConnectPacket_get;
    tUInt8 DEF_WILL_FIRE_putNetConnectPacket_put;
    tUInt8 DEF_WILL_FIRE_RL_getArbiterRespToken_1;
    tUInt8 DEF_CAN_FIRE_RL_getArbiterRespToken_1;
    tUInt8 DEF_WILL_FIRE_RL_getArbiterRespToken;
    tUInt8 DEF_CAN_FIRE_RL_getArbiterRespToken;
    tUInt8 DEF_WILL_FIRE_RL_putArbiterReqTokens;
    tUInt8 DEF_CAN_FIRE_RL_putArbiterReqTokens;
    tUInt8 DEF_WILL_FIRE_RL_fromNetworkBroadcast;
    tUInt8 DEF_CAN_FIRE_RL_fromNetworkBroadcast;
    tUInt8 DEF_WILL_FIRE_RL_fromNetConnectBroadcast;
    tUInt8 DEF_CAN_FIRE_RL_fromNetConnectBroadcast;
    tUInt8 DEF_WILL_FIRE_RL_fromNetworkP2P;
    tUInt8 DEF_CAN_FIRE_RL_fromNetworkP2P;
    tUInt8 DEF_WILL_FIRE_RL_fromNetConnectP2P;
    tUInt8 DEF_CAN_FIRE_RL_fromNetConnectP2P;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketTempQ_1_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketTempQ_1_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketTempQ_1_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketTempQ_1_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketTempQ_0_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketTempQ_0_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketTempQ_0_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketTempQ_0_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketOutQArbiter_every;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketOutQArbiter_every;
    tUInt8 DEF_WILL_FIRE_RL_netConnectPacketOutQ_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_netConnectPacketOutQ_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_netConnectPacketOutQ_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_netConnectPacketOutQ_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_netConnectPacketInQ_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_netConnectPacketInQ_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_netConnectPacketInQ_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_netConnectPacketInQ_rule_enq;
    tUInt8 DEF_nocPacketOutQ_taggedReg_05_BIT_51___d525;
    tUInt8 DEF_nocPacketOutQ_rw_enq_whas____d528;
    tUInt8 DEF_nocPacketInQ_taggedReg_87_BIT_51___d520;
    tUInt8 DEF_CAN_FIRE_getNetConnectPacket_get;
    tUInt8 DEF_netConnectPacketOutQ_taggedReg_93_BIT_51___d524;
    tUInt8 DEF_netConnectPacketOutQ_rw_enq_whas____d527;
    tUInt8 DEF_CAN_FIRE_putNetConnectPacket_put;
    tUInt8 DEF_netConnectPacketInQ_taggedReg_7_BIT_51___d517;
    tUInt64 DEF_nocPacketTempQ_1_taggedReg___d568;
    tUInt64 DEF_nocPacketTempQ_0_taggedReg___d567;
    tUInt64 DEF_netConnectPacketOutQ_taggedReg___d495;
    tUInt64 DEF_netConnectPacketInQ_taggedReg___d566;
    tUInt64 DEF_nocPacketOutQ_taggedReg___d496;
    tUInt64 DEF_nocPacketInQ_taggedReg___d565;
    tUInt64 DEF_netConnectPacketInQ_rw_enq_wget____d498;
    tUInt64 DEF_nocPacketInQ_rw_enq_wget____d499;
    tUInt8 DEF_nocPacketTempQ_1_rw_enq_whas____d533;
    tUInt8 DEF_nocPacketTempQ_0_rw_enq_whas____d532;
    tUInt8 DEF_netConnectPacketInQ_rw_enq_whas____d526;
    tUInt8 DEF_nocPacketInQ_rw_enq_whas____d477;
    tUInt8 DEF_nocPacketTempQ_1_taggedReg_90_BIT_51___d523;
    tUInt8 DEF_nocPacketInQ_taggedReg_87_BIT_1___d521;
    tUInt8 DEF_nocPacketTempQ_0_taggedReg_0_BIT_51___d519;
    tUInt8 DEF_nocPacketInQ_rw_enq_wget__8_BIT_1___d510;
    tUInt8 DEF_IF_nocPacketInQ_rw_enq_whas__4_THEN_nocPacketI_ETC___d486;
    tUInt8 DEF_nocPacketTempQ_1_taggedReg_90_BIT_51_91_OR_noc_ETC___d404;
    tUInt8 DEF_nocPacketTempQ_0_taggedReg_0_BIT_51_1_OR_nocPa_ETC___d403;
   
   /* Local definitions */
   private:
    tUInt64 DEF_nocPacketTempQ_1_rw_enq_wget____d502;
    tUInt64 DEF_nocPacketTempQ_0_rw_enq_wget____d501;
    tUInt64 DEF_netConnectPacketOutQ_rw_enq_wget____d478;
    tUInt64 DEF_nocPacketOutQ_rw_enq_wget____d500;
    tUInt8 DEF_nocPacketInQ_taggedReg_87_BITS_42_TO_39___d599;
    tUInt8 DEF_nocPacketInQ_taggedReg_87_BITS_38_TO_35___d600;
    tUInt8 DEF_netConnectPacketInQ_taggedReg_7_BITS_42_TO_39___d586;
    tUInt8 DEF_netConnectPacketInQ_taggedReg_7_BITS_38_TO_35___d585;
    tUInt8 DEF_x_wget_payload_src__h272;
    tUInt8 DEF_x_wget_payload_dest__h273;
    tUInt8 DEF_x_wget_payload_src__h900;
    tUInt8 DEF_x_wget_payload_dest__h901;
    tUInt8 DEF_nocPacketInQ_taggedReg_87_BIT_0___d522;
    tUInt8 DEF_nocPacketInQ_rw_enq_wget__8_BIT_0___d511;
    tUInt64 DEF_IF_nocPacketInQ_rw_enq_whas__4_THEN_nocPacketI_ETC___d579;
    tUInt64 DEF_IF_netConnectPacketInQ_rw_enq_whas_THEN_netCon_ETC___d504;
    tUInt64 DEF_DONTCARE_CONCAT_DONTCARE_CONCAT_DONTCARE_CONCA_ETC___d485;
    tUInt8 DEF_DONTCARE_CONCAT_DONTCARE___d487;
    tUInt8 DEF_DONTCARE_CONCAT_DONTCARE___d482;
    tUInt8 DEF_IF_netConnectPacketInQ_rw_enq_whas_THEN_netCon_ETC___d493;
    tUInt8 DEF_IF_netConnectPacketInQ_rw_enq_whas_THEN_netCon_ETC___d503;
    tUInt8 DEF_IF_netConnectPacketInQ_rw_enq_whas_THEN_netCon_ETC___d489;
    tUInt8 DEF_IF_nocPacketInQ_rw_enq_whas__4_THEN_nocPacketI_ETC___d492;
    tUInt8 DEF_IF_nocPacketInQ_rw_enq_whas__4_THEN_nocPacketI_ETC___d505;
    tUInt8 DEF_IF_nocPacketInQ_rw_enq_whas__4_THEN_nocPacketI_ETC___d490;
    tUInt8 DEF_NOT_nocPacketInQ_taggedReg_87_BIT_0_07___d479;
    tUInt8 DEF_IF_nocPacketInQ_rw_enq_whas__4_THEN_NOT_nocPac_ETC___d580;
    tUInt8 DEF_IF_nocPacketInQ_rw_enq_whas__4_THEN_nocPacketI_ETC___d322;
    tUInt64 DEF__0_CONCAT_DONTCARE___d497;
    tUInt64 DEF_IF_nocPacketInQ_rw_enq_whas__4_THEN_nocPacketI_ETC___d506;
   
   /* Rules */
   public:
    void RL_netConnectPacketInQ_rule_enq();
    void RL_netConnectPacketInQ_rule_deq();
    void RL_netConnectPacketOutQ_rule_enq();
    void RL_netConnectPacketOutQ_rule_deq();
    void RL_nocPacketInQ_rule_enq();
    void RL_nocPacketInQ_rule_deq();
    void RL_nocPacketOutQ_rule_enq();
    void RL_nocPacketOutQ_rule_deq();
    void RL_nocPacketOutQArbiter_every();
    void RL_nocPacketTempQ_0_rule_enq();
    void RL_nocPacketTempQ_0_rule_deq();
    void RL_nocPacketTempQ_1_rule_enq();
    void RL_nocPacketTempQ_1_rule_deq();
    void RL_fromNetConnectP2P();
    void RL_fromNetworkP2P();
    void RL_fromNetConnectBroadcast();
    void RL_fromNetworkBroadcast();
    void RL_putArbiterReqTokens();
    void RL_getArbiterRespToken();
    void RL_getArbiterRespToken_1();
    void __me_check_18();
   
   /* Methods */
   public:
    void METH_putNetConnectPacket_put(tUInt64 ARG_putNetConnectPacket_put);
    tUInt8 METH_RDY_putNetConnectPacket_put();
    tUInt64 METH_getNetConnectPacket_get();
    tUInt8 METH_RDY_getNetConnectPacket_get();
    void METH_putNoCPacket_put(tUInt64 ARG_putNoCPacket_put);
    tUInt8 METH_RDY_putNoCPacket_put();
    tUInt64 METH_getNoCPacket_get();
    tUInt8 METH_RDY_getNoCPacket_get();
   
   /* Reset routines */
   public:
    void reset_RST_N(tUInt8 ARG_rst_in);
   
   /* Static handles to reset routines */
   public:
   
   /* Pointers to reset fns in parent module for asserting output resets */
   private:
   
   /* Functions for the parent module to register its reset fns */
   public:
   
   /* Functions to set the elaborated clock id */
   public:
    void set_clk_0(char const *s);
   
   /* State dumping routine */
   public:
    void dump_state(unsigned int indent);
   
   /* VCD dumping routines */
   public:
    unsigned int dump_VCD_defs(unsigned int levels);
    void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkPGEmulate &backing);
    void vcd_defs(tVCDDumpType dt, MOD_mkPGEmulate &backing);
    void vcd_prims(tVCDDumpType dt, MOD_mkPGEmulate &backing);
  };
}

#endif /* ifndef __mkPGEmulate_h__ */
