/*
 * Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
 * 
 * On Sat Jun 28 05:29:27 IST 2014
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkNetConnect_h__
#define __mkNetConnect_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"

namespace bluesim
{
  
  /* Class declaration for the mkNetConnect module */
  class MOD_mkNetConnect : public Module {
   
   /* Clock handles */
   private:
    tClock __clk_handle_0;
   
   /* Clock gate handles */
   public:
    tUInt8 *clk_gate[0];
   
   /* Instantiation parameters */
   public:
   
   /* Module state */
   public:
    MOD_Wire<tUInt8> INST_dataPacketInQ_pw_deq;
    MOD_Wire<tUInt64> INST_dataPacketInQ_rw_enq;
    MOD_Reg<tUInt64> INST_dataPacketInQ_taggedReg;
    MOD_Wire<tUInt8> INST_dataPacketOutQ_pw_deq;
    MOD_Wire<tUInt64> INST_dataPacketOutQ_rw_enq;
    MOD_Reg<tUInt64> INST_dataPacketOutQ_taggedReg;
    MOD_Wire<tUInt8> INST_nocPacketInQ_pw_deq;
    MOD_Wire<tUInt64> INST_nocPacketInQ_rw_enq;
    MOD_Reg<tUInt64> INST_nocPacketInQ_taggedReg;
    MOD_Wire<tUInt8> INST_nocPacketOutQ_pw_deq;
    MOD_Wire<tUInt64> INST_nocPacketOutQ_rw_enq;
    MOD_Reg<tUInt64> INST_nocPacketOutQ_taggedReg;
   
   /* Constructor */
   public:
    MOD_mkNetConnect(char const *name, Module *parent);
   
   /* Symbol init methods */
   private:
    void init_symbols_0();
   
   /* Reset signal definitions */
   private:
    tUInt8 PORT_RST_N;
   
   /* Port definitions */
   public:
    tUInt8 PORT_EN_putNoCPacket_put;
    tUInt8 PORT_EN_getNoCPacket_get;
    tUInt8 PORT_EN_putDataPacket_put;
    tUInt8 PORT_EN_getDataPacket_get;
    tUInt64 PORT_putNoCPacket_put;
    tUInt64 PORT_putDataPacket_put;
    tUInt8 PORT_RDY_putNoCPacket_put;
    tUInt64 PORT_getNoCPacket_get;
    tUInt8 PORT_RDY_getNoCPacket_get;
    tUInt8 PORT_RDY_putDataPacket_put;
    tUInt64 PORT_getDataPacket_get;
    tUInt8 PORT_RDY_getDataPacket_get;
   
   /* Publicly accessible definitions */
   public:
    tUInt8 DEF_WILL_FIRE_getNoCPacket_get;
    tUInt8 DEF_WILL_FIRE_putNoCPacket_put;
    tUInt8 DEF_CAN_FIRE_getNoCPacket_get;
    tUInt8 DEF_CAN_FIRE_putNoCPacket_put;
    tUInt8 DEF_WILL_FIRE_getDataPacket_get;
    tUInt8 DEF_WILL_FIRE_putDataPacket_put;
    tUInt8 DEF_CAN_FIRE_getDataPacket_get;
    tUInt8 DEF_CAN_FIRE_putDataPacket_put;
    tUInt8 DEF_WILL_FIRE_RL_removeLayer;
    tUInt8 DEF_CAN_FIRE_RL_removeLayer;
    tUInt8 DEF_WILL_FIRE_RL_addLayer;
    tUInt8 DEF_CAN_FIRE_RL_addLayer;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketOutQ_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketOutQ_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketOutQ_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketOutQ_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketInQ_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketInQ_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_nocPacketInQ_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_nocPacketInQ_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_dataPacketOutQ_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_dataPacketOutQ_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_dataPacketOutQ_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_dataPacketOutQ_rule_enq;
    tUInt8 DEF_WILL_FIRE_RL_dataPacketInQ_rule_deq;
    tUInt8 DEF_CAN_FIRE_RL_dataPacketInQ_rule_deq;
    tUInt8 DEF_WILL_FIRE_RL_dataPacketInQ_rule_enq;
    tUInt8 DEF_CAN_FIRE_RL_dataPacketInQ_rule_enq;
    tUInt8 DEF_nocPacketOutQ_taggedReg_0_BIT_51___d149;
    tUInt8 DEF_nocPacketOutQ_rw_enq_whas____d155;
    tUInt8 DEF_nocPacketInQ_taggedReg_3_BIT_51___d150;
    tUInt8 DEF_dataPacketOutQ_taggedReg_6_BIT_41___d151;
    tUInt8 DEF_dataPacketOutQ_rw_enq_whas____d153;
    tUInt8 DEF_dataPacketInQ_taggedReg_7_BIT_41___d148;
    tUInt64 DEF_nocPacketOutQ_taggedReg___d135;
    tUInt64 DEF_nocPacketInQ_taggedReg___d165;
    tUInt64 DEF_dataPacketOutQ_taggedReg___d143;
    tUInt64 DEF_dataPacketInQ_taggedReg___d164;
    tUInt8 DEF_nocPacketInQ_rw_enq_whas____d154;
    tUInt8 DEF_dataPacketInQ_rw_enq_whas____d152;
   
   /* Local definitions */
   private:
    tUInt64 DEF_nocPacketOutQ_rw_enq_wget____d141;
    tUInt64 DEF_nocPacketInQ_rw_enq_wget____d140;
    tUInt64 DEF_dataPacketOutQ_rw_enq_wget____d139;
    tUInt64 DEF_dataPacketInQ_rw_enq_wget____d138;
    tUInt64 DEF__0_CONCAT_DONTCARE___d137;
    tUInt64 DEF__0_CONCAT_DONTCARE___d136;
   
   /* Rules */
   public:
    void RL_dataPacketInQ_rule_enq();
    void RL_dataPacketInQ_rule_deq();
    void RL_dataPacketOutQ_rule_enq();
    void RL_dataPacketOutQ_rule_deq();
    void RL_nocPacketInQ_rule_enq();
    void RL_nocPacketInQ_rule_deq();
    void RL_nocPacketOutQ_rule_enq();
    void RL_nocPacketOutQ_rule_deq();
    void RL_addLayer();
    void RL_removeLayer();
   
   /* Methods */
   public:
    void METH_putDataPacket_put(tUInt64 ARG_putDataPacket_put);
    tUInt8 METH_RDY_putDataPacket_put();
    tUInt64 METH_getDataPacket_get();
    tUInt8 METH_RDY_getDataPacket_get();
    void METH_putNoCPacket_put(tUInt64 ARG_putNoCPacket_put);
    tUInt8 METH_RDY_putNoCPacket_put();
    tUInt64 METH_getNoCPacket_get();
    tUInt8 METH_RDY_getNoCPacket_get();
   
   /* Reset routines */
   public:
    void reset_RST_N(tUInt8 ARG_rst_in);
   
   /* Static handles to reset routines */
   public:
   
   /* Pointers to reset fns in parent module for asserting output resets */
   private:
   
   /* Functions for the parent module to register its reset fns */
   public:
   
   /* Functions to set the elaborated clock id */
   public:
    void set_clk_0(char const *s);
   
   /* State dumping routine */
   public:
    void dump_state(unsigned int indent);
   
   /* VCD dumping routines */
   public:
    unsigned int dump_VCD_defs(unsigned int levels);
    void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkNetConnect &backing);
    void vcd_defs(tVCDDumpType dt, MOD_mkNetConnect &backing);
    void vcd_prims(tVCDDumpType dt, MOD_mkNetConnect &backing);
  };
}

#endif /* ifndef __mkNetConnect_h__ */
