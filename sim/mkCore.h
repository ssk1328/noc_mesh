/*
 * Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
 * 
 * On Tue Jun  6 22:50:48 IST 2017
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkCore_h__
#define __mkCore_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkProc.h"
#include "mkNetConnect.h"
#include "mkDmem.h"
#include "mkImem.h"


/* Class declaration for the mkCore module */
class MOD_mkCore : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
  tUInt8 const PARAM_procId;
 
 /* Module state */
 public:
  MOD_mkProc INST_cpu;
  MOD_mkNetConnect INST_cpuToNetwork;
  MOD_mkDmem INST_dataMemory;
  MOD_mkImem INST_instMemory;
 
 /* Constructor */
 public:
  MOD_mkCore(tSimStateHdl simHdl, char const *name, Module *parent, tUInt8 ARG_procId);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_dumpMem_startDump;
  tUInt8 PORT_EN_putNoCPacket_put;
  tUInt8 PORT_EN_getNoCPacket_get;
  tUInt64 PORT_putNoCPacket_put;
  tUInt8 PORT_RDY_putNoCPacket_put;
  tUInt64 PORT_getNoCPacket_get;
  tUInt8 PORT_RDY_getNoCPacket_get;
  tUInt8 PORT_checkStatus_getState;
  tUInt8 PORT_RDY_checkStatus_getState;
  tUInt8 PORT_RDY_dumpMem_startDump;
  tUInt8 PORT_dumpMem_doneDump;
  tUInt8 PORT_RDY_dumpMem_doneDump;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_mkConnectionGetPut_1;
  tUInt8 DEF_CAN_FIRE_RL_mkConnectionGetPut_1;
  tUInt8 DEF_WILL_FIRE_RL_mkConnectionGetPut;
  tUInt8 DEF_CAN_FIRE_RL_mkConnectionGetPut;
  tUInt8 DEF_WILL_FIRE_dumpMem_startDump;
  tUInt8 DEF_WILL_FIRE_getNoCPacket_get;
  tUInt8 DEF_WILL_FIRE_putNoCPacket_put;
  tUInt8 DEF_WILL_FIRE_RL_ClientServerResponse_1;
  tUInt8 DEF_CAN_FIRE_RL_ClientServerResponse_1;
  tUInt8 DEF_WILL_FIRE_RL_ClientServerRequest_1;
  tUInt8 DEF_CAN_FIRE_RL_ClientServerRequest_1;
  tUInt8 DEF_WILL_FIRE_RL_ClientServerResponse;
  tUInt8 DEF_CAN_FIRE_RL_ClientServerResponse;
  tUInt8 DEF_WILL_FIRE_RL_ClientServerRequest;
  tUInt8 DEF_CAN_FIRE_RL_ClientServerRequest;
  tUInt8 DEF_CAN_FIRE_dumpMem_doneDump;
  tUInt8 DEF_CAN_FIRE_dumpMem_startDump;
  tUInt8 DEF_CAN_FIRE_checkStatus_getState;
  tUInt8 DEF_CAN_FIRE_getNoCPacket_get;
  tUInt8 DEF_CAN_FIRE_putNoCPacket_put;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL_ClientServerRequest();
  void RL_ClientServerResponse();
  void RL_ClientServerRequest_1();
  void RL_ClientServerResponse_1();
  void RL_mkConnectionGetPut();
  void RL_mkConnectionGetPut_1();
 
 /* Methods */
 public:
  void METH_putNoCPacket_put(tUInt64 ARG_putNoCPacket_put);
  tUInt8 METH_RDY_putNoCPacket_put();
  tUInt64 METH_getNoCPacket_get();
  tUInt8 METH_RDY_getNoCPacket_get();
  tUInt8 METH_checkStatus_getState();
  tUInt8 METH_RDY_checkStatus_getState();
  void METH_dumpMem_startDump();
  tUInt8 METH_RDY_dumpMem_startDump();
  tUInt8 METH_dumpMem_doneDump();
  tUInt8 METH_RDY_dumpMem_doneDump();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCore &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkCore &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkCore &backing);
};

#endif /* ifndef __mkCore_h__ */
