/*
 * Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
 * 
 * On Sat Jun 28 05:29:27 IST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "mkDmem.h"

namespace bluesim
{
  
  /* String declarations */
  static std::string const __str_literal_20("%8x\n", 4u);
  static std::string const __str_literal_8("../data/dmem/dmem_init_.txt", 27u);
  static std::string const __str_literal_1("../data/dmem/dmem_init_0.txt", 28u);
  static std::string const __str_literal_2("../data/dmem/dmem_init_1.txt", 28u);
  static std::string const __str_literal_3("../data/dmem/dmem_init_2.txt", 28u);
  static std::string const __str_literal_4("../data/dmem/dmem_init_3.txt", 28u);
  static std::string const __str_literal_5("../data/dmem/dmem_init_4.txt", 28u);
  static std::string const __str_literal_6("../data/dmem/dmem_init_5.txt", 28u);
  static std::string const __str_literal_7("../data/dmem/dmem_init_6.txt", 28u);
  static std::string const __str_literal_10("../dump/dmem/dmem_dump_.txt", 27u);
  static std::string const __str_literal_16("../dump/dmem/dmem_dump_0.txt", 28u);
  static std::string const __str_literal_15("../dump/dmem/dmem_dump_1.txt", 28u);
  static std::string const __str_literal_14("../dump/dmem/dmem_dump_2.txt", 28u);
  static std::string const __str_literal_13("../dump/dmem/dmem_dump_3.txt", 28u);
  static std::string const __str_literal_12("../dump/dmem/dmem_dump_4.txt", 28u);
  static std::string const __str_literal_11("../dump/dmem/dmem_dump_5.txt", 28u);
  static std::string const __str_literal_9("../dump/dmem/dmem_dump_6.txt", 28u);
  static std::string const __str_literal_19("@%x\n%8x\n", 8u);
  static std::string const __str_literal_18("cannot open %s. Error. Failed to Dump. Exiting", 46u);
  static std::string const __str_literal_17("w", 1u);
  
  
  /* Constructor */
  MOD_mkDmem::MOD_mkDmem(char const *name, Module *parent, tUInt8 ARG_procId)
    : Module(name, parent),
      __clk_handle_0(BAD_CLOCK_HANDLE),
      PARAM_procId(ARG_procId),
      INST_counter("counter", this, 6u, (tUInt8)0u, (tUInt8)0u),
      INST_dataReqQ("dataReqQ", this, 39u, 2u, 1u, 0u),
      INST_dataRespQ("dataRespQ", this, 44u, 2u, 1u, 0u),
      INST_dumpFile("dumpFile", this, 32u, 0u, (tUInt8)0u),
      INST_dumpState("dumpState", this, 2u, (tUInt8)3u, (tUInt8)0u),
      INST_mem("mem",
	       this,
	       PARAM_procId == (tUInt8)0u ? __str_literal_1 : (PARAM_procId == (tUInt8)1u ? __str_literal_2 : (PARAM_procId == (tUInt8)2u ? __str_literal_3 : (PARAM_procId == (tUInt8)3u ? __str_literal_4 : (PARAM_procId == (tUInt8)4u ? __str_literal_5 : (PARAM_procId == (tUInt8)5u ? __str_literal_6 : (PARAM_procId == (tUInt8)6u ? __str_literal_7 : __str_literal_8)))))),
	       6u,
	       32u,
	       (tUInt8)0u,
	       (tUInt8)63u,
	       0u),
      PORT_RST_N((tUInt8)1u),
      DEF_x__h889(2863311530u)
  {
    PORT_EN_dumpMem_startDump = false;
    PORT_EN_dmem_server_request_put = false;
    PORT_EN_dmem_server_response_get = false;
    PORT_dmem_server_request_put = 0llu;
    PORT_RDY_dumpMem_startDump = false;
    PORT_dumpMem_doneDump = false;
    PORT_RDY_dumpMem_doneDump = false;
    PORT_RDY_dmem_server_request_put = false;
    PORT_dmem_server_response_get = 0llu;
    PORT_RDY_dmem_server_response_get = false;
    symbol_count = 37u;
    symbols = new tSym[symbol_count];
    init_symbols_0();
  }
  
  
  /* Symbol init fns */
  
  void MOD_mkDmem::init_symbols_0()
  {
    init_symbol(&symbols[0u],
		"CAN_FIRE_dmem_server_request_put",
		SYM_DEF,
		&DEF_CAN_FIRE_dmem_server_request_put,
		1u);
    init_symbol(&symbols[1u],
		"CAN_FIRE_dmem_server_response_get",
		SYM_DEF,
		&DEF_CAN_FIRE_dmem_server_response_get,
		1u);
    init_symbol(&symbols[2u], "CAN_FIRE_dumpMem_doneDump", SYM_DEF, &DEF_CAN_FIRE_dumpMem_doneDump, 1u);
    init_symbol(&symbols[3u],
		"CAN_FIRE_dumpMem_startDump",
		SYM_DEF,
		&DEF_CAN_FIRE_dumpMem_startDump,
		1u);
    init_symbol(&symbols[4u], "CAN_FIRE_RL_access", SYM_DEF, &DEF_CAN_FIRE_RL_access, 1u);
    init_symbol(&symbols[5u], "CAN_FIRE_RL_closeDumpFile", SYM_DEF, &DEF_CAN_FIRE_RL_closeDumpFile, 1u);
    init_symbol(&symbols[6u], "CAN_FIRE_RL_dumpMemory", SYM_DEF, &DEF_CAN_FIRE_RL_dumpMemory, 1u);
    init_symbol(&symbols[7u], "CAN_FIRE_RL_openDumpFile", SYM_DEF, &DEF_CAN_FIRE_RL_openDumpFile, 1u);
    init_symbol(&symbols[8u], "counter", SYM_MODULE, &INST_counter);
    init_symbol(&symbols[9u], "dataReqQ", SYM_MODULE, &INST_dataReqQ);
    init_symbol(&symbols[10u], "dataRespQ", SYM_MODULE, &INST_dataRespQ);
    init_symbol(&symbols[11u], "dmem_server_request_put", SYM_PORT, &PORT_dmem_server_request_put, 39u);
    init_symbol(&symbols[12u],
		"dmem_server_response_get",
		SYM_PORT,
		&PORT_dmem_server_response_get,
		44u);
    init_symbol(&symbols[13u], "dumpFile", SYM_MODULE, &INST_dumpFile);
    init_symbol(&symbols[14u], "dumpMem_doneDump", SYM_PORT, &PORT_dumpMem_doneDump, 1u);
    init_symbol(&symbols[15u], "dumpState", SYM_MODULE, &INST_dumpState);
    init_symbol(&symbols[16u], "dumpState__h868", SYM_DEF, &DEF_dumpState__h868, 2u);
    init_symbol(&symbols[17u],
		"EN_dmem_server_request_put",
		SYM_PORT,
		&PORT_EN_dmem_server_request_put,
		1u);
    init_symbol(&symbols[18u],
		"EN_dmem_server_response_get",
		SYM_PORT,
		&PORT_EN_dmem_server_response_get,
		1u);
    init_symbol(&symbols[19u], "EN_dumpMem_startDump", SYM_PORT, &PORT_EN_dumpMem_startDump, 1u);
    init_symbol(&symbols[20u], "mem", SYM_MODULE, &INST_mem);
    init_symbol(&symbols[21u], "procId", SYM_PARAM, (void *)(&PARAM_procId), 4u);
    init_symbol(&symbols[22u],
		"RDY_dmem_server_request_put",
		SYM_PORT,
		&PORT_RDY_dmem_server_request_put,
		1u);
    init_symbol(&symbols[23u],
		"RDY_dmem_server_response_get",
		SYM_PORT,
		&PORT_RDY_dmem_server_response_get,
		1u);
    init_symbol(&symbols[24u], "RDY_dumpMem_doneDump", SYM_PORT, &PORT_RDY_dumpMem_doneDump, 1u);
    init_symbol(&symbols[25u], "RDY_dumpMem_startDump", SYM_PORT, &PORT_RDY_dumpMem_startDump, 1u);
    init_symbol(&symbols[26u], "RL_access", SYM_RULE);
    init_symbol(&symbols[27u], "RL_closeDumpFile", SYM_RULE);
    init_symbol(&symbols[28u], "RL_dumpMemory", SYM_RULE);
    init_symbol(&symbols[29u], "RL_openDumpFile", SYM_RULE);
    init_symbol(&symbols[30u],
		"WILL_FIRE_dmem_server_request_put",
		SYM_DEF,
		&DEF_WILL_FIRE_dmem_server_request_put,
		1u);
    init_symbol(&symbols[31u],
		"WILL_FIRE_dmem_server_response_get",
		SYM_DEF,
		&DEF_WILL_FIRE_dmem_server_response_get,
		1u);
    init_symbol(&symbols[32u],
		"WILL_FIRE_dumpMem_startDump",
		SYM_DEF,
		&DEF_WILL_FIRE_dumpMem_startDump,
		1u);
    init_symbol(&symbols[33u], "WILL_FIRE_RL_access", SYM_DEF, &DEF_WILL_FIRE_RL_access, 1u);
    init_symbol(&symbols[34u],
		"WILL_FIRE_RL_closeDumpFile",
		SYM_DEF,
		&DEF_WILL_FIRE_RL_closeDumpFile,
		1u);
    init_symbol(&symbols[35u], "WILL_FIRE_RL_dumpMemory", SYM_DEF, &DEF_WILL_FIRE_RL_dumpMemory, 1u);
    init_symbol(&symbols[36u],
		"WILL_FIRE_RL_openDumpFile",
		SYM_DEF,
		&DEF_WILL_FIRE_RL_openDumpFile,
		1u);
  }
  
  
  /* Rule actions */
  
  void MOD_mkDmem::RL_access()
  {
    tUInt64 DEF_dataReqQ_first_BIT_38_CONCAT_IF_dataReqQ_first_ETC___d13;
    tUInt8 DEF_dataReqQ_first_BIT_38___d58;
    tUInt8 DEF_tag__h804;
    tUInt8 DEF_i__h752;
    tUInt32 DEF_x__h753;
    tUInt8 DEF_addr__h803;
    tUInt32 DEF_loadedData__h724;
    tUInt64 DEF_dataReqQ_first____d55;
    DEF_dataReqQ_first____d55 = INST_dataReqQ.METH_first();
    DEF_addr__h803 = (tUInt8)((tUInt8)63u & (DEF_dataReqQ_first____d55 >> 5u));
    DEF_loadedData__h724 = INST_mem.METH_sub(DEF_addr__h803);
    DEF_x__h753 = (tUInt32)(DEF_dataReqQ_first____d55);
    DEF_tag__h804 = (tUInt8)((tUInt8)31u & DEF_dataReqQ_first____d55);
    DEF_i__h752 = (tUInt8)((tUInt8)63u & (DEF_dataReqQ_first____d55 >> 32u));
    DEF_dataReqQ_first_BIT_38___d58 = (tUInt8)(DEF_dataReqQ_first____d55 >> 38u);
    DEF_dataReqQ_first_BIT_38_CONCAT_IF_dataReqQ_first_ETC___d13 = 17592186044415llu & ((((tUInt64)(DEF_dataReqQ_first_BIT_38___d58)) << 43u) | (DEF_dataReqQ_first_BIT_38___d58 ? 8796093022207llu & ((45812984490llu << 7u) | (tUInt64)((tUInt8)(DEF_dataReqQ_first____d55 >> 32u))) : 8796093022207llu & (((274877906943llu & ((((tUInt64)(DEF_addr__h803)) << 32u) | (tUInt64)(DEF_loadedData__h724))) << 5u) | (tUInt64)(DEF_tag__h804))));
    INST_dataReqQ.METH_deq();
    INST_dataRespQ.METH_enq(DEF_dataReqQ_first_BIT_38_CONCAT_IF_dataReqQ_first_ETC___d13);
    if (DEF_dataReqQ_first_BIT_38___d58)
      INST_mem.METH_upd(DEF_i__h752, DEF_x__h753);
  }
  
  void MOD_mkDmem::RL_openDumpFile()
  {
    tUInt8 DEF_TASK_fopen_2_EQ_0___d59;
    tUInt8 DEF_IF_TASK_fopen_2_EQ_0_3_THEN_3_ELSE_1___d34;
    DEF_IF_procId_EQ_6_4_THEN_STR_dumpdmemdmemdump6txt_ETC___d25 = PARAM_procId == (tUInt8)6u ? __str_literal_9 : __str_literal_10;
    DEF_IF_procId_EQ_5_3_THEN_STR_dumpdmemdmemdump5txt_ETC___d26 = PARAM_procId == (tUInt8)5u ? __str_literal_11 : DEF_IF_procId_EQ_6_4_THEN_STR_dumpdmemdmemdump6txt_ETC___d25;
    DEF_IF_procId_EQ_4_2_THEN_STR_dumpdmemdmemdump4txt_ETC___d27 = PARAM_procId == (tUInt8)4u ? __str_literal_12 : DEF_IF_procId_EQ_5_3_THEN_STR_dumpdmemdmemdump5txt_ETC___d26;
    DEF_IF_procId_EQ_3_1_THEN_STR_dumpdmemdmemdump3txt_ETC___d28 = PARAM_procId == (tUInt8)3u ? __str_literal_13 : DEF_IF_procId_EQ_4_2_THEN_STR_dumpdmemdmemdump4txt_ETC___d27;
    DEF_IF_procId_EQ_2_0_THEN_STR_dumpdmemdmemdump2txt_ETC___d29 = PARAM_procId == (tUInt8)2u ? __str_literal_14 : DEF_IF_procId_EQ_3_1_THEN_STR_dumpdmemdmemdump3txt_ETC___d28;
    DEF_IF_procId_EQ_1_9_THEN_STR_dumpdmemdmemdump1txt_ETC___d30 = PARAM_procId == (tUInt8)1u ? __str_literal_15 : DEF_IF_procId_EQ_2_0_THEN_STR_dumpdmemdmemdump2txt_ETC___d29;
    DEF_dumpFilename__h872 = PARAM_procId == (tUInt8)0u ? __str_literal_16 : DEF_IF_procId_EQ_1_9_THEN_STR_dumpdmemdmemdump1txt_ETC___d30;
    if (!(PORT_RST_N == (tUInt8)0u))
      DEF_x__h889 = dollar_fopen("s,s", &DEF_dumpFilename__h872, &__str_literal_17);
    DEF_TASK_fopen_2_EQ_0___d59 = DEF_x__h889 == 0u;
    DEF_IF_TASK_fopen_2_EQ_0_3_THEN_3_ELSE_1___d34 = DEF_TASK_fopen_2_EQ_0___d59 ? (tUInt8)3u : (tUInt8)1u;
    if (!(PORT_RST_N == (tUInt8)0u))
      if (DEF_TASK_fopen_2_EQ_0___d59)
	dollar_display(this, "s,s", &__str_literal_18, &DEF_dumpFilename__h872);
    INST_dumpFile.METH_write(DEF_x__h889);
    INST_dumpState.METH_write(DEF_IF_TASK_fopen_2_EQ_0_3_THEN_3_ELSE_1___d34);
  }
  
  void MOD_mkDmem::RL_dumpMemory()
  {
    tUInt8 DEF_NOT_IF_counter_6_BIT_5_7_THEN_NEG_0_CONCAT_IF__ETC___d48;
    tUInt8 DEF_IF_counter_6_BIT_5_7_THEN_NEG_0_CONCAT_IF_coun_ETC___d44;
    tUInt8 DEF_IF_counter_6_EQ_63_9_THEN_2_ELSE_1___d52;
    tUInt8 DEF__0_CONCAT_IF_counter_6_BIT_5_7_THEN_NEG_counter_ETC___d56;
    tUInt8 DEF_counter_6_EQ_63___d67;
    tUInt8 DEF_IF_counter_6_EQ_63_9_THEN_0_ELSE_counter_6_PLU_ETC___d51;
    tUInt8 DEF_counter_BIT_5___h1223;
    tUInt32 DEF_dumpData__h1171;
    tUInt8 DEF_i__h1418;
    tUInt8 DEF_signed_counter_6___d46;
    tUInt8 DEF_IF_counter_6_BIT_5_7_THEN_NEG_0_CONCAT_IF_coun_ETC___d43;
    DEF_i__h1418 = INST_counter.METH_read();
    DEF_signed_counter_6___d46 = DEF_i__h1418;
    DEF_dumpData__h1171 = INST_mem.METH_sub(DEF_i__h1418);
    DEF_dumpFile___d68 = INST_dumpFile.METH_read();
    DEF_counter_6_EQ_63___d67 = DEF_i__h1418 == (tUInt8)63u;
    DEF_counter_BIT_5___h1223 = (tUInt8)(DEF_i__h1418 >> 5u);
    DEF_IF_counter_6_EQ_63_9_THEN_0_ELSE_counter_6_PLU_ETC___d51 = DEF_counter_6_EQ_63___d67 ? (tUInt8)0u : (tUInt8)63u & (DEF_i__h1418 + (tUInt8)1u);
    DEF__0_CONCAT_IF_counter_6_BIT_5_7_THEN_NEG_counter_ETC___d56 = (tUInt8)63u & ((tUInt8)((tUInt8)15u & (DEF_counter_BIT_5___h1223 ? (tUInt8)63u & -DEF_i__h1418 : DEF_i__h1418)));
    DEF_IF_counter_6_BIT_5_7_THEN_NEG_0_CONCAT_IF_coun_ETC___d43 = DEF_counter_BIT_5___h1223 ? (tUInt8)63u & -DEF__0_CONCAT_IF_counter_6_BIT_5_7_THEN_NEG_counter_ETC___d56 : DEF__0_CONCAT_IF_counter_6_BIT_5_7_THEN_NEG_counter_ETC___d56;
    DEF_IF_counter_6_EQ_63_9_THEN_2_ELSE_1___d52 = DEF_counter_6_EQ_63___d67 ? (tUInt8)2u : (tUInt8)1u;
    DEF_IF_counter_6_BIT_5_7_THEN_NEG_0_CONCAT_IF_coun_ETC___d44 = DEF_IF_counter_6_BIT_5_7_THEN_NEG_0_CONCAT_IF_coun_ETC___d43 == (tUInt8)0u;
    DEF_NOT_IF_counter_6_BIT_5_7_THEN_NEG_0_CONCAT_IF__ETC___d48 = !DEF_IF_counter_6_BIT_5_7_THEN_NEG_0_CONCAT_IF_coun_ETC___d44;
    if (!(PORT_RST_N == (tUInt8)0u))
    {
      if (DEF_IF_counter_6_BIT_5_7_THEN_NEG_0_CONCAT_IF_coun_ETC___d44)
	dollar_fwrite(this,
		      "32,s,-6,32",
		      DEF_dumpFile___d68,
		      &__str_literal_19,
		      DEF_signed_counter_6___d46,
		      DEF_dumpData__h1171);
      if (DEF_NOT_IF_counter_6_BIT_5_7_THEN_NEG_0_CONCAT_IF__ETC___d48)
	dollar_fwrite(this, "32,s,32", DEF_dumpFile___d68, &__str_literal_20, DEF_dumpData__h1171);
    }
    INST_counter.METH_write(DEF_IF_counter_6_EQ_63_9_THEN_0_ELSE_counter_6_PLU_ETC___d51);
    INST_dumpState.METH_write(DEF_IF_counter_6_EQ_63_9_THEN_2_ELSE_1___d52);
  }
  
  void MOD_mkDmem::RL_closeDumpFile()
  {
    DEF_dumpFile___d68 = INST_dumpFile.METH_read();
    if (!(PORT_RST_N == (tUInt8)0u))
      dollar_fclose("32", DEF_dumpFile___d68);
    INST_dumpState.METH_write((tUInt8)3u);
  }
  
  
  /* Methods */
  
  void MOD_mkDmem::METH_dmem_server_request_put(tUInt64 ARG_dmem_server_request_put)
  {
    PORT_EN_dmem_server_request_put = (tUInt8)1u;
    DEF_WILL_FIRE_dmem_server_request_put = (tUInt8)1u;
    PORT_dmem_server_request_put = ARG_dmem_server_request_put;
    INST_dataReqQ.METH_enq(ARG_dmem_server_request_put);
  }
  
  tUInt8 MOD_mkDmem::METH_RDY_dmem_server_request_put()
  {
    DEF_CAN_FIRE_dmem_server_request_put = INST_dataReqQ.METH_i_notFull();
    PORT_RDY_dmem_server_request_put = DEF_CAN_FIRE_dmem_server_request_put;
    return PORT_RDY_dmem_server_request_put;
  }
  
  tUInt64 MOD_mkDmem::METH_dmem_server_response_get()
  {
    tUInt64 DEF_dataRespQ_first____d57;
    PORT_EN_dmem_server_response_get = (tUInt8)1u;
    DEF_WILL_FIRE_dmem_server_response_get = (tUInt8)1u;
    DEF_dataRespQ_first____d57 = INST_dataRespQ.METH_first();
    INST_dataRespQ.METH_deq();
    PORT_dmem_server_response_get = DEF_dataRespQ_first____d57;
    return PORT_dmem_server_response_get;
  }
  
  tUInt8 MOD_mkDmem::METH_RDY_dmem_server_response_get()
  {
    DEF_CAN_FIRE_dmem_server_response_get = INST_dataRespQ.METH_i_notEmpty();
    PORT_RDY_dmem_server_response_get = DEF_CAN_FIRE_dmem_server_response_get;
    return PORT_RDY_dmem_server_response_get;
  }
  
  void MOD_mkDmem::METH_dumpMem_startDump()
  {
    PORT_EN_dumpMem_startDump = (tUInt8)1u;
    DEF_WILL_FIRE_dumpMem_startDump = (tUInt8)1u;
    INST_dumpState.METH_write((tUInt8)0u);
  }
  
  tUInt8 MOD_mkDmem::METH_RDY_dumpMem_startDump()
  {
    DEF_CAN_FIRE_dumpMem_startDump = (tUInt8)1u;
    PORT_RDY_dumpMem_startDump = DEF_CAN_FIRE_dumpMem_startDump;
    return PORT_RDY_dumpMem_startDump;
  }
  
  tUInt8 MOD_mkDmem::METH_dumpMem_doneDump()
  {
    DEF_dumpState__h868 = INST_dumpState.METH_read();
    PORT_dumpMem_doneDump = DEF_dumpState__h868 == (tUInt8)3u;
    return PORT_dumpMem_doneDump;
  }
  
  tUInt8 MOD_mkDmem::METH_RDY_dumpMem_doneDump()
  {
    DEF_CAN_FIRE_dumpMem_doneDump = (tUInt8)1u;
    PORT_RDY_dumpMem_doneDump = DEF_CAN_FIRE_dumpMem_doneDump;
    return PORT_RDY_dumpMem_doneDump;
  }
  
  
  /* Reset routines */
  
  void MOD_mkDmem::reset_RST_N(tUInt8 ARG_rst_in)
  {
    PORT_RST_N = ARG_rst_in;
    INST_dumpState.reset_RST_N(ARG_rst_in);
    INST_dumpFile.reset_RST_N(ARG_rst_in);
    INST_dataRespQ.reset_RST_N(ARG_rst_in);
    INST_dataReqQ.reset_RST_N(ARG_rst_in);
    INST_counter.reset_RST_N(ARG_rst_in);
  }
  
  
  /* Static handles to reset routines */
  
  
  /* Functions for the parent module to register its reset fns */
  
  
  /* Functions to set the elaborated clock id */
  
  void MOD_mkDmem::set_clk_0(char const *s)
  {
    __clk_handle_0 = bk_get_or_define_clock(s);
  }
  
  
  /* State dumping routine */
  void MOD_mkDmem::dump_state(unsigned int indent)
  {
    printf("%*s%s:\n", indent, "", inst_name);
    INST_counter.dump_state(indent + 2u);
    INST_dataReqQ.dump_state(indent + 2u);
    INST_dataRespQ.dump_state(indent + 2u);
    INST_dumpFile.dump_state(indent + 2u);
    INST_dumpState.dump_state(indent + 2u);
    INST_mem.dump_state(indent + 2u);
  }
  
  
  /* VCD dumping routines */
  
  unsigned int MOD_mkDmem::dump_VCD_defs(unsigned int levels)
  {
    fprintf(vcd_file, "$scope module %s $end\n", inst_name);
    vcd_num = vcd_reserve_ids(35u);
    unsigned int num = vcd_num;
    for (unsigned int hdl = 0u; hdl < bk_num_clocks(); ++hdl)
      vcd_add_clock_def(this, bk_clock_name(hdl), bk_clock_vcd_num(hdl));
    vcd_write_def(bk_clock_vcd_num(__clk_handle_0), "CLK", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_access", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_closeDumpFile", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_dumpMemory", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_openDumpFile", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_dmem_server_request_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_dmem_server_response_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_dumpMem_doneDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_dumpMem_startDump", 1u);
    vcd_write_def(num++, "RST_N", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_access", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_closeDumpFile", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_dumpMemory", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_openDumpFile", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_dmem_server_request_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_dmem_server_response_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_dumpMem_startDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "dumpFile___d68", 32u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "dumpState__h868", 2u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "x__h889", 32u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "EN_dmem_server_request_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "EN_dmem_server_response_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "EN_dumpMem_startDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_dmem_server_request_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_dmem_server_response_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_dumpMem_doneDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_dumpMem_startDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "dmem_server_request_put", 39u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "dmem_server_response_get", 44u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "dumpMem_doneDump", 1u);
    num = INST_counter.dump_VCD_defs(num);
    num = INST_dataReqQ.dump_VCD_defs(num);
    num = INST_dataRespQ.dump_VCD_defs(num);
    num = INST_dumpFile.dump_VCD_defs(num);
    num = INST_dumpState.dump_VCD_defs(num);
    num = INST_mem.dump_VCD_defs(num);
    fprintf(vcd_file, "$upscope $end\n");
    return num;
  }
  
  void MOD_mkDmem::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDmem &backing)
  {
    vcd_defs(dt, backing);
    vcd_prims(dt, backing);
  }
  
  void MOD_mkDmem::vcd_defs(tVCDDumpType dt, MOD_mkDmem &backing)
  {
    unsigned int num = vcd_num;
    if (dt == VCD_DUMP_XS)
    {
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 32u);
      vcd_write_x(num++, 2u);
      vcd_write_x(num++, 32u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 39u);
      vcd_write_x(num++, 44u);
      vcd_write_x(num++, 1u);
    }
    else
      if (dt == VCD_DUMP_CHANGES)
      {
	if ((backing.DEF_CAN_FIRE_RL_access) != DEF_CAN_FIRE_RL_access)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_access, 1u);
	  backing.DEF_CAN_FIRE_RL_access = DEF_CAN_FIRE_RL_access;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_RL_closeDumpFile) != DEF_CAN_FIRE_RL_closeDumpFile)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_closeDumpFile, 1u);
	  backing.DEF_CAN_FIRE_RL_closeDumpFile = DEF_CAN_FIRE_RL_closeDumpFile;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_RL_dumpMemory) != DEF_CAN_FIRE_RL_dumpMemory)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_dumpMemory, 1u);
	  backing.DEF_CAN_FIRE_RL_dumpMemory = DEF_CAN_FIRE_RL_dumpMemory;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_RL_openDumpFile) != DEF_CAN_FIRE_RL_openDumpFile)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_openDumpFile, 1u);
	  backing.DEF_CAN_FIRE_RL_openDumpFile = DEF_CAN_FIRE_RL_openDumpFile;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_dmem_server_request_put) != DEF_CAN_FIRE_dmem_server_request_put)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_dmem_server_request_put, 1u);
	  backing.DEF_CAN_FIRE_dmem_server_request_put = DEF_CAN_FIRE_dmem_server_request_put;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_dmem_server_response_get) != DEF_CAN_FIRE_dmem_server_response_get)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_dmem_server_response_get, 1u);
	  backing.DEF_CAN_FIRE_dmem_server_response_get = DEF_CAN_FIRE_dmem_server_response_get;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_dumpMem_doneDump) != DEF_CAN_FIRE_dumpMem_doneDump)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_dumpMem_doneDump, 1u);
	  backing.DEF_CAN_FIRE_dumpMem_doneDump = DEF_CAN_FIRE_dumpMem_doneDump;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_dumpMem_startDump) != DEF_CAN_FIRE_dumpMem_startDump)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_dumpMem_startDump, 1u);
	  backing.DEF_CAN_FIRE_dumpMem_startDump = DEF_CAN_FIRE_dumpMem_startDump;
	}
	++num;
	if ((backing.PORT_RST_N) != PORT_RST_N)
	{
	  vcd_write_val(num, PORT_RST_N, 1u);
	  backing.PORT_RST_N = PORT_RST_N;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_access) != DEF_WILL_FIRE_RL_access)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_access, 1u);
	  backing.DEF_WILL_FIRE_RL_access = DEF_WILL_FIRE_RL_access;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_closeDumpFile) != DEF_WILL_FIRE_RL_closeDumpFile)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_closeDumpFile, 1u);
	  backing.DEF_WILL_FIRE_RL_closeDumpFile = DEF_WILL_FIRE_RL_closeDumpFile;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_dumpMemory) != DEF_WILL_FIRE_RL_dumpMemory)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_dumpMemory, 1u);
	  backing.DEF_WILL_FIRE_RL_dumpMemory = DEF_WILL_FIRE_RL_dumpMemory;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_openDumpFile) != DEF_WILL_FIRE_RL_openDumpFile)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_openDumpFile, 1u);
	  backing.DEF_WILL_FIRE_RL_openDumpFile = DEF_WILL_FIRE_RL_openDumpFile;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_dmem_server_request_put) != DEF_WILL_FIRE_dmem_server_request_put)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_dmem_server_request_put, 1u);
	  backing.DEF_WILL_FIRE_dmem_server_request_put = DEF_WILL_FIRE_dmem_server_request_put;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_dmem_server_response_get) != DEF_WILL_FIRE_dmem_server_response_get)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_dmem_server_response_get, 1u);
	  backing.DEF_WILL_FIRE_dmem_server_response_get = DEF_WILL_FIRE_dmem_server_response_get;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_dumpMem_startDump) != DEF_WILL_FIRE_dumpMem_startDump)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_dumpMem_startDump, 1u);
	  backing.DEF_WILL_FIRE_dumpMem_startDump = DEF_WILL_FIRE_dumpMem_startDump;
	}
	++num;
	if ((backing.DEF_dumpFile___d68) != DEF_dumpFile___d68)
	{
	  vcd_write_val(num, DEF_dumpFile___d68, 32u);
	  backing.DEF_dumpFile___d68 = DEF_dumpFile___d68;
	}
	++num;
	if ((backing.DEF_dumpState__h868) != DEF_dumpState__h868)
	{
	  vcd_write_val(num, DEF_dumpState__h868, 2u);
	  backing.DEF_dumpState__h868 = DEF_dumpState__h868;
	}
	++num;
	if ((backing.DEF_x__h889) != DEF_x__h889)
	{
	  vcd_write_val(num, DEF_x__h889, 32u);
	  backing.DEF_x__h889 = DEF_x__h889;
	}
	++num;
	if ((backing.PORT_EN_dmem_server_request_put) != PORT_EN_dmem_server_request_put)
	{
	  vcd_write_val(num, PORT_EN_dmem_server_request_put, 1u);
	  backing.PORT_EN_dmem_server_request_put = PORT_EN_dmem_server_request_put;
	}
	++num;
	if ((backing.PORT_EN_dmem_server_response_get) != PORT_EN_dmem_server_response_get)
	{
	  vcd_write_val(num, PORT_EN_dmem_server_response_get, 1u);
	  backing.PORT_EN_dmem_server_response_get = PORT_EN_dmem_server_response_get;
	}
	++num;
	if ((backing.PORT_EN_dumpMem_startDump) != PORT_EN_dumpMem_startDump)
	{
	  vcd_write_val(num, PORT_EN_dumpMem_startDump, 1u);
	  backing.PORT_EN_dumpMem_startDump = PORT_EN_dumpMem_startDump;
	}
	++num;
	if ((backing.PORT_RDY_dmem_server_request_put) != PORT_RDY_dmem_server_request_put)
	{
	  vcd_write_val(num, PORT_RDY_dmem_server_request_put, 1u);
	  backing.PORT_RDY_dmem_server_request_put = PORT_RDY_dmem_server_request_put;
	}
	++num;
	if ((backing.PORT_RDY_dmem_server_response_get) != PORT_RDY_dmem_server_response_get)
	{
	  vcd_write_val(num, PORT_RDY_dmem_server_response_get, 1u);
	  backing.PORT_RDY_dmem_server_response_get = PORT_RDY_dmem_server_response_get;
	}
	++num;
	if ((backing.PORT_RDY_dumpMem_doneDump) != PORT_RDY_dumpMem_doneDump)
	{
	  vcd_write_val(num, PORT_RDY_dumpMem_doneDump, 1u);
	  backing.PORT_RDY_dumpMem_doneDump = PORT_RDY_dumpMem_doneDump;
	}
	++num;
	if ((backing.PORT_RDY_dumpMem_startDump) != PORT_RDY_dumpMem_startDump)
	{
	  vcd_write_val(num, PORT_RDY_dumpMem_startDump, 1u);
	  backing.PORT_RDY_dumpMem_startDump = PORT_RDY_dumpMem_startDump;
	}
	++num;
	if ((backing.PORT_dmem_server_request_put) != PORT_dmem_server_request_put)
	{
	  vcd_write_val(num, PORT_dmem_server_request_put, 39u);
	  backing.PORT_dmem_server_request_put = PORT_dmem_server_request_put;
	}
	++num;
	if ((backing.PORT_dmem_server_response_get) != PORT_dmem_server_response_get)
	{
	  vcd_write_val(num, PORT_dmem_server_response_get, 44u);
	  backing.PORT_dmem_server_response_get = PORT_dmem_server_response_get;
	}
	++num;
	if ((backing.PORT_dumpMem_doneDump) != PORT_dumpMem_doneDump)
	{
	  vcd_write_val(num, PORT_dumpMem_doneDump, 1u);
	  backing.PORT_dumpMem_doneDump = PORT_dumpMem_doneDump;
	}
	++num;
      }
      else
      {
	vcd_write_val(num++, DEF_CAN_FIRE_RL_access, 1u);
	backing.DEF_CAN_FIRE_RL_access = DEF_CAN_FIRE_RL_access;
	vcd_write_val(num++, DEF_CAN_FIRE_RL_closeDumpFile, 1u);
	backing.DEF_CAN_FIRE_RL_closeDumpFile = DEF_CAN_FIRE_RL_closeDumpFile;
	vcd_write_val(num++, DEF_CAN_FIRE_RL_dumpMemory, 1u);
	backing.DEF_CAN_FIRE_RL_dumpMemory = DEF_CAN_FIRE_RL_dumpMemory;
	vcd_write_val(num++, DEF_CAN_FIRE_RL_openDumpFile, 1u);
	backing.DEF_CAN_FIRE_RL_openDumpFile = DEF_CAN_FIRE_RL_openDumpFile;
	vcd_write_val(num++, DEF_CAN_FIRE_dmem_server_request_put, 1u);
	backing.DEF_CAN_FIRE_dmem_server_request_put = DEF_CAN_FIRE_dmem_server_request_put;
	vcd_write_val(num++, DEF_CAN_FIRE_dmem_server_response_get, 1u);
	backing.DEF_CAN_FIRE_dmem_server_response_get = DEF_CAN_FIRE_dmem_server_response_get;
	vcd_write_val(num++, DEF_CAN_FIRE_dumpMem_doneDump, 1u);
	backing.DEF_CAN_FIRE_dumpMem_doneDump = DEF_CAN_FIRE_dumpMem_doneDump;
	vcd_write_val(num++, DEF_CAN_FIRE_dumpMem_startDump, 1u);
	backing.DEF_CAN_FIRE_dumpMem_startDump = DEF_CAN_FIRE_dumpMem_startDump;
	vcd_write_val(num++, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_access, 1u);
	backing.DEF_WILL_FIRE_RL_access = DEF_WILL_FIRE_RL_access;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_closeDumpFile, 1u);
	backing.DEF_WILL_FIRE_RL_closeDumpFile = DEF_WILL_FIRE_RL_closeDumpFile;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_dumpMemory, 1u);
	backing.DEF_WILL_FIRE_RL_dumpMemory = DEF_WILL_FIRE_RL_dumpMemory;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_openDumpFile, 1u);
	backing.DEF_WILL_FIRE_RL_openDumpFile = DEF_WILL_FIRE_RL_openDumpFile;
	vcd_write_val(num++, DEF_WILL_FIRE_dmem_server_request_put, 1u);
	backing.DEF_WILL_FIRE_dmem_server_request_put = DEF_WILL_FIRE_dmem_server_request_put;
	vcd_write_val(num++, DEF_WILL_FIRE_dmem_server_response_get, 1u);
	backing.DEF_WILL_FIRE_dmem_server_response_get = DEF_WILL_FIRE_dmem_server_response_get;
	vcd_write_val(num++, DEF_WILL_FIRE_dumpMem_startDump, 1u);
	backing.DEF_WILL_FIRE_dumpMem_startDump = DEF_WILL_FIRE_dumpMem_startDump;
	vcd_write_val(num++, DEF_dumpFile___d68, 32u);
	backing.DEF_dumpFile___d68 = DEF_dumpFile___d68;
	vcd_write_val(num++, DEF_dumpState__h868, 2u);
	backing.DEF_dumpState__h868 = DEF_dumpState__h868;
	vcd_write_val(num++, DEF_x__h889, 32u);
	backing.DEF_x__h889 = DEF_x__h889;
	vcd_write_val(num++, PORT_EN_dmem_server_request_put, 1u);
	backing.PORT_EN_dmem_server_request_put = PORT_EN_dmem_server_request_put;
	vcd_write_val(num++, PORT_EN_dmem_server_response_get, 1u);
	backing.PORT_EN_dmem_server_response_get = PORT_EN_dmem_server_response_get;
	vcd_write_val(num++, PORT_EN_dumpMem_startDump, 1u);
	backing.PORT_EN_dumpMem_startDump = PORT_EN_dumpMem_startDump;
	vcd_write_val(num++, PORT_RDY_dmem_server_request_put, 1u);
	backing.PORT_RDY_dmem_server_request_put = PORT_RDY_dmem_server_request_put;
	vcd_write_val(num++, PORT_RDY_dmem_server_response_get, 1u);
	backing.PORT_RDY_dmem_server_response_get = PORT_RDY_dmem_server_response_get;
	vcd_write_val(num++, PORT_RDY_dumpMem_doneDump, 1u);
	backing.PORT_RDY_dumpMem_doneDump = PORT_RDY_dumpMem_doneDump;
	vcd_write_val(num++, PORT_RDY_dumpMem_startDump, 1u);
	backing.PORT_RDY_dumpMem_startDump = PORT_RDY_dumpMem_startDump;
	vcd_write_val(num++, PORT_dmem_server_request_put, 39u);
	backing.PORT_dmem_server_request_put = PORT_dmem_server_request_put;
	vcd_write_val(num++, PORT_dmem_server_response_get, 44u);
	backing.PORT_dmem_server_response_get = PORT_dmem_server_response_get;
	vcd_write_val(num++, PORT_dumpMem_doneDump, 1u);
	backing.PORT_dumpMem_doneDump = PORT_dumpMem_doneDump;
      }
  }
  
  void MOD_mkDmem::vcd_prims(tVCDDumpType dt, MOD_mkDmem &backing)
  {
    INST_counter.dump_VCD(dt, backing.INST_counter);
    INST_dataReqQ.dump_VCD(dt, backing.INST_dataReqQ);
    INST_dataRespQ.dump_VCD(dt, backing.INST_dataRespQ);
    INST_dumpFile.dump_VCD(dt, backing.INST_dumpFile);
    INST_dumpState.dump_VCD(dt, backing.INST_dumpState);
    INST_mem.dump_VCD(dt, backing.INST_mem);
  }
}
