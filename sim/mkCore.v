//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Wed May  7 17:28:24 IST 2014
//
// Method conflict info:
// Method: putNoCPacket_put
// Conflict-free: getNoCPacket_get,
// 	       checkStatus_getState,
// 	       dumpMem_startDump,
// 	       dumpMem_doneDump
// Conflicts: putNoCPacket_put
//
// Method: getNoCPacket_get
// Conflict-free: putNoCPacket_put,
// 	       checkStatus_getState,
// 	       dumpMem_startDump,
// 	       dumpMem_doneDump
// Conflicts: getNoCPacket_get
//
// Method: checkStatus_getState
// Conflict-free: putNoCPacket_put,
// 	       getNoCPacket_get,
// 	       checkStatus_getState,
// 	       dumpMem_startDump,
// 	       dumpMem_doneDump
//
// Method: dumpMem_startDump
// Conflict-free: putNoCPacket_put, getNoCPacket_get, checkStatus_getState
// Sequenced before (restricted): dumpMem_startDump
// Sequenced after (restricted): dumpMem_doneDump
//
// Method: dumpMem_doneDump
// Conflict-free: putNoCPacket_put,
// 	       getNoCPacket_get,
// 	       checkStatus_getState,
// 	       dumpMem_doneDump
// Sequenced before (restricted): dumpMem_startDump
//
//
// Ports:
// Name                         I/O  size props
// RDY_putNoCPacket_put           O     1 reg
// getNoCPacket_get               O    48 reg
// RDY_getNoCPacket_get           O     1 reg
// checkStatus_getState           O     1 reg
// RDY_checkStatus_getState       O     1 const
// RDY_dumpMem_startDump          O     1 const
// dumpMem_doneDump               O     1
// RDY_dumpMem_doneDump           O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putNoCPacket_put               I    48 reg
// EN_putNoCPacket_put            I     1
// EN_dumpMem_startDump           I     1
// EN_getNoCPacket_get            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkCore(CLK,
	      RST_N,

	      putNoCPacket_put,
	      EN_putNoCPacket_put,
	      RDY_putNoCPacket_put,

	      EN_getNoCPacket_get,
	      getNoCPacket_get,
	      RDY_getNoCPacket_get,

	      checkStatus_getState,
	      RDY_checkStatus_getState,

	      EN_dumpMem_startDump,
	      RDY_dumpMem_startDump,

	      dumpMem_doneDump,
	      RDY_dumpMem_doneDump);
  parameter [3 : 0] procId = 4'b0;
  input  CLK;
  input  RST_N;

  // action method putNoCPacket_put
  input  [47 : 0] putNoCPacket_put;
  input  EN_putNoCPacket_put;
  output RDY_putNoCPacket_put;

  // actionvalue method getNoCPacket_get
  input  EN_getNoCPacket_get;
  output [47 : 0] getNoCPacket_get;
  output RDY_getNoCPacket_get;

  // value method checkStatus_getState
  output checkStatus_getState;
  output RDY_checkStatus_getState;

  // action method dumpMem_startDump
  input  EN_dumpMem_startDump;
  output RDY_dumpMem_startDump;

  // value method dumpMem_doneDump
  output dumpMem_doneDump;
  output RDY_dumpMem_doneDump;

  // signals for module outputs
  wire [47 : 0] getNoCPacket_get;
  wire RDY_checkStatus_getState,
       RDY_dumpMem_doneDump,
       RDY_dumpMem_startDump,
       RDY_getNoCPacket_get,
       RDY_putNoCPacket_put,
       checkStatus_getState,
       dumpMem_doneDump;

  // ports of submodule cpu
  wire [43 : 0] cpu$dmem_client_response_put;
  wire [39 : 0] cpu$getDataPacket_get, cpu$putDataPacket_put;
  wire [38 : 0] cpu$dmem_client_request_get, cpu$imem_client_response_put;
  wire [6 : 0] cpu$imem_client_request_get;
  wire cpu$EN_dmem_client_request_get,
       cpu$EN_dmem_client_response_put,
       cpu$EN_getDataPacket_get,
       cpu$EN_imem_client_request_get,
       cpu$EN_imem_client_response_put,
       cpu$EN_putDataPacket_put,
       cpu$RDY_dmem_client_request_get,
       cpu$RDY_dmem_client_response_put,
       cpu$RDY_getDataPacket_get,
       cpu$RDY_imem_client_request_get,
       cpu$RDY_imem_client_response_put,
       cpu$RDY_putDataPacket_put,
       cpu$checkStatus_getState;

  // ports of submodule cpuToNetwork
  wire [47 : 0] cpuToNetwork$getNoCPacket_get, cpuToNetwork$putNoCPacket_put;
  wire [39 : 0] cpuToNetwork$getDataPacket_get,
		cpuToNetwork$putDataPacket_put;
  wire cpuToNetwork$EN_getDataPacket_get,
       cpuToNetwork$EN_getNoCPacket_get,
       cpuToNetwork$EN_putDataPacket_put,
       cpuToNetwork$EN_putNoCPacket_put,
       cpuToNetwork$RDY_getDataPacket_get,
       cpuToNetwork$RDY_getNoCPacket_get,
       cpuToNetwork$RDY_putDataPacket_put,
       cpuToNetwork$RDY_putNoCPacket_put;

  // ports of submodule dataMemory
  wire [43 : 0] dataMemory$dmem_server_response_get;
  wire [38 : 0] dataMemory$dmem_server_request_put;
  wire dataMemory$EN_dmem_server_request_put,
       dataMemory$EN_dmem_server_response_get,
       dataMemory$EN_dumpMem_startDump,
       dataMemory$RDY_dmem_server_request_put,
       dataMemory$RDY_dmem_server_response_get,
       dataMemory$dumpMem_doneDump;

  // ports of submodule instMemory
  wire [38 : 0] instMemory$imem_server_response_get;
  wire [6 : 0] instMemory$imem_server_request_put;
  wire instMemory$EN_imem_server_request_put,
       instMemory$EN_imem_server_response_get,
       instMemory$RDY_imem_server_request_put,
       instMemory$RDY_imem_server_response_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_dumpMem_startDump,
       CAN_FIRE_getNoCPacket_get,
       CAN_FIRE_putNoCPacket_put,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_dumpMem_startDump,
       WILL_FIRE_getNoCPacket_get,
       WILL_FIRE_putNoCPacket_put;

  // action method putNoCPacket_put
  assign RDY_putNoCPacket_put = cpuToNetwork$RDY_putNoCPacket_put ;
  assign CAN_FIRE_putNoCPacket_put = cpuToNetwork$RDY_putNoCPacket_put ;
  assign WILL_FIRE_putNoCPacket_put = EN_putNoCPacket_put ;

  // actionvalue method getNoCPacket_get
  assign getNoCPacket_get = cpuToNetwork$getNoCPacket_get ;
  assign RDY_getNoCPacket_get = cpuToNetwork$RDY_getNoCPacket_get ;
  assign CAN_FIRE_getNoCPacket_get = cpuToNetwork$RDY_getNoCPacket_get ;
  assign WILL_FIRE_getNoCPacket_get = EN_getNoCPacket_get ;

  // value method checkStatus_getState
  assign checkStatus_getState = cpu$checkStatus_getState ;
  assign RDY_checkStatus_getState = 1'd1 ;

  // action method dumpMem_startDump
  assign RDY_dumpMem_startDump = 1'd1 ;
  assign CAN_FIRE_dumpMem_startDump = 1'd1 ;
  assign WILL_FIRE_dumpMem_startDump = EN_dumpMem_startDump ;

  // value method dumpMem_doneDump
  assign dumpMem_doneDump = dataMemory$dumpMem_doneDump ;
  assign RDY_dumpMem_doneDump = 1'd1 ;

  // submodule cpu
  mkProc #(.procId(procId)) cpu(.CLK(CLK),
				.RST_N(RST_N),
				.dmem_client_response_put(cpu$dmem_client_response_put),
				.imem_client_response_put(cpu$imem_client_response_put),
				.putDataPacket_put(cpu$putDataPacket_put),
				.EN_dmem_client_request_get(cpu$EN_dmem_client_request_get),
				.EN_dmem_client_response_put(cpu$EN_dmem_client_response_put),
				.EN_imem_client_request_get(cpu$EN_imem_client_request_get),
				.EN_imem_client_response_put(cpu$EN_imem_client_response_put),
				.EN_putDataPacket_put(cpu$EN_putDataPacket_put),
				.EN_getDataPacket_get(cpu$EN_getDataPacket_get),
				.dmem_client_request_get(cpu$dmem_client_request_get),
				.RDY_dmem_client_request_get(cpu$RDY_dmem_client_request_get),
				.RDY_dmem_client_response_put(cpu$RDY_dmem_client_response_put),
				.imem_client_request_get(cpu$imem_client_request_get),
				.RDY_imem_client_request_get(cpu$RDY_imem_client_request_get),
				.RDY_imem_client_response_put(cpu$RDY_imem_client_response_put),
				.RDY_putDataPacket_put(cpu$RDY_putDataPacket_put),
				.getDataPacket_get(cpu$getDataPacket_get),
				.RDY_getDataPacket_get(cpu$RDY_getDataPacket_get),
				.checkStatus_getState(cpu$checkStatus_getState),
				.RDY_checkStatus_getState());

  // submodule cpuToNetwork
  mkNetConnect cpuToNetwork(.CLK(CLK),
			    .RST_N(RST_N),
			    .putDataPacket_put(cpuToNetwork$putDataPacket_put),
			    .putNoCPacket_put(cpuToNetwork$putNoCPacket_put),
			    .EN_putDataPacket_put(cpuToNetwork$EN_putDataPacket_put),
			    .EN_getDataPacket_get(cpuToNetwork$EN_getDataPacket_get),
			    .EN_putNoCPacket_put(cpuToNetwork$EN_putNoCPacket_put),
			    .EN_getNoCPacket_get(cpuToNetwork$EN_getNoCPacket_get),
			    .RDY_putDataPacket_put(cpuToNetwork$RDY_putDataPacket_put),
			    .getDataPacket_get(cpuToNetwork$getDataPacket_get),
			    .RDY_getDataPacket_get(cpuToNetwork$RDY_getDataPacket_get),
			    .RDY_putNoCPacket_put(cpuToNetwork$RDY_putNoCPacket_put),
			    .getNoCPacket_get(cpuToNetwork$getNoCPacket_get),
			    .RDY_getNoCPacket_get(cpuToNetwork$RDY_getNoCPacket_get));

  // submodule dataMemory
  mkDmem #(.procId(procId)) dataMemory(.CLK(CLK),
				       .RST_N(RST_N),
				       .dmem_server_request_put(dataMemory$dmem_server_request_put),
				       .EN_dmem_server_request_put(dataMemory$EN_dmem_server_request_put),
				       .EN_dmem_server_response_get(dataMemory$EN_dmem_server_response_get),
				       .EN_dumpMem_startDump(dataMemory$EN_dumpMem_startDump),
				       .RDY_dmem_server_request_put(dataMemory$RDY_dmem_server_request_put),
				       .dmem_server_response_get(dataMemory$dmem_server_response_get),
				       .RDY_dmem_server_response_get(dataMemory$RDY_dmem_server_response_get),
				       .RDY_dumpMem_startDump(),
				       .dumpMem_doneDump(dataMemory$dumpMem_doneDump),
				       .RDY_dumpMem_doneDump());

  // submodule instMemory
  mkImem #(.procId(procId)) instMemory(.CLK(CLK),
				       .RST_N(RST_N),
				       .imem_server_request_put(instMemory$imem_server_request_put),
				       .EN_imem_server_request_put(instMemory$EN_imem_server_request_put),
				       .EN_imem_server_response_get(instMemory$EN_imem_server_response_get),
				       .RDY_imem_server_request_put(instMemory$RDY_imem_server_request_put),
				       .imem_server_response_get(instMemory$imem_server_response_get),
				       .RDY_imem_server_response_get(instMemory$RDY_imem_server_response_get));

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     dataMemory$RDY_dmem_server_request_put &&
	     cpu$RDY_dmem_client_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     dataMemory$RDY_dmem_server_response_get &&
	     cpu$RDY_dmem_client_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     instMemory$RDY_imem_server_request_put &&
	     cpu$RDY_imem_client_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     instMemory$RDY_imem_server_response_get &&
	     cpu$RDY_imem_client_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     cpuToNetwork$RDY_getDataPacket_get && cpu$RDY_putDataPacket_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     cpu$RDY_getDataPacket_get && cpuToNetwork$RDY_putDataPacket_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // submodule cpu
  assign cpu$dmem_client_response_put = dataMemory$dmem_server_response_get ;
  assign cpu$imem_client_response_put = instMemory$imem_server_response_get ;
  assign cpu$putDataPacket_put = cpuToNetwork$getDataPacket_get ;
  assign cpu$EN_dmem_client_request_get = CAN_FIRE_RL_ClientServerRequest ;
  assign cpu$EN_dmem_client_response_put = CAN_FIRE_RL_ClientServerResponse ;
  assign cpu$EN_imem_client_request_get = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign cpu$EN_imem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign cpu$EN_putDataPacket_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign cpu$EN_getDataPacket_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // submodule cpuToNetwork
  assign cpuToNetwork$putDataPacket_put = cpu$getDataPacket_get ;
  assign cpuToNetwork$putNoCPacket_put = putNoCPacket_put ;
  assign cpuToNetwork$EN_putDataPacket_put =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign cpuToNetwork$EN_getDataPacket_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign cpuToNetwork$EN_putNoCPacket_put = EN_putNoCPacket_put ;
  assign cpuToNetwork$EN_getNoCPacket_get = EN_getNoCPacket_get ;

  // submodule dataMemory
  assign dataMemory$dmem_server_request_put = cpu$dmem_client_request_get ;
  assign dataMemory$EN_dmem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign dataMemory$EN_dmem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign dataMemory$EN_dumpMem_startDump = EN_dumpMem_startDump ;

  // submodule instMemory
  assign instMemory$imem_server_request_put = cpu$imem_client_request_get ;
  assign instMemory$EN_imem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign instMemory$EN_imem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
endmodule  // mkCore

