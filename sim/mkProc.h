/*
 * Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
 * 
 * On Wed Jun  7 16:59:39 IST 2017
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkProc_h__
#define __mkProc_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkProc module */
class MOD_mkProc : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
  tUInt8 const PARAM_procId;
 
 /* Module state */
 public:
  MOD_CReg<tUInt64> INST_dataPacketInFQ_rv;
  MOD_Fifo<tUInt64> INST_dataPacketInQ_0;
  MOD_Fifo<tUInt64> INST_dataPacketInQ_1;
  MOD_Fifo<tUInt64> INST_dataPacketInQ_2;
  MOD_Fifo<tUInt64> INST_dataPacketInQ_3;
  MOD_Fifo<tUInt64> INST_dataPacketInQ_4;
  MOD_Fifo<tUInt64> INST_dataPacketInQ_5;
  MOD_Fifo<tUInt64> INST_dataPacketInQ_6;
  MOD_CReg<tUInt64> INST_dataPacketOutFQ_rv;
  MOD_Fifo<tUInt64> INST_dataReqQ;
  MOD_Fifo<tUInt64> INST_dataRespQ;
  MOD_Fifo<tUInt8> INST_dumpFIFORead;
  MOD_Reg<tUInt8> INST_dumpFIFOReadSrc;
  MOD_Fifo<tUInt8> INST_dumpFIFOWrite;
  MOD_Reg<tUInt8> INST_dumpFIFOWriteDest;
  MOD_Reg<tUInt32> INST_dumpFile;
  MOD_Reg<tUInt8> INST_dumpState;
  MOD_Wire<tUInt8> INST_fillFIFOArbiter_grant_id_wire;
  MOD_Wire<tUInt8> INST_fillFIFOArbiter_grant_vector;
  MOD_Reg<tUInt8> INST_fillFIFOArbiter_priority_vector;
  MOD_Wire<tUInt8> INST_fillFIFOArbiter_request_vector_0;
  MOD_Wire<tUInt8> INST_fillFIFOArbiter_request_vector_1;
  MOD_Wire<tUInt8> INST_fillFIFOArbiter_request_vector_2;
  MOD_Wire<tUInt8> INST_fillFIFOArbiter_request_vector_3;
  MOD_Wire<tUInt8> INST_fillFIFOArbiter_request_vector_4;
  MOD_Wire<tUInt8> INST_fillFIFOArbiter_request_vector_5;
  MOD_Wire<tUInt8> INST_fillFIFOArbiter_request_vector_6;
  MOD_Fifo<tUInt8> INST_instReqQ;
  MOD_Fifo<tUInt64> INST_instRespQ;
  MOD_Reg<tUInt32> INST_numCycles;
  MOD_Reg<tUInt8> INST_pc;
  MOD_Fifo<tUInt32> INST_pendingFIFORead;
  MOD_Wire<tUInt8> INST_readFIFOArbiter_grant_id_wire;
  MOD_Wire<tUInt8> INST_readFIFOArbiter_grant_vector;
  MOD_Reg<tUInt8> INST_readFIFOArbiter_priority_vector;
  MOD_Wire<tUInt8> INST_readFIFOArbiter_request_vector_0;
  MOD_Wire<tUInt8> INST_readFIFOArbiter_request_vector_1;
  MOD_Wire<tUInt8> INST_readFIFOArbiter_request_vector_2;
  MOD_Wire<tUInt8> INST_readFIFOArbiter_request_vector_3;
  MOD_Wire<tUInt8> INST_readFIFOArbiter_request_vector_4;
  MOD_Wire<tUInt8> INST_readFIFOArbiter_request_vector_5;
  MOD_Wire<tUInt8> INST_readFIFOArbiter_request_vector_6;
  MOD_RegFile<tUInt8,tUInt32> INST_rf_rfile;
  MOD_Reg<tUInt8> INST_stage;
  MOD_Reg<tUInt8> INST_state;
 
 /* Constructor */
 public:
  MOD_mkProc(tSimStateHdl simHdl, char const *name, Module *parent, tUInt8 ARG_procId);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_dmem_client_request_get;
  tUInt8 PORT_EN_dmem_client_response_put;
  tUInt8 PORT_EN_imem_client_request_get;
  tUInt8 PORT_EN_imem_client_response_put;
  tUInt8 PORT_EN_putDataPacket_put;
  tUInt8 PORT_EN_getDataPacket_get;
  tUInt64 PORT_dmem_client_response_put;
  tUInt64 PORT_imem_client_response_put;
  tUInt64 PORT_putDataPacket_put;
  tUInt8 PORT_checkStatus_getState;
  tUInt8 PORT_RDY_checkStatus_getState;
  tUInt64 PORT_dmem_client_request_get;
  tUInt8 PORT_RDY_dmem_client_request_get;
  tUInt8 PORT_RDY_dmem_client_response_put;
  tUInt8 PORT_imem_client_request_get;
  tUInt8 PORT_RDY_imem_client_request_get;
  tUInt8 PORT_RDY_imem_client_response_put;
  tUInt8 PORT_RDY_putDataPacket_put;
  tUInt64 PORT_getDataPacket_get;
  tUInt8 PORT_RDY_getDataPacket_get;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_countCycles;
  tUInt8 DEF_CAN_FIRE_RL_countCycles;
  tUInt8 DEF_CAN_FIRE_checkStatus_getState;
  tUInt8 DEF_WILL_FIRE_RL_closeDumpFile;
  tUInt8 DEF_CAN_FIRE_RL_closeDumpFile;
  tUInt8 DEF_WILL_FIRE_RL_openDumpFile;
  tUInt8 DEF_CAN_FIRE_RL_openDumpFile;
  tUInt8 DEF_WILL_FIRE_getDataPacket_get;
  tUInt8 DEF_WILL_FIRE_putDataPacket_put;
  tUInt8 DEF_WILL_FIRE_imem_client_response_put;
  tUInt8 DEF_WILL_FIRE_imem_client_request_get;
  tUInt8 DEF_WILL_FIRE_dmem_client_response_put;
  tUInt8 DEF_WILL_FIRE_dmem_client_request_get;
  tUInt8 DEF_WILL_FIRE___me_check_14;
  tUInt8 DEF_CAN_FIRE___me_check_14;
  tUInt8 DEF_WILL_FIRE___me_check_5;
  tUInt8 DEF_CAN_FIRE___me_check_5;
  tUInt8 DEF_WILL_FIRE_RL_dumpMessage;
  tUInt8 DEF_CAN_FIRE_RL_dumpMessage;
  tUInt8 DEF_WILL_FIRE_RL_fillFIFOi_6;
  tUInt8 DEF_CAN_FIRE_RL_fillFIFOi_6;
  tUInt8 DEF_WILL_FIRE_RL_fillFIFOi_5;
  tUInt8 DEF_CAN_FIRE_RL_fillFIFOi_5;
  tUInt8 DEF_WILL_FIRE_RL_fillFIFOi_4;
  tUInt8 DEF_CAN_FIRE_RL_fillFIFOi_4;
  tUInt8 DEF_WILL_FIRE_RL_fillFIFOi_3;
  tUInt8 DEF_CAN_FIRE_RL_fillFIFOi_3;
  tUInt8 DEF_WILL_FIRE_RL_fillFIFOi_2;
  tUInt8 DEF_CAN_FIRE_RL_fillFIFOi_2;
  tUInt8 DEF_WILL_FIRE_RL_fillFIFOi_1;
  tUInt8 DEF_CAN_FIRE_RL_fillFIFOi_1;
  tUInt8 DEF_WILL_FIRE_RL_fillFIFOi;
  tUInt8 DEF_CAN_FIRE_RL_fillFIFOi;
  tUInt8 DEF_WILL_FIRE_RL_deqDataPacketInFQ;
  tUInt8 DEF_CAN_FIRE_RL_deqDataPacketInFQ;
  tUInt8 DEF_WILL_FIRE_RL_writeback;
  tUInt8 DEF_CAN_FIRE_RL_writeback;
  tUInt8 DEF_WILL_FIRE_RL_readFromFIFOi_6;
  tUInt8 DEF_CAN_FIRE_RL_readFromFIFOi_6;
  tUInt8 DEF_WILL_FIRE_RL_readFromFIFOi_5;
  tUInt8 DEF_CAN_FIRE_RL_readFromFIFOi_5;
  tUInt8 DEF_WILL_FIRE_RL_readFromFIFOi_4;
  tUInt8 DEF_CAN_FIRE_RL_readFromFIFOi_4;
  tUInt8 DEF_WILL_FIRE_RL_readFromFIFOi_3;
  tUInt8 DEF_CAN_FIRE_RL_readFromFIFOi_3;
  tUInt8 DEF_WILL_FIRE_RL_readFromFIFOi_2;
  tUInt8 DEF_CAN_FIRE_RL_readFromFIFOi_2;
  tUInt8 DEF_WILL_FIRE_RL_readFromFIFOi_1;
  tUInt8 DEF_CAN_FIRE_RL_readFromFIFOi_1;
  tUInt8 DEF_WILL_FIRE_RL_readFromFIFOi;
  tUInt8 DEF_CAN_FIRE_RL_readFromFIFOi;
  tUInt8 DEF_WILL_FIRE_RL_servicePendingFIFORead;
  tUInt8 DEF_CAN_FIRE_RL_servicePendingFIFORead;
  tUInt8 DEF_WILL_FIRE_RL_exec;
  tUInt8 DEF_CAN_FIRE_RL_exec;
  tUInt8 DEF_WILL_FIRE_RL_pcgen;
  tUInt8 DEF_CAN_FIRE_RL_pcgen;
  tUInt8 DEF_WILL_FIRE_RL_fillFIFOArbiter_every;
  tUInt8 DEF_CAN_FIRE_RL_fillFIFOArbiter_every;
  tUInt8 DEF_WILL_FIRE_RL_readFIFOArbiter_every;
  tUInt8 DEF_CAN_FIRE_RL_readFIFOArbiter_every;
  tUInt8 DEF_CAN_FIRE_getDataPacket_get;
  tUInt64 DEF_dataPacketOutFQ_rv_port1__read____d3749;
  tUInt8 DEF_CAN_FIRE_putDataPacket_put;
  tUInt8 DEF_CAN_FIRE_imem_client_response_put;
  tUInt8 DEF_CAN_FIRE_imem_client_request_get;
  tUInt8 DEF_CAN_FIRE_dmem_client_response_put;
  tUInt8 DEF_CAN_FIRE_dmem_client_request_get;
  tUInt8 DEF_dumpFIFORead_i_notEmpty____d3710;
  tUInt8 DEF_dumpFIFOWrite_i_notEmpty____d3711;
  tUInt64 DEF_dataPacketInFQ_rv_port1__read____d3626;
 
 /* Local definitions */
 private:
  tUInt32 DEF_x__h288983;
  tUInt32 DEF_b__h289532;
  tUInt32 DEF_pendingFIFORead_first____d3530;
  tUInt32 DEF_dumpFile___d3719;
  tUInt8 DEF_y_avValue_snd_fst__h283826;
  tUInt64 DEF_dataPacketInFQ_rv_port1__read__626_BITS_40_TO_0___d3660;
  tUInt8 DEF_regDest__h285191;
  tUInt8 DEF_x__h286637;
  tUInt8 DEF_procId_EQ_6___d3561;
  tUInt8 DEF_procId_EQ_5___d3559;
  tUInt8 DEF_procId_EQ_4___d3557;
  tUInt8 DEF_procId_EQ_3___d3555;
  tUInt8 DEF_procId_EQ_2___d3553;
  tUInt8 DEF_procId_EQ_1___d3551;
  std::string DEF_dumpFilename__h288966;
  tUInt8 DEF_procId_EQ_0___d3548;
  tUInt64 DEF__0_CONCAT_DONTCARE___d3659;
 
 /* Rules */
 public:
  void RL_readFIFOArbiter_every();
  void RL_fillFIFOArbiter_every();
  void RL_pcgen();
  void RL_exec();
  void RL_servicePendingFIFORead();
  void RL_readFromFIFOi();
  void RL_readFromFIFOi_1();
  void RL_readFromFIFOi_2();
  void RL_readFromFIFOi_3();
  void RL_readFromFIFOi_4();
  void RL_readFromFIFOi_5();
  void RL_readFromFIFOi_6();
  void RL_writeback();
  void RL_deqDataPacketInFQ();
  void RL_fillFIFOi();
  void RL_fillFIFOi_1();
  void RL_fillFIFOi_2();
  void RL_fillFIFOi_3();
  void RL_fillFIFOi_4();
  void RL_fillFIFOi_5();
  void RL_fillFIFOi_6();
  void RL_openDumpFile();
  void RL_dumpMessage();
  void RL_closeDumpFile();
  void RL_countCycles();
  void __me_check_5();
  void __me_check_14();
 
 /* Methods */
 public:
  tUInt64 METH_dmem_client_request_get();
  tUInt8 METH_RDY_dmem_client_request_get();
  void METH_dmem_client_response_put(tUInt64 ARG_dmem_client_response_put);
  tUInt8 METH_RDY_dmem_client_response_put();
  tUInt8 METH_imem_client_request_get();
  tUInt8 METH_RDY_imem_client_request_get();
  void METH_imem_client_response_put(tUInt64 ARG_imem_client_response_put);
  tUInt8 METH_RDY_imem_client_response_put();
  void METH_putDataPacket_put(tUInt64 ARG_putDataPacket_put);
  tUInt8 METH_RDY_putDataPacket_put();
  tUInt64 METH_getDataPacket_get();
  tUInt8 METH_RDY_getDataPacket_get();
  tUInt8 METH_checkStatus_getState();
  tUInt8 METH_RDY_checkStatus_getState();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkProc &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkProc &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkProc &backing);
};

#endif /* ifndef __mkProc_h__ */
