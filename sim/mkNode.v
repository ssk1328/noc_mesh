//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Wed May  7 20:06:55 IST 2014
//
// Method conflict info:
// Method: channels_0_putNoCPacket_put
// Conflict-free: channels_0_getNoCPacket_get,
// 	       channels_1_putNoCPacket_put,
// 	       channels_1_getNoCPacket_get,
// 	       channels_2_putNoCPacket_put,
// 	       channels_2_getNoCPacket_get,
// 	       channels_3_putNoCPacket_put,
// 	       channels_3_getNoCPacket_get,
// 	       channels_4_putNoCPacket_put,
// 	       channels_4_getNoCPacket_get
// Conflicts: channels_0_putNoCPacket_put
//
// Method: channels_0_getNoCPacket_get
// Conflict-free: channels_0_putNoCPacket_put,
// 	       channels_1_putNoCPacket_put,
// 	       channels_1_getNoCPacket_get,
// 	       channels_2_putNoCPacket_put,
// 	       channels_2_getNoCPacket_get,
// 	       channels_3_putNoCPacket_put,
// 	       channels_3_getNoCPacket_get,
// 	       channels_4_putNoCPacket_put,
// 	       channels_4_getNoCPacket_get
// Conflicts: channels_0_getNoCPacket_get
//
// Method: channels_1_putNoCPacket_put
// Conflict-free: channels_0_putNoCPacket_put,
// 	       channels_0_getNoCPacket_get,
// 	       channels_1_getNoCPacket_get,
// 	       channels_2_putNoCPacket_put,
// 	       channels_2_getNoCPacket_get,
// 	       channels_3_putNoCPacket_put,
// 	       channels_3_getNoCPacket_get,
// 	       channels_4_putNoCPacket_put,
// 	       channels_4_getNoCPacket_get
// Conflicts: channels_1_putNoCPacket_put
//
// Method: channels_1_getNoCPacket_get
// Conflict-free: channels_0_putNoCPacket_put,
// 	       channels_0_getNoCPacket_get,
// 	       channels_1_putNoCPacket_put,
// 	       channels_2_putNoCPacket_put,
// 	       channels_2_getNoCPacket_get,
// 	       channels_3_putNoCPacket_put,
// 	       channels_3_getNoCPacket_get,
// 	       channels_4_putNoCPacket_put,
// 	       channels_4_getNoCPacket_get
// Conflicts: channels_1_getNoCPacket_get
//
// Method: channels_2_putNoCPacket_put
// Conflict-free: channels_0_putNoCPacket_put,
// 	       channels_0_getNoCPacket_get,
// 	       channels_1_putNoCPacket_put,
// 	       channels_1_getNoCPacket_get,
// 	       channels_2_getNoCPacket_get,
// 	       channels_3_putNoCPacket_put,
// 	       channels_3_getNoCPacket_get,
// 	       channels_4_putNoCPacket_put,
// 	       channels_4_getNoCPacket_get
// Conflicts: channels_2_putNoCPacket_put
//
// Method: channels_2_getNoCPacket_get
// Conflict-free: channels_0_putNoCPacket_put,
// 	       channels_0_getNoCPacket_get,
// 	       channels_1_putNoCPacket_put,
// 	       channels_1_getNoCPacket_get,
// 	       channels_2_putNoCPacket_put,
// 	       channels_3_putNoCPacket_put,
// 	       channels_3_getNoCPacket_get,
// 	       channels_4_putNoCPacket_put,
// 	       channels_4_getNoCPacket_get
// Conflicts: channels_2_getNoCPacket_get
//
// Method: channels_3_putNoCPacket_put
// Conflict-free: channels_0_putNoCPacket_put,
// 	       channels_0_getNoCPacket_get,
// 	       channels_1_putNoCPacket_put,
// 	       channels_1_getNoCPacket_get,
// 	       channels_2_putNoCPacket_put,
// 	       channels_2_getNoCPacket_get,
// 	       channels_3_getNoCPacket_get,
// 	       channels_4_putNoCPacket_put,
// 	       channels_4_getNoCPacket_get
// Conflicts: channels_3_putNoCPacket_put
//
// Method: channels_3_getNoCPacket_get
// Conflict-free: channels_0_putNoCPacket_put,
// 	       channels_0_getNoCPacket_get,
// 	       channels_1_putNoCPacket_put,
// 	       channels_1_getNoCPacket_get,
// 	       channels_2_putNoCPacket_put,
// 	       channels_2_getNoCPacket_get,
// 	       channels_3_putNoCPacket_put,
// 	       channels_4_putNoCPacket_put,
// 	       channels_4_getNoCPacket_get
// Conflicts: channels_3_getNoCPacket_get
//
// Method: channels_4_putNoCPacket_put
// Conflict-free: channels_0_putNoCPacket_put,
// 	       channels_0_getNoCPacket_get,
// 	       channels_1_putNoCPacket_put,
// 	       channels_1_getNoCPacket_get,
// 	       channels_2_putNoCPacket_put,
// 	       channels_2_getNoCPacket_get,
// 	       channels_3_putNoCPacket_put,
// 	       channels_3_getNoCPacket_get,
// 	       channels_4_getNoCPacket_get
// Conflicts: channels_4_putNoCPacket_put
//
// Method: channels_4_getNoCPacket_get
// Conflict-free: channels_0_putNoCPacket_put,
// 	       channels_0_getNoCPacket_get,
// 	       channels_1_putNoCPacket_put,
// 	       channels_1_getNoCPacket_get,
// 	       channels_2_putNoCPacket_put,
// 	       channels_2_getNoCPacket_get,
// 	       channels_3_putNoCPacket_put,
// 	       channels_3_getNoCPacket_get,
// 	       channels_4_putNoCPacket_put
// Conflicts: channels_4_getNoCPacket_get
//
//
// Ports:
// Name                         I/O  size props
// RDY_channels_0_putNoCPacket_put  O     1 reg
// channels_0_getNoCPacket_get    O    48 reg
// RDY_channels_0_getNoCPacket_get  O     1 reg
// RDY_channels_1_putNoCPacket_put  O     1 reg
// channels_1_getNoCPacket_get    O    48 reg
// RDY_channels_1_getNoCPacket_get  O     1 reg
// RDY_channels_2_putNoCPacket_put  O     1 reg
// channels_2_getNoCPacket_get    O    48 reg
// RDY_channels_2_getNoCPacket_get  O     1 reg
// RDY_channels_3_putNoCPacket_put  O     1 reg
// channels_3_getNoCPacket_get    O    48 reg
// RDY_channels_3_getNoCPacket_get  O     1 reg
// RDY_channels_4_putNoCPacket_put  O     1 reg
// channels_4_getNoCPacket_get    O    48 reg
// RDY_channels_4_getNoCPacket_get  O     1 reg
// thisRowAddr                    I     2
// thisColAddr                    I     2
// CLK                            I     1 clock
// RST_N                          I     1 reset
// channels_0_putNoCPacket_put    I    48 reg
// channels_1_putNoCPacket_put    I    48 reg
// channels_2_putNoCPacket_put    I    48 reg
// channels_3_putNoCPacket_put    I    48 reg
// channels_4_putNoCPacket_put    I    48 reg
// EN_channels_0_putNoCPacket_put  I     1
// EN_channels_1_putNoCPacket_put  I     1
// EN_channels_2_putNoCPacket_put  I     1
// EN_channels_3_putNoCPacket_put  I     1
// EN_channels_4_putNoCPacket_put  I     1
// EN_channels_0_getNoCPacket_get  I     1
// EN_channels_1_getNoCPacket_get  I     1
// EN_channels_2_getNoCPacket_get  I     1
// EN_channels_3_getNoCPacket_get  I     1
// EN_channels_4_getNoCPacket_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkNode(thisRowAddr,
	      thisColAddr,
	      CLK,
	      RST_N,

	      channels_0_putNoCPacket_put,
	      EN_channels_0_putNoCPacket_put,
	      RDY_channels_0_putNoCPacket_put,

	      EN_channels_0_getNoCPacket_get,
	      channels_0_getNoCPacket_get,
	      RDY_channels_0_getNoCPacket_get,

	      channels_1_putNoCPacket_put,
	      EN_channels_1_putNoCPacket_put,
	      RDY_channels_1_putNoCPacket_put,

	      EN_channels_1_getNoCPacket_get,
	      channels_1_getNoCPacket_get,
	      RDY_channels_1_getNoCPacket_get,

	      channels_2_putNoCPacket_put,
	      EN_channels_2_putNoCPacket_put,
	      RDY_channels_2_putNoCPacket_put,

	      EN_channels_2_getNoCPacket_get,
	      channels_2_getNoCPacket_get,
	      RDY_channels_2_getNoCPacket_get,

	      channels_3_putNoCPacket_put,
	      EN_channels_3_putNoCPacket_put,
	      RDY_channels_3_putNoCPacket_put,

	      EN_channels_3_getNoCPacket_get,
	      channels_3_getNoCPacket_get,
	      RDY_channels_3_getNoCPacket_get,

	      channels_4_putNoCPacket_put,
	      EN_channels_4_putNoCPacket_put,
	      RDY_channels_4_putNoCPacket_put,

	      EN_channels_4_getNoCPacket_get,
	      channels_4_getNoCPacket_get,
	      RDY_channels_4_getNoCPacket_get);
  input  [1 : 0] thisRowAddr;
  input  [1 : 0] thisColAddr;
  input  CLK;
  input  RST_N;

  // action method channels_0_putNoCPacket_put
  input  [47 : 0] channels_0_putNoCPacket_put;
  input  EN_channels_0_putNoCPacket_put;
  output RDY_channels_0_putNoCPacket_put;

  // actionvalue method channels_0_getNoCPacket_get
  input  EN_channels_0_getNoCPacket_get;
  output [47 : 0] channels_0_getNoCPacket_get;
  output RDY_channels_0_getNoCPacket_get;

  // action method channels_1_putNoCPacket_put
  input  [47 : 0] channels_1_putNoCPacket_put;
  input  EN_channels_1_putNoCPacket_put;
  output RDY_channels_1_putNoCPacket_put;

  // actionvalue method channels_1_getNoCPacket_get
  input  EN_channels_1_getNoCPacket_get;
  output [47 : 0] channels_1_getNoCPacket_get;
  output RDY_channels_1_getNoCPacket_get;

  // action method channels_2_putNoCPacket_put
  input  [47 : 0] channels_2_putNoCPacket_put;
  input  EN_channels_2_putNoCPacket_put;
  output RDY_channels_2_putNoCPacket_put;

  // actionvalue method channels_2_getNoCPacket_get
  input  EN_channels_2_getNoCPacket_get;
  output [47 : 0] channels_2_getNoCPacket_get;
  output RDY_channels_2_getNoCPacket_get;

  // action method channels_3_putNoCPacket_put
  input  [47 : 0] channels_3_putNoCPacket_put;
  input  EN_channels_3_putNoCPacket_put;
  output RDY_channels_3_putNoCPacket_put;

  // actionvalue method channels_3_getNoCPacket_get
  input  EN_channels_3_getNoCPacket_get;
  output [47 : 0] channels_3_getNoCPacket_get;
  output RDY_channels_3_getNoCPacket_get;

  // action method channels_4_putNoCPacket_put
  input  [47 : 0] channels_4_putNoCPacket_put;
  input  EN_channels_4_putNoCPacket_put;
  output RDY_channels_4_putNoCPacket_put;

  // actionvalue method channels_4_getNoCPacket_get
  input  EN_channels_4_getNoCPacket_get;
  output [47 : 0] channels_4_getNoCPacket_get;
  output RDY_channels_4_getNoCPacket_get;

  // signals for module outputs
  wire [47 : 0] channels_0_getNoCPacket_get,
		channels_1_getNoCPacket_get,
		channels_2_getNoCPacket_get,
		channels_3_getNoCPacket_get,
		channels_4_getNoCPacket_get;
  wire RDY_channels_0_getNoCPacket_get,
       RDY_channels_0_putNoCPacket_put,
       RDY_channels_1_getNoCPacket_get,
       RDY_channels_1_putNoCPacket_put,
       RDY_channels_2_getNoCPacket_get,
       RDY_channels_2_putNoCPacket_put,
       RDY_channels_3_getNoCPacket_get,
       RDY_channels_3_putNoCPacket_put,
       RDY_channels_4_getNoCPacket_get,
       RDY_channels_4_putNoCPacket_put;

  // inlined wires
  wire [4 : 0] inputChannelArbiter_grant_vector$wget,
	       outputChannelArbiter_grant_vector$wget;
  wire outputChannelArbiter_request_vector$whas,
       outputChannelArbiter_request_vector_1$whas,
       outputChannelArbiter_request_vector_2$whas,
       outputChannelArbiter_request_vector_3$whas,
       outputChannelArbiter_request_vector_4$whas;

  // register inputChannelArbiter_priority_vector
  reg [4 : 0] inputChannelArbiter_priority_vector;
  wire [4 : 0] inputChannelArbiter_priority_vector$D_IN;
  wire inputChannelArbiter_priority_vector$EN;

  // register outputChannelArbiter_priority_vector
  reg [4 : 0] outputChannelArbiter_priority_vector;
  wire [4 : 0] outputChannelArbiter_priority_vector$D_IN;
  wire outputChannelArbiter_priority_vector$EN;

  // ports of submodule channelInQ_0
  wire [47 : 0] channelInQ_0$D_IN, channelInQ_0$D_OUT;
  wire channelInQ_0$CLR,
       channelInQ_0$DEQ,
       channelInQ_0$EMPTY_N,
       channelInQ_0$ENQ,
       channelInQ_0$FULL_N;

  // ports of submodule channelInQ_1
  wire [47 : 0] channelInQ_1$D_IN, channelInQ_1$D_OUT;
  wire channelInQ_1$CLR,
       channelInQ_1$DEQ,
       channelInQ_1$EMPTY_N,
       channelInQ_1$ENQ,
       channelInQ_1$FULL_N;

  // ports of submodule channelInQ_2
  wire [47 : 0] channelInQ_2$D_IN, channelInQ_2$D_OUT;
  wire channelInQ_2$CLR,
       channelInQ_2$DEQ,
       channelInQ_2$EMPTY_N,
       channelInQ_2$ENQ,
       channelInQ_2$FULL_N;

  // ports of submodule channelInQ_3
  wire [47 : 0] channelInQ_3$D_IN, channelInQ_3$D_OUT;
  wire channelInQ_3$CLR,
       channelInQ_3$DEQ,
       channelInQ_3$EMPTY_N,
       channelInQ_3$ENQ,
       channelInQ_3$FULL_N;

  // ports of submodule channelInQ_4
  wire [47 : 0] channelInQ_4$D_IN, channelInQ_4$D_OUT;
  wire channelInQ_4$CLR,
       channelInQ_4$DEQ,
       channelInQ_4$EMPTY_N,
       channelInQ_4$ENQ,
       channelInQ_4$FULL_N;

  // ports of submodule channelOutQ_0
  wire [47 : 0] channelOutQ_0$D_IN, channelOutQ_0$D_OUT;
  wire channelOutQ_0$CLR,
       channelOutQ_0$DEQ,
       channelOutQ_0$EMPTY_N,
       channelOutQ_0$ENQ,
       channelOutQ_0$FULL_N;

  // ports of submodule channelOutQ_1
  wire [47 : 0] channelOutQ_1$D_IN, channelOutQ_1$D_OUT;
  wire channelOutQ_1$CLR,
       channelOutQ_1$DEQ,
       channelOutQ_1$EMPTY_N,
       channelOutQ_1$ENQ,
       channelOutQ_1$FULL_N;

  // ports of submodule channelOutQ_2
  wire [47 : 0] channelOutQ_2$D_IN, channelOutQ_2$D_OUT;
  wire channelOutQ_2$CLR,
       channelOutQ_2$DEQ,
       channelOutQ_2$EMPTY_N,
       channelOutQ_2$ENQ,
       channelOutQ_2$FULL_N;

  // ports of submodule channelOutQ_3
  wire [47 : 0] channelOutQ_3$D_IN, channelOutQ_3$D_OUT;
  wire channelOutQ_3$CLR,
       channelOutQ_3$DEQ,
       channelOutQ_3$EMPTY_N,
       channelOutQ_3$ENQ,
       channelOutQ_3$FULL_N;

  // ports of submodule channelOutQ_4
  wire [47 : 0] channelOutQ_4$D_IN, channelOutQ_4$D_OUT;
  wire channelOutQ_4$CLR,
       channelOutQ_4$DEQ,
       channelOutQ_4$EMPTY_N,
       channelOutQ_4$ENQ,
       channelOutQ_4$FULL_N;

  // ports of submodule routePacketQ
  reg [47 : 0] routePacketQ$D_IN;
  wire [47 : 0] routePacketQ$D_OUT;
  wire routePacketQ$CLR,
       routePacketQ$DEQ,
       routePacketQ$EMPTY_N,
       routePacketQ$ENQ,
       routePacketQ$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_inputArbitratei,
       CAN_FIRE_RL_inputArbitratei_1,
       CAN_FIRE_RL_inputArbitratei_2,
       CAN_FIRE_RL_inputArbitratei_3,
       CAN_FIRE_RL_inputArbitratei_4,
       CAN_FIRE_RL_inputChannelArbiterRequest,
       CAN_FIRE_RL_inputChannelArbiter_every,
       CAN_FIRE_RL_outputArbitratei,
       CAN_FIRE_RL_outputArbitratei_1,
       CAN_FIRE_RL_outputArbitratei_2,
       CAN_FIRE_RL_outputArbitratei_3,
       CAN_FIRE_RL_outputArbitratei_4,
       CAN_FIRE_RL_outputChannelArbiter_every,
       CAN_FIRE_RL_routePacket,
       CAN_FIRE___me_check_3,
       CAN_FIRE___me_check_9,
       CAN_FIRE_channels_0_getNoCPacket_get,
       CAN_FIRE_channels_0_putNoCPacket_put,
       CAN_FIRE_channels_1_getNoCPacket_get,
       CAN_FIRE_channels_1_putNoCPacket_put,
       CAN_FIRE_channels_2_getNoCPacket_get,
       CAN_FIRE_channels_2_putNoCPacket_put,
       CAN_FIRE_channels_3_getNoCPacket_get,
       CAN_FIRE_channels_3_putNoCPacket_put,
       CAN_FIRE_channels_4_getNoCPacket_get,
       CAN_FIRE_channels_4_putNoCPacket_put,
       WILL_FIRE_RL_inputArbitratei,
       WILL_FIRE_RL_inputArbitratei_1,
       WILL_FIRE_RL_inputArbitratei_2,
       WILL_FIRE_RL_inputArbitratei_3,
       WILL_FIRE_RL_inputArbitratei_4,
       WILL_FIRE_RL_inputChannelArbiterRequest,
       WILL_FIRE_RL_inputChannelArbiter_every,
       WILL_FIRE_RL_outputArbitratei,
       WILL_FIRE_RL_outputArbitratei_1,
       WILL_FIRE_RL_outputArbitratei_2,
       WILL_FIRE_RL_outputArbitratei_3,
       WILL_FIRE_RL_outputArbitratei_4,
       WILL_FIRE_RL_outputChannelArbiter_every,
       WILL_FIRE_RL_routePacket,
       WILL_FIRE___me_check_3,
       WILL_FIRE___me_check_9,
       WILL_FIRE_channels_0_getNoCPacket_get,
       WILL_FIRE_channels_0_putNoCPacket_put,
       WILL_FIRE_channels_1_getNoCPacket_get,
       WILL_FIRE_channels_1_putNoCPacket_put,
       WILL_FIRE_channels_2_getNoCPacket_get,
       WILL_FIRE_channels_2_putNoCPacket_put,
       WILL_FIRE_channels_3_getNoCPacket_get,
       WILL_FIRE_channels_3_putNoCPacket_put,
       WILL_FIRE_channels_4_getNoCPacket_get,
       WILL_FIRE_channels_4_putNoCPacket_put;

  // remaining internal signals
  wire NOT_inputChannelArbiter_request_vector_1_whas__ETC___d18,
       NOT_outputChannelArbiter_request_vector_1_whas_ETC___d109,
       NOT_routePacketQ_first__18_BITS_43_TO_42_19_EQ_ETC___d247,
       inputChannelArbiter_priority_vector_BIT_0_5_OR_ETC___d306,
       inputChannelArbiter_priority_vector_BIT_0_5_OR_ETC___d56,
       inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d295,
       inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d307,
       inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d44,
       inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d288,
       inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d308,
       inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d33,
       inputChannelArbiter_priority_vector_BIT_3_OR_N_ETC___d302,
       inputChannelArbiter_priority_vector_BIT_3_OR_N_ETC___d309,
       inputChannelArbiter_priority_vector_BIT_4_OR_0_ETC___d25,
       inputChannelArbiter_priority_vector_BIT_4_OR_N_ETC___d67,
       outputChannelArbiter_priority_vector_2_BIT_0_0_ETC___d147,
       outputChannelArbiter_priority_vector_2_BIT_0_0_ETC___d322,
       outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d135,
       outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d311,
       outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d323,
       outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d124,
       outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d291,
       outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d324,
       outputChannelArbiter_priority_vector_2_BIT_3_7_ETC___d318,
       outputChannelArbiter_priority_vector_2_BIT_3_7_ETC___d325,
       outputChannelArbiter_priority_vector_2_BIT_4_3_ETC___d116,
       outputChannelArbiter_priority_vector_2_BIT_4_3_ETC___d158,
       routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d223,
       routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d235,
       routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d222,
       routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d229,
       routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d220,
       routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d224;

  // action method channels_0_putNoCPacket_put
  assign RDY_channels_0_putNoCPacket_put = channelInQ_0$FULL_N ;
  assign CAN_FIRE_channels_0_putNoCPacket_put = channelInQ_0$FULL_N ;
  assign WILL_FIRE_channels_0_putNoCPacket_put =
	     EN_channels_0_putNoCPacket_put ;

  // actionvalue method channels_0_getNoCPacket_get
  assign channels_0_getNoCPacket_get = channelOutQ_0$D_OUT ;
  assign RDY_channels_0_getNoCPacket_get = channelOutQ_0$EMPTY_N ;
  assign CAN_FIRE_channels_0_getNoCPacket_get = channelOutQ_0$EMPTY_N ;
  assign WILL_FIRE_channels_0_getNoCPacket_get =
	     EN_channels_0_getNoCPacket_get ;

  // action method channels_1_putNoCPacket_put
  assign RDY_channels_1_putNoCPacket_put = channelInQ_1$FULL_N ;
  assign CAN_FIRE_channels_1_putNoCPacket_put = channelInQ_1$FULL_N ;
  assign WILL_FIRE_channels_1_putNoCPacket_put =
	     EN_channels_1_putNoCPacket_put ;

  // actionvalue method channels_1_getNoCPacket_get
  assign channels_1_getNoCPacket_get = channelOutQ_1$D_OUT ;
  assign RDY_channels_1_getNoCPacket_get = channelOutQ_1$EMPTY_N ;
  assign CAN_FIRE_channels_1_getNoCPacket_get = channelOutQ_1$EMPTY_N ;
  assign WILL_FIRE_channels_1_getNoCPacket_get =
	     EN_channels_1_getNoCPacket_get ;

  // action method channels_2_putNoCPacket_put
  assign RDY_channels_2_putNoCPacket_put = channelInQ_2$FULL_N ;
  assign CAN_FIRE_channels_2_putNoCPacket_put = channelInQ_2$FULL_N ;
  assign WILL_FIRE_channels_2_putNoCPacket_put =
	     EN_channels_2_putNoCPacket_put ;

  // actionvalue method channels_2_getNoCPacket_get
  assign channels_2_getNoCPacket_get = channelOutQ_2$D_OUT ;
  assign RDY_channels_2_getNoCPacket_get = channelOutQ_2$EMPTY_N ;
  assign CAN_FIRE_channels_2_getNoCPacket_get = channelOutQ_2$EMPTY_N ;
  assign WILL_FIRE_channels_2_getNoCPacket_get =
	     EN_channels_2_getNoCPacket_get ;

  // action method channels_3_putNoCPacket_put
  assign RDY_channels_3_putNoCPacket_put = channelInQ_3$FULL_N ;
  assign CAN_FIRE_channels_3_putNoCPacket_put = channelInQ_3$FULL_N ;
  assign WILL_FIRE_channels_3_putNoCPacket_put =
	     EN_channels_3_putNoCPacket_put ;

  // actionvalue method channels_3_getNoCPacket_get
  assign channels_3_getNoCPacket_get = channelOutQ_3$D_OUT ;
  assign RDY_channels_3_getNoCPacket_get = channelOutQ_3$EMPTY_N ;
  assign CAN_FIRE_channels_3_getNoCPacket_get = channelOutQ_3$EMPTY_N ;
  assign WILL_FIRE_channels_3_getNoCPacket_get =
	     EN_channels_3_getNoCPacket_get ;

  // action method channels_4_putNoCPacket_put
  assign RDY_channels_4_putNoCPacket_put = channelInQ_4$FULL_N ;
  assign CAN_FIRE_channels_4_putNoCPacket_put = channelInQ_4$FULL_N ;
  assign WILL_FIRE_channels_4_putNoCPacket_put =
	     EN_channels_4_putNoCPacket_put ;

  // actionvalue method channels_4_getNoCPacket_get
  assign channels_4_getNoCPacket_get = channelOutQ_4$D_OUT ;
  assign RDY_channels_4_getNoCPacket_get = channelOutQ_4$EMPTY_N ;
  assign CAN_FIRE_channels_4_getNoCPacket_get = channelOutQ_4$EMPTY_N ;
  assign WILL_FIRE_channels_4_getNoCPacket_get =
	     EN_channels_4_getNoCPacket_get ;

  // submodule channelInQ_0
  FIFO2 #(.width(32'd48), .guarded(32'd1)) channelInQ_0(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(channelInQ_0$D_IN),
							.ENQ(channelInQ_0$ENQ),
							.DEQ(channelInQ_0$DEQ),
							.CLR(channelInQ_0$CLR),
							.D_OUT(channelInQ_0$D_OUT),
							.FULL_N(channelInQ_0$FULL_N),
							.EMPTY_N(channelInQ_0$EMPTY_N));

  // submodule channelInQ_1
  FIFO2 #(.width(32'd48), .guarded(32'd1)) channelInQ_1(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(channelInQ_1$D_IN),
							.ENQ(channelInQ_1$ENQ),
							.DEQ(channelInQ_1$DEQ),
							.CLR(channelInQ_1$CLR),
							.D_OUT(channelInQ_1$D_OUT),
							.FULL_N(channelInQ_1$FULL_N),
							.EMPTY_N(channelInQ_1$EMPTY_N));

  // submodule channelInQ_2
  FIFO2 #(.width(32'd48), .guarded(32'd1)) channelInQ_2(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(channelInQ_2$D_IN),
							.ENQ(channelInQ_2$ENQ),
							.DEQ(channelInQ_2$DEQ),
							.CLR(channelInQ_2$CLR),
							.D_OUT(channelInQ_2$D_OUT),
							.FULL_N(channelInQ_2$FULL_N),
							.EMPTY_N(channelInQ_2$EMPTY_N));

  // submodule channelInQ_3
  FIFO2 #(.width(32'd48), .guarded(32'd1)) channelInQ_3(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(channelInQ_3$D_IN),
							.ENQ(channelInQ_3$ENQ),
							.DEQ(channelInQ_3$DEQ),
							.CLR(channelInQ_3$CLR),
							.D_OUT(channelInQ_3$D_OUT),
							.FULL_N(channelInQ_3$FULL_N),
							.EMPTY_N(channelInQ_3$EMPTY_N));

  // submodule channelInQ_4
  FIFO2 #(.width(32'd48), .guarded(32'd1)) channelInQ_4(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(channelInQ_4$D_IN),
							.ENQ(channelInQ_4$ENQ),
							.DEQ(channelInQ_4$DEQ),
							.CLR(channelInQ_4$CLR),
							.D_OUT(channelInQ_4$D_OUT),
							.FULL_N(channelInQ_4$FULL_N),
							.EMPTY_N(channelInQ_4$EMPTY_N));

  // submodule channelOutQ_0
  FIFO2 #(.width(32'd48), .guarded(32'd1)) channelOutQ_0(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(channelOutQ_0$D_IN),
							 .ENQ(channelOutQ_0$ENQ),
							 .DEQ(channelOutQ_0$DEQ),
							 .CLR(channelOutQ_0$CLR),
							 .D_OUT(channelOutQ_0$D_OUT),
							 .FULL_N(channelOutQ_0$FULL_N),
							 .EMPTY_N(channelOutQ_0$EMPTY_N));

  // submodule channelOutQ_1
  FIFO2 #(.width(32'd48), .guarded(32'd1)) channelOutQ_1(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(channelOutQ_1$D_IN),
							 .ENQ(channelOutQ_1$ENQ),
							 .DEQ(channelOutQ_1$DEQ),
							 .CLR(channelOutQ_1$CLR),
							 .D_OUT(channelOutQ_1$D_OUT),
							 .FULL_N(channelOutQ_1$FULL_N),
							 .EMPTY_N(channelOutQ_1$EMPTY_N));

  // submodule channelOutQ_2
  FIFO2 #(.width(32'd48), .guarded(32'd1)) channelOutQ_2(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(channelOutQ_2$D_IN),
							 .ENQ(channelOutQ_2$ENQ),
							 .DEQ(channelOutQ_2$DEQ),
							 .CLR(channelOutQ_2$CLR),
							 .D_OUT(channelOutQ_2$D_OUT),
							 .FULL_N(channelOutQ_2$FULL_N),
							 .EMPTY_N(channelOutQ_2$EMPTY_N));

  // submodule channelOutQ_3
  FIFO2 #(.width(32'd48), .guarded(32'd1)) channelOutQ_3(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(channelOutQ_3$D_IN),
							 .ENQ(channelOutQ_3$ENQ),
							 .DEQ(channelOutQ_3$DEQ),
							 .CLR(channelOutQ_3$CLR),
							 .D_OUT(channelOutQ_3$D_OUT),
							 .FULL_N(channelOutQ_3$FULL_N),
							 .EMPTY_N(channelOutQ_3$EMPTY_N));

  // submodule channelOutQ_4
  FIFO2 #(.width(32'd48), .guarded(32'd1)) channelOutQ_4(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(channelOutQ_4$D_IN),
							 .ENQ(channelOutQ_4$ENQ),
							 .DEQ(channelOutQ_4$DEQ),
							 .CLR(channelOutQ_4$CLR),
							 .D_OUT(channelOutQ_4$D_OUT),
							 .FULL_N(channelOutQ_4$FULL_N),
							 .EMPTY_N(channelOutQ_4$EMPTY_N));

  // submodule routePacketQ
  FIFO2 #(.width(32'd48), .guarded(32'd1)) routePacketQ(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(routePacketQ$D_IN),
							.ENQ(routePacketQ$ENQ),
							.DEQ(routePacketQ$DEQ),
							.CLR(routePacketQ$CLR),
							.D_OUT(routePacketQ$D_OUT),
							.FULL_N(routePacketQ$FULL_N),
							.EMPTY_N(routePacketQ$EMPTY_N));

  // rule RL_inputChannelArbiterRequest
  assign CAN_FIRE_RL_inputChannelArbiterRequest = 1'd1 ;
  assign WILL_FIRE_RL_inputChannelArbiterRequest = 1'd1 ;

  // rule RL_routePacket
  assign CAN_FIRE_RL_routePacket = routePacketQ$EMPTY_N ;
  assign WILL_FIRE_RL_routePacket = routePacketQ$EMPTY_N ;

  // rule RL_inputChannelArbiter_every
  assign CAN_FIRE_RL_inputChannelArbiter_every = 1'd1 ;
  assign WILL_FIRE_RL_inputChannelArbiter_every = 1'd1 ;

  // rule RL_inputArbitratei
  assign CAN_FIRE_RL_inputArbitratei =
	     channelInQ_0$EMPTY_N && routePacketQ$FULL_N &&
	     inputChannelArbiter_grant_vector$wget[0] ;
  assign WILL_FIRE_RL_inputArbitratei = CAN_FIRE_RL_inputArbitratei ;

  // rule RL_inputArbitratei_1
  assign CAN_FIRE_RL_inputArbitratei_1 =
	     routePacketQ$FULL_N && channelInQ_1$EMPTY_N &&
	     inputChannelArbiter_grant_vector$wget[1] ;
  assign WILL_FIRE_RL_inputArbitratei_1 = CAN_FIRE_RL_inputArbitratei_1 ;

  // rule RL_inputArbitratei_2
  assign CAN_FIRE_RL_inputArbitratei_2 =
	     routePacketQ$FULL_N && channelInQ_2$EMPTY_N &&
	     inputChannelArbiter_grant_vector$wget[2] ;
  assign WILL_FIRE_RL_inputArbitratei_2 = CAN_FIRE_RL_inputArbitratei_2 ;

  // rule RL_inputArbitratei_3
  assign CAN_FIRE_RL_inputArbitratei_3 =
	     routePacketQ$FULL_N && channelInQ_3$EMPTY_N &&
	     inputChannelArbiter_grant_vector$wget[3] ;
  assign WILL_FIRE_RL_inputArbitratei_3 = CAN_FIRE_RL_inputArbitratei_3 ;

  // rule RL_inputArbitratei_4
  assign CAN_FIRE_RL_inputArbitratei_4 =
	     routePacketQ$FULL_N && channelInQ_4$EMPTY_N &&
	     inputChannelArbiter_grant_vector$wget[4] ;
  assign WILL_FIRE_RL_inputArbitratei_4 = CAN_FIRE_RL_inputArbitratei_4 ;

  // rule __me_check_3
  assign CAN_FIRE___me_check_3 = 1'b1 ;
  assign WILL_FIRE___me_check_3 = 1'b1 ;

  // rule RL_outputChannelArbiter_every
  assign CAN_FIRE_RL_outputChannelArbiter_every = 1'd1 ;
  assign WILL_FIRE_RL_outputChannelArbiter_every = 1'd1 ;

  // rule RL_outputArbitratei
  assign CAN_FIRE_RL_outputArbitratei =
	     routePacketQ$EMPTY_N && channelOutQ_0$FULL_N &&
	     outputChannelArbiter_grant_vector$wget[0] ;
  assign WILL_FIRE_RL_outputArbitratei = CAN_FIRE_RL_outputArbitratei ;

  // rule RL_outputArbitratei_1
  assign CAN_FIRE_RL_outputArbitratei_1 =
	     routePacketQ$EMPTY_N && channelOutQ_1$FULL_N &&
	     outputChannelArbiter_grant_vector$wget[1] ;
  assign WILL_FIRE_RL_outputArbitratei_1 = CAN_FIRE_RL_outputArbitratei_1 ;

  // rule RL_outputArbitratei_2
  assign CAN_FIRE_RL_outputArbitratei_2 =
	     routePacketQ$EMPTY_N && channelOutQ_2$FULL_N &&
	     outputChannelArbiter_grant_vector$wget[2] ;
  assign WILL_FIRE_RL_outputArbitratei_2 = CAN_FIRE_RL_outputArbitratei_2 ;

  // rule RL_outputArbitratei_3
  assign CAN_FIRE_RL_outputArbitratei_3 =
	     routePacketQ$EMPTY_N && channelOutQ_3$FULL_N &&
	     outputChannelArbiter_grant_vector$wget[3] ;
  assign WILL_FIRE_RL_outputArbitratei_3 = CAN_FIRE_RL_outputArbitratei_3 ;

  // rule RL_outputArbitratei_4
  assign CAN_FIRE_RL_outputArbitratei_4 =
	     routePacketQ$EMPTY_N && channelOutQ_4$FULL_N &&
	     outputChannelArbiter_grant_vector$wget[4] ;
  assign WILL_FIRE_RL_outputArbitratei_4 = CAN_FIRE_RL_outputArbitratei_4 ;

  // rule __me_check_9
  assign CAN_FIRE___me_check_9 = 1'b1 ;
  assign WILL_FIRE___me_check_9 = 1'b1 ;

  // inlined wires
  assign outputChannelArbiter_request_vector$whas =
	     routePacketQ$EMPTY_N &&
	     !routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d220 &&
	     routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d222 &&
	     !routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d224 &&
	     routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d229 &&
	     routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d223 &&
	     routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d235 ;
  assign outputChannelArbiter_request_vector_1$whas =
	     routePacketQ$EMPTY_N &&
	     !routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d220 &&
	     routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d222 &&
	     routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d223 &&
	     routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d224 ;
  assign outputChannelArbiter_request_vector_2$whas =
	     routePacketQ$EMPTY_N &&
	     !routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d220 &&
	     routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d222 &&
	     !routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d224 &&
	     routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d223 &&
	     !routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d229 ;
  assign outputChannelArbiter_request_vector_3$whas =
	     routePacketQ$EMPTY_N &&
	     !routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d220 &&
	     !routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d222 ;
  assign outputChannelArbiter_request_vector_4$whas =
	     routePacketQ$EMPTY_N &&
	     routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d220 ;
  assign inputChannelArbiter_grant_vector$wget =
	     { inputChannelArbiter_priority_vector_BIT_4_OR_0_ETC___d25,
	       inputChannelArbiter_priority_vector_BIT_3_OR_N_ETC___d309 ||
	       inputChannelArbiter_priority_vector_BIT_3_OR_N_ETC___d302 &&
	       channelInQ_3$EMPTY_N,
	       inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d288,
	       inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d307 ||
	       inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d295,
	       inputChannelArbiter_priority_vector_BIT_0_5_OR_ETC___d306 ||
	       inputChannelArbiter_priority_vector[0] &&
	       channelInQ_0$EMPTY_N } ;
  assign outputChannelArbiter_grant_vector$wget =
	     { outputChannelArbiter_priority_vector_2_BIT_4_3_ETC___d116,
	       outputChannelArbiter_priority_vector_2_BIT_3_7_ETC___d325 ||
	       outputChannelArbiter_priority_vector_2_BIT_3_7_ETC___d318 &&
	       outputChannelArbiter_request_vector_3$whas,
	       outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d291,
	       outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d323 ||
	       outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d311,
	       outputChannelArbiter_priority_vector_2_BIT_0_0_ETC___d322 ||
	       outputChannelArbiter_priority_vector[0] &&
	       outputChannelArbiter_request_vector$whas } ;

  // register inputChannelArbiter_priority_vector
  assign inputChannelArbiter_priority_vector$D_IN =
	     { inputChannelArbiter_priority_vector_BIT_3_OR_N_ETC___d309 ||
	       inputChannelArbiter_priority_vector_BIT_3_OR_N_ETC___d302 &&
	       channelInQ_3$EMPTY_N,
	       inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d288,
	       inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d307 ||
	       inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d295,
	       inputChannelArbiter_priority_vector_BIT_0_5_OR_ETC___d306 ||
	       inputChannelArbiter_priority_vector[0] && channelInQ_0$EMPTY_N,
	       inputChannelArbiter_priority_vector_BIT_4_OR_0_ETC___d25 } ;
  assign inputChannelArbiter_priority_vector$EN =
	     inputChannelArbiter_priority_vector_BIT_0_5_OR_ETC___d306 ||
	     inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d307 ||
	     inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d308 ||
	     inputChannelArbiter_priority_vector_BIT_3_OR_N_ETC___d309 ||
	     inputChannelArbiter_priority_vector_BIT_4_OR_0_ETC___d25 ;

  // register outputChannelArbiter_priority_vector
  assign outputChannelArbiter_priority_vector$D_IN =
	     { outputChannelArbiter_priority_vector_2_BIT_3_7_ETC___d325 ||
	       outputChannelArbiter_priority_vector_2_BIT_3_7_ETC___d318 &&
	       outputChannelArbiter_request_vector_3$whas,
	       outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d291,
	       outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d323 ||
	       outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d311,
	       outputChannelArbiter_priority_vector_2_BIT_0_0_ETC___d322 ||
	       outputChannelArbiter_priority_vector[0] &&
	       outputChannelArbiter_request_vector$whas,
	       outputChannelArbiter_priority_vector_2_BIT_4_3_ETC___d116 } ;
  assign outputChannelArbiter_priority_vector$EN =
	     outputChannelArbiter_priority_vector_2_BIT_0_0_ETC___d322 ||
	     outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d323 ||
	     outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d324 ||
	     outputChannelArbiter_priority_vector_2_BIT_3_7_ETC___d325 ||
	     outputChannelArbiter_priority_vector_2_BIT_4_3_ETC___d116 ;

  // submodule channelInQ_0
  assign channelInQ_0$D_IN = channels_0_putNoCPacket_put ;
  assign channelInQ_0$ENQ = EN_channels_0_putNoCPacket_put ;
  assign channelInQ_0$DEQ = CAN_FIRE_RL_inputArbitratei ;
  assign channelInQ_0$CLR = 1'b0 ;

  // submodule channelInQ_1
  assign channelInQ_1$D_IN = channels_1_putNoCPacket_put ;
  assign channelInQ_1$ENQ = EN_channels_1_putNoCPacket_put ;
  assign channelInQ_1$DEQ = CAN_FIRE_RL_inputArbitratei_1 ;
  assign channelInQ_1$CLR = 1'b0 ;

  // submodule channelInQ_2
  assign channelInQ_2$D_IN = channels_2_putNoCPacket_put ;
  assign channelInQ_2$ENQ = EN_channels_2_putNoCPacket_put ;
  assign channelInQ_2$DEQ = CAN_FIRE_RL_inputArbitratei_2 ;
  assign channelInQ_2$CLR = 1'b0 ;

  // submodule channelInQ_3
  assign channelInQ_3$D_IN = channels_3_putNoCPacket_put ;
  assign channelInQ_3$ENQ = EN_channels_3_putNoCPacket_put ;
  assign channelInQ_3$DEQ = CAN_FIRE_RL_inputArbitratei_3 ;
  assign channelInQ_3$CLR = 1'b0 ;

  // submodule channelInQ_4
  assign channelInQ_4$D_IN = channels_4_putNoCPacket_put ;
  assign channelInQ_4$ENQ = EN_channels_4_putNoCPacket_put ;
  assign channelInQ_4$DEQ = CAN_FIRE_RL_inputArbitratei_4 ;
  assign channelInQ_4$CLR = 1'b0 ;

  // submodule channelOutQ_0
  assign channelOutQ_0$D_IN = routePacketQ$D_OUT ;
  assign channelOutQ_0$ENQ = CAN_FIRE_RL_outputArbitratei ;
  assign channelOutQ_0$DEQ = EN_channels_0_getNoCPacket_get ;
  assign channelOutQ_0$CLR = 1'b0 ;

  // submodule channelOutQ_1
  assign channelOutQ_1$D_IN = routePacketQ$D_OUT ;
  assign channelOutQ_1$ENQ = CAN_FIRE_RL_outputArbitratei_1 ;
  assign channelOutQ_1$DEQ = EN_channels_1_getNoCPacket_get ;
  assign channelOutQ_1$CLR = 1'b0 ;

  // submodule channelOutQ_2
  assign channelOutQ_2$D_IN = routePacketQ$D_OUT ;
  assign channelOutQ_2$ENQ = CAN_FIRE_RL_outputArbitratei_2 ;
  assign channelOutQ_2$DEQ = EN_channels_2_getNoCPacket_get ;
  assign channelOutQ_2$CLR = 1'b0 ;

  // submodule channelOutQ_3
  assign channelOutQ_3$D_IN = routePacketQ$D_OUT ;
  assign channelOutQ_3$ENQ = CAN_FIRE_RL_outputArbitratei_3 ;
  assign channelOutQ_3$DEQ = EN_channels_3_getNoCPacket_get ;
  assign channelOutQ_3$CLR = 1'b0 ;

  // submodule channelOutQ_4
  assign channelOutQ_4$D_IN = routePacketQ$D_OUT ;
  assign channelOutQ_4$ENQ = CAN_FIRE_RL_outputArbitratei_4 ;
  assign channelOutQ_4$DEQ = EN_channels_4_getNoCPacket_get ;
  assign channelOutQ_4$CLR = 1'b0 ;

  // submodule routePacketQ
  always@(WILL_FIRE_RL_inputArbitratei or
	  channelInQ_0$D_OUT or
	  WILL_FIRE_RL_inputArbitratei_1 or
	  channelInQ_1$D_OUT or
	  WILL_FIRE_RL_inputArbitratei_2 or
	  channelInQ_2$D_OUT or
	  WILL_FIRE_RL_inputArbitratei_3 or
	  channelInQ_3$D_OUT or
	  WILL_FIRE_RL_inputArbitratei_4 or channelInQ_4$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inputArbitratei: routePacketQ$D_IN = channelInQ_0$D_OUT;
      WILL_FIRE_RL_inputArbitratei_1: routePacketQ$D_IN = channelInQ_1$D_OUT;
      WILL_FIRE_RL_inputArbitratei_2: routePacketQ$D_IN = channelInQ_2$D_OUT;
      WILL_FIRE_RL_inputArbitratei_3: routePacketQ$D_IN = channelInQ_3$D_OUT;
      WILL_FIRE_RL_inputArbitratei_4: routePacketQ$D_IN = channelInQ_4$D_OUT;
      default: routePacketQ$D_IN = 48'hAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign routePacketQ$ENQ =
	     WILL_FIRE_RL_inputArbitratei || WILL_FIRE_RL_inputArbitratei_1 ||
	     WILL_FIRE_RL_inputArbitratei_2 ||
	     WILL_FIRE_RL_inputArbitratei_3 ||
	     WILL_FIRE_RL_inputArbitratei_4 ;
  assign routePacketQ$DEQ =
	     WILL_FIRE_RL_outputArbitratei_4 ||
	     WILL_FIRE_RL_outputArbitratei_3 ||
	     WILL_FIRE_RL_outputArbitratei_2 ||
	     WILL_FIRE_RL_outputArbitratei_1 ||
	     WILL_FIRE_RL_outputArbitratei ;
  assign routePacketQ$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_inputChannelArbiter_request_vector_1_whas__ETC___d18 =
	     !channelInQ_1$EMPTY_N &&
	     (inputChannelArbiter_priority_vector[1] ||
	      !channelInQ_0$EMPTY_N &&
	      inputChannelArbiter_priority_vector[0]) ;
  assign NOT_outputChannelArbiter_request_vector_1_whas_ETC___d109 =
	     !outputChannelArbiter_request_vector_1$whas &&
	     (outputChannelArbiter_priority_vector[1] ||
	      !outputChannelArbiter_request_vector$whas &&
	      outputChannelArbiter_priority_vector[0]) ;
  assign NOT_routePacketQ_first__18_BITS_43_TO_42_19_EQ_ETC___d247 =
	     (!routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d223 ||
	      !routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d224) &&
	     (!routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d223 ||
	      routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d229) &&
	     (!routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d223 ||
	      !routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d235) ;
  assign inputChannelArbiter_priority_vector_BIT_0_5_OR_ETC___d306 =
	     (inputChannelArbiter_priority_vector[0] ||
	      !channelInQ_4$EMPTY_N &&
	      inputChannelArbiter_priority_vector_BIT_4_OR_N_ETC___d67) &&
	     channelInQ_0$EMPTY_N ;
  assign inputChannelArbiter_priority_vector_BIT_0_5_OR_ETC___d56 =
	     inputChannelArbiter_priority_vector[0] ||
	     !channelInQ_4$EMPTY_N &&
	     (inputChannelArbiter_priority_vector[4] ||
	      !channelInQ_3$EMPTY_N &&
	      (inputChannelArbiter_priority_vector[3] ||
	       !channelInQ_2$EMPTY_N &&
	       inputChannelArbiter_priority_vector[2])) ;
  assign inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d295 =
	     (inputChannelArbiter_priority_vector[1] ||
	      !channelInQ_0$EMPTY_N &&
	      inputChannelArbiter_priority_vector[0]) &&
	     channelInQ_1$EMPTY_N ;
  assign inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d307 =
	     (inputChannelArbiter_priority_vector[1] ||
	      !channelInQ_0$EMPTY_N &&
	      inputChannelArbiter_priority_vector_BIT_0_5_OR_ETC___d56) &&
	     channelInQ_1$EMPTY_N ;
  assign inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d44 =
	     inputChannelArbiter_priority_vector[1] ||
	     !channelInQ_0$EMPTY_N &&
	     (inputChannelArbiter_priority_vector[0] ||
	      !channelInQ_4$EMPTY_N &&
	      (inputChannelArbiter_priority_vector[4] ||
	       !channelInQ_3$EMPTY_N &&
	       inputChannelArbiter_priority_vector[3])) ;
  assign inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d288 =
	     inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d308 ||
	     (inputChannelArbiter_priority_vector[2] ||
	      NOT_inputChannelArbiter_request_vector_1_whas__ETC___d18) &&
	     channelInQ_2$EMPTY_N ;
  assign inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d308 =
	     (inputChannelArbiter_priority_vector[2] ||
	      !channelInQ_1$EMPTY_N &&
	      inputChannelArbiter_priority_vector_BIT_1_2_OR_ETC___d44) &&
	     channelInQ_2$EMPTY_N ;
  assign inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d33 =
	     inputChannelArbiter_priority_vector[2] ||
	     !channelInQ_1$EMPTY_N &&
	     (inputChannelArbiter_priority_vector[1] ||
	      !channelInQ_0$EMPTY_N &&
	      (inputChannelArbiter_priority_vector[0] ||
	       !channelInQ_4$EMPTY_N &&
	       inputChannelArbiter_priority_vector[4])) ;
  assign inputChannelArbiter_priority_vector_BIT_3_OR_N_ETC___d302 =
	     inputChannelArbiter_priority_vector[3] ||
	     !channelInQ_2$EMPTY_N &&
	     (inputChannelArbiter_priority_vector[2] ||
	      NOT_inputChannelArbiter_request_vector_1_whas__ETC___d18) ;
  assign inputChannelArbiter_priority_vector_BIT_3_OR_N_ETC___d309 =
	     (inputChannelArbiter_priority_vector[3] ||
	      !channelInQ_2$EMPTY_N &&
	      inputChannelArbiter_priority_vector_BIT_2_OR_N_ETC___d33) &&
	     channelInQ_3$EMPTY_N ;
  assign inputChannelArbiter_priority_vector_BIT_4_OR_0_ETC___d25 =
	     (inputChannelArbiter_priority_vector[4] ||
	      !channelInQ_3$EMPTY_N &&
	      inputChannelArbiter_priority_vector_BIT_3_OR_N_ETC___d302) &&
	     channelInQ_4$EMPTY_N ;
  assign inputChannelArbiter_priority_vector_BIT_4_OR_N_ETC___d67 =
	     inputChannelArbiter_priority_vector[4] ||
	     !channelInQ_3$EMPTY_N &&
	     (inputChannelArbiter_priority_vector[3] ||
	      !channelInQ_2$EMPTY_N &&
	      (inputChannelArbiter_priority_vector[2] ||
	       !channelInQ_1$EMPTY_N &&
	       inputChannelArbiter_priority_vector[1])) ;
  assign outputChannelArbiter_priority_vector_2_BIT_0_0_ETC___d147 =
	     outputChannelArbiter_priority_vector[0] ||
	     !outputChannelArbiter_request_vector_4$whas &&
	     (outputChannelArbiter_priority_vector[4] ||
	      !outputChannelArbiter_request_vector_3$whas &&
	      (outputChannelArbiter_priority_vector[3] ||
	       !outputChannelArbiter_request_vector_2$whas &&
	       outputChannelArbiter_priority_vector[2])) ;
  assign outputChannelArbiter_priority_vector_2_BIT_0_0_ETC___d322 =
	     (outputChannelArbiter_priority_vector[0] ||
	      !outputChannelArbiter_request_vector_4$whas &&
	      outputChannelArbiter_priority_vector_2_BIT_4_3_ETC___d158) &&
	     outputChannelArbiter_request_vector$whas ;
  assign outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d135 =
	     outputChannelArbiter_priority_vector[1] ||
	     !outputChannelArbiter_request_vector$whas &&
	     (outputChannelArbiter_priority_vector[0] ||
	      !outputChannelArbiter_request_vector_4$whas &&
	      (outputChannelArbiter_priority_vector[4] ||
	       !outputChannelArbiter_request_vector_3$whas &&
	       outputChannelArbiter_priority_vector[3])) ;
  assign outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d311 =
	     (outputChannelArbiter_priority_vector[1] ||
	      !outputChannelArbiter_request_vector$whas &&
	      outputChannelArbiter_priority_vector[0]) &&
	     outputChannelArbiter_request_vector_1$whas ;
  assign outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d323 =
	     (outputChannelArbiter_priority_vector[1] ||
	      !outputChannelArbiter_request_vector$whas &&
	      outputChannelArbiter_priority_vector_2_BIT_0_0_ETC___d147) &&
	     outputChannelArbiter_request_vector_1$whas ;
  assign outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d124 =
	     outputChannelArbiter_priority_vector[2] ||
	     !outputChannelArbiter_request_vector_1$whas &&
	     (outputChannelArbiter_priority_vector[1] ||
	      !outputChannelArbiter_request_vector$whas &&
	      (outputChannelArbiter_priority_vector[0] ||
	       !outputChannelArbiter_request_vector_4$whas &&
	       outputChannelArbiter_priority_vector[4])) ;
  assign outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d291 =
	     outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d324 ||
	     (outputChannelArbiter_priority_vector[2] ||
	      NOT_outputChannelArbiter_request_vector_1_whas_ETC___d109) &&
	     outputChannelArbiter_request_vector_2$whas ;
  assign outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d324 =
	     (outputChannelArbiter_priority_vector[2] ||
	      !outputChannelArbiter_request_vector_1$whas &&
	      outputChannelArbiter_priority_vector_2_BIT_1_0_ETC___d135) &&
	     outputChannelArbiter_request_vector_2$whas ;
  assign outputChannelArbiter_priority_vector_2_BIT_3_7_ETC___d318 =
	     outputChannelArbiter_priority_vector[3] ||
	     !outputChannelArbiter_request_vector_2$whas &&
	     (outputChannelArbiter_priority_vector[2] ||
	      NOT_outputChannelArbiter_request_vector_1_whas_ETC___d109) ;
  assign outputChannelArbiter_priority_vector_2_BIT_3_7_ETC___d325 =
	     (outputChannelArbiter_priority_vector[3] ||
	      !outputChannelArbiter_request_vector_2$whas &&
	      outputChannelArbiter_priority_vector_2_BIT_2_0_ETC___d124) &&
	     outputChannelArbiter_request_vector_3$whas ;
  assign outputChannelArbiter_priority_vector_2_BIT_4_3_ETC___d116 =
	     (outputChannelArbiter_priority_vector[4] ||
	      !outputChannelArbiter_request_vector_3$whas &&
	      outputChannelArbiter_priority_vector_2_BIT_3_7_ETC___d318) &&
	     outputChannelArbiter_request_vector_4$whas ;
  assign outputChannelArbiter_priority_vector_2_BIT_4_3_ETC___d158 =
	     outputChannelArbiter_priority_vector[4] ||
	     !outputChannelArbiter_request_vector_3$whas &&
	     (outputChannelArbiter_priority_vector[3] ||
	      !outputChannelArbiter_request_vector_2$whas &&
	      (outputChannelArbiter_priority_vector[2] ||
	       !outputChannelArbiter_request_vector_1$whas &&
	       outputChannelArbiter_priority_vector[1])) ;
  assign routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d223 =
	     routePacketQ$D_OUT[43:42] == thisRowAddr ;
  assign routePacketQ_first__18_BITS_43_TO_42_19_EQ_thi_ETC___d235 =
	     routePacketQ$D_OUT[43:42] == thisColAddr ;
  assign routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d222 =
	     routePacketQ$D_OUT[43:42] <= thisRowAddr ;
  assign routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d229 =
	     routePacketQ$D_OUT[43:42] <= thisColAddr ;
  assign routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d220 =
	     routePacketQ$D_OUT[43:42] < thisRowAddr ;
  assign routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d224 =
	     routePacketQ$D_OUT[43:42] < thisColAddr ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        inputChannelArbiter_priority_vector <= `BSV_ASSIGNMENT_DELAY 5'd1;
	outputChannelArbiter_priority_vector <= `BSV_ASSIGNMENT_DELAY 5'd1;
      end
    else
      begin
        if (inputChannelArbiter_priority_vector$EN)
	  inputChannelArbiter_priority_vector <= `BSV_ASSIGNMENT_DELAY
	      inputChannelArbiter_priority_vector$D_IN;
	if (outputChannelArbiter_priority_vector$EN)
	  outputChannelArbiter_priority_vector <= `BSV_ASSIGNMENT_DELAY
	      outputChannelArbiter_priority_vector$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inputChannelArbiter_priority_vector = 5'h0A;
    outputChannelArbiter_priority_vector = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (routePacketQ$EMPTY_N &&
	  !routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d220 &&
	  routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d222 &&
	  NOT_routePacketQ_first__18_BITS_43_TO_42_19_EQ_ETC___d247)
	$display("Error in Routing. Exiting.");
    if (RST_N)
      if (routePacketQ$EMPTY_N &&
	  !routePacketQ_first__18_BITS_43_TO_42_19_ULT_th_ETC___d220 &&
	  routePacketQ_first__18_BITS_43_TO_42_19_ULE_th_ETC___d222 &&
	  NOT_routePacketQ_first__18_BITS_43_TO_42_19_EQ_ETC___d247)
	$finish(32'd0);
    if (RST_N)
      if (WILL_FIRE_RL_inputArbitratei && WILL_FIRE_RL_inputArbitratei_1)
	$display("Error: \"../src/Node.bsv\", line 89, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inputArbitratei] and\n  [RL_inputArbitratei_1] ) fired in the same clock cycle.\n");
    if (RST_N)
      if ((WILL_FIRE_RL_inputArbitratei || WILL_FIRE_RL_inputArbitratei_1) &&
	  WILL_FIRE_RL_inputArbitratei_2)
	$display("Error: \"../src/Node.bsv\", line 89, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inputArbitratei,\n  RL_inputArbitratei_1] and [RL_inputArbitratei_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N)
      if ((WILL_FIRE_RL_inputArbitratei || WILL_FIRE_RL_inputArbitratei_1 ||
	   WILL_FIRE_RL_inputArbitratei_2) &&
	  WILL_FIRE_RL_inputArbitratei_3)
	$display("Error: \"../src/Node.bsv\", line 89, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inputArbitratei,\n  RL_inputArbitratei_1, RL_inputArbitratei_2] and [RL_inputArbitratei_3] )\n  fired in the same clock cycle.\n");
    if (RST_N)
      if ((WILL_FIRE_RL_inputArbitratei || WILL_FIRE_RL_inputArbitratei_1 ||
	   WILL_FIRE_RL_inputArbitratei_2 ||
	   WILL_FIRE_RL_inputArbitratei_3) &&
	  WILL_FIRE_RL_inputArbitratei_4)
	$display("Error: \"../src/Node.bsv\", line 89, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inputArbitratei,\n  RL_inputArbitratei_1, RL_inputArbitratei_2, RL_inputArbitratei_3] and\n  [RL_inputArbitratei_4] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_outputArbitratei && WILL_FIRE_RL_outputArbitratei_1)
	$display("Error: \"../src/Node.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_outputArbitratei] and\n  [RL_outputArbitratei_1] ) fired in the same clock cycle.\n");
    if (RST_N)
      if ((WILL_FIRE_RL_outputArbitratei ||
	   WILL_FIRE_RL_outputArbitratei_1) &&
	  WILL_FIRE_RL_outputArbitratei_2)
	$display("Error: \"../src/Node.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_outputArbitratei,\n  RL_outputArbitratei_1] and [RL_outputArbitratei_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N)
      if ((WILL_FIRE_RL_outputArbitratei || WILL_FIRE_RL_outputArbitratei_1 ||
	   WILL_FIRE_RL_outputArbitratei_2) &&
	  WILL_FIRE_RL_outputArbitratei_3)
	$display("Error: \"../src/Node.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_outputArbitratei,\n  RL_outputArbitratei_1, RL_outputArbitratei_2] and [RL_outputArbitratei_3] )\n  fired in the same clock cycle.\n");
    if (RST_N)
      if ((WILL_FIRE_RL_outputArbitratei || WILL_FIRE_RL_outputArbitratei_1 ||
	   WILL_FIRE_RL_outputArbitratei_2 ||
	   WILL_FIRE_RL_outputArbitratei_3) &&
	  WILL_FIRE_RL_outputArbitratei_4)
	$display("Error: \"../src/Node.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_outputArbitratei,\n  RL_outputArbitratei_1, RL_outputArbitratei_2, RL_outputArbitratei_3] and\n  [RL_outputArbitratei_4] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkNode

