/*
 * Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
 * 
 * On Sat Jun 28 05:29:27 IST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "mkImem.h"

namespace bluesim
{
  
  /* String declarations */
  static std::string const __str_literal_8("../data/imem/imem_init_.txt", 27u);
  static std::string const __str_literal_1("../data/imem/imem_init_0.txt", 28u);
  static std::string const __str_literal_2("../data/imem/imem_init_1.txt", 28u);
  static std::string const __str_literal_3("../data/imem/imem_init_2.txt", 28u);
  static std::string const __str_literal_4("../data/imem/imem_init_3.txt", 28u);
  static std::string const __str_literal_5("../data/imem/imem_init_4.txt", 28u);
  static std::string const __str_literal_6("../data/imem/imem_init_5.txt", 28u);
  static std::string const __str_literal_7("../data/imem/imem_init_6.txt", 28u);
  
  
  /* Constructor */
  MOD_mkImem::MOD_mkImem(char const *name, Module *parent, tUInt8 ARG_procId)
    : Module(name, parent),
      __clk_handle_0(BAD_CLOCK_HANDLE),
      PARAM_procId(ARG_procId),
      INST_instReqQ("instReqQ", this, 7u, 2u, 1u, 0u),
      INST_instRespQ("instRespQ", this, 39u, 2u, 1u, 0u),
      INST_mem("mem",
	       this,
	       PARAM_procId == (tUInt8)0u ? __str_literal_1 : (PARAM_procId == (tUInt8)1u ? __str_literal_2 : (PARAM_procId == (tUInt8)2u ? __str_literal_3 : (PARAM_procId == (tUInt8)3u ? __str_literal_4 : (PARAM_procId == (tUInt8)4u ? __str_literal_5 : (PARAM_procId == (tUInt8)5u ? __str_literal_6 : (PARAM_procId == (tUInt8)6u ? __str_literal_7 : __str_literal_8)))))),
	       6u,
	       32u,
	       (tUInt8)0u,
	       (tUInt8)63u,
	       0u),
      PORT_RST_N((tUInt8)1u)
  {
    PORT_EN_imem_server_request_put = false;
    PORT_EN_imem_server_response_get = false;
    PORT_imem_server_request_put = 0u;
    PORT_RDY_imem_server_request_put = false;
    PORT_imem_server_response_get = 0llu;
    PORT_RDY_imem_server_response_get = false;
    symbol_count = 17u;
    symbols = new tSym[symbol_count];
    init_symbols_0();
  }
  
  
  /* Symbol init fns */
  
  void MOD_mkImem::init_symbols_0()
  {
    init_symbol(&symbols[0u],
		"CAN_FIRE_imem_server_request_put",
		SYM_DEF,
		&DEF_CAN_FIRE_imem_server_request_put,
		1u);
    init_symbol(&symbols[1u],
		"CAN_FIRE_imem_server_response_get",
		SYM_DEF,
		&DEF_CAN_FIRE_imem_server_response_get,
		1u);
    init_symbol(&symbols[2u], "CAN_FIRE_RL_access", SYM_DEF, &DEF_CAN_FIRE_RL_access, 1u);
    init_symbol(&symbols[3u],
		"EN_imem_server_request_put",
		SYM_PORT,
		&PORT_EN_imem_server_request_put,
		1u);
    init_symbol(&symbols[4u],
		"EN_imem_server_response_get",
		SYM_PORT,
		&PORT_EN_imem_server_response_get,
		1u);
    init_symbol(&symbols[5u], "imem_server_request_put", SYM_PORT, &PORT_imem_server_request_put, 7u);
    init_symbol(&symbols[6u],
		"imem_server_response_get",
		SYM_PORT,
		&PORT_imem_server_response_get,
		39u);
    init_symbol(&symbols[7u], "instReqQ", SYM_MODULE, &INST_instReqQ);
    init_symbol(&symbols[8u], "instRespQ", SYM_MODULE, &INST_instRespQ);
    init_symbol(&symbols[9u], "mem", SYM_MODULE, &INST_mem);
    init_symbol(&symbols[10u], "procId", SYM_PARAM, (void *)(&PARAM_procId), 4u);
    init_symbol(&symbols[11u],
		"RDY_imem_server_request_put",
		SYM_PORT,
		&PORT_RDY_imem_server_request_put,
		1u);
    init_symbol(&symbols[12u],
		"RDY_imem_server_response_get",
		SYM_PORT,
		&PORT_RDY_imem_server_response_get,
		1u);
    init_symbol(&symbols[13u], "RL_access", SYM_RULE);
    init_symbol(&symbols[14u],
		"WILL_FIRE_imem_server_request_put",
		SYM_DEF,
		&DEF_WILL_FIRE_imem_server_request_put,
		1u);
    init_symbol(&symbols[15u],
		"WILL_FIRE_imem_server_response_get",
		SYM_DEF,
		&DEF_WILL_FIRE_imem_server_response_get,
		1u);
    init_symbol(&symbols[16u], "WILL_FIRE_RL_access", SYM_DEF, &DEF_WILL_FIRE_RL_access, 1u);
  }
  
  
  /* Rule actions */
  
  void MOD_mkImem::RL_access()
  {
    tUInt64 DEF__0_CONCAT_instReqQ_first_BITS_5_TO_0_CONCAT_mem_ETC___d9;
    tUInt8 DEF_NOT_instReqQ_first_BIT_6___d6;
    tUInt8 DEF_instReqQ_first____d11;
    tUInt8 DEF_addr__h610;
    DEF_instReqQ_first____d11 = INST_instReqQ.METH_first();
    DEF_addr__h610 = (tUInt8)((tUInt8)63u & DEF_instReqQ_first____d11);
    DEF_NOT_instReqQ_first_BIT_6___d6 = !((tUInt8)(DEF_instReqQ_first____d11 >> 6u));
    DEF__0_CONCAT_instReqQ_first_BITS_5_TO_0_CONCAT_mem_ETC___d9 = 549755813887llu & ((((tUInt64)((tUInt8)127u & DEF_addr__h610)) << 32u) | (tUInt64)(INST_mem.METH_sub(DEF_addr__h610)));
    INST_instReqQ.METH_deq();
    if (DEF_NOT_instReqQ_first_BIT_6___d6)
      INST_instRespQ.METH_enq(DEF__0_CONCAT_instReqQ_first_BITS_5_TO_0_CONCAT_mem_ETC___d9);
  }
  
  
  /* Methods */
  
  void MOD_mkImem::METH_imem_server_request_put(tUInt8 ARG_imem_server_request_put)
  {
    PORT_EN_imem_server_request_put = (tUInt8)1u;
    DEF_WILL_FIRE_imem_server_request_put = (tUInt8)1u;
    PORT_imem_server_request_put = ARG_imem_server_request_put;
    INST_instReqQ.METH_enq(ARG_imem_server_request_put);
  }
  
  tUInt8 MOD_mkImem::METH_RDY_imem_server_request_put()
  {
    DEF_CAN_FIRE_imem_server_request_put = INST_instReqQ.METH_i_notFull();
    PORT_RDY_imem_server_request_put = DEF_CAN_FIRE_imem_server_request_put;
    return PORT_RDY_imem_server_request_put;
  }
  
  tUInt64 MOD_mkImem::METH_imem_server_response_get()
  {
    tUInt64 DEF_instRespQ_first____d12;
    PORT_EN_imem_server_response_get = (tUInt8)1u;
    DEF_WILL_FIRE_imem_server_response_get = (tUInt8)1u;
    DEF_instRespQ_first____d12 = INST_instRespQ.METH_first();
    INST_instRespQ.METH_deq();
    PORT_imem_server_response_get = DEF_instRespQ_first____d12;
    return PORT_imem_server_response_get;
  }
  
  tUInt8 MOD_mkImem::METH_RDY_imem_server_response_get()
  {
    DEF_CAN_FIRE_imem_server_response_get = INST_instRespQ.METH_i_notEmpty();
    PORT_RDY_imem_server_response_get = DEF_CAN_FIRE_imem_server_response_get;
    return PORT_RDY_imem_server_response_get;
  }
  
  
  /* Reset routines */
  
  void MOD_mkImem::reset_RST_N(tUInt8 ARG_rst_in)
  {
    PORT_RST_N = ARG_rst_in;
    INST_instRespQ.reset_RST_N(ARG_rst_in);
    INST_instReqQ.reset_RST_N(ARG_rst_in);
  }
  
  
  /* Static handles to reset routines */
  
  
  /* Functions for the parent module to register its reset fns */
  
  
  /* Functions to set the elaborated clock id */
  
  void MOD_mkImem::set_clk_0(char const *s)
  {
    __clk_handle_0 = bk_get_or_define_clock(s);
  }
  
  
  /* State dumping routine */
  void MOD_mkImem::dump_state(unsigned int indent)
  {
    printf("%*s%s:\n", indent, "", inst_name);
    INST_instReqQ.dump_state(indent + 2u);
    INST_instRespQ.dump_state(indent + 2u);
    INST_mem.dump_state(indent + 2u);
  }
  
  
  /* VCD dumping routines */
  
  unsigned int MOD_mkImem::dump_VCD_defs(unsigned int levels)
  {
    fprintf(vcd_file, "$scope module %s $end\n", inst_name);
    vcd_num = vcd_reserve_ids(16u);
    unsigned int num = vcd_num;
    for (unsigned int hdl = 0u; hdl < bk_num_clocks(); ++hdl)
      vcd_add_clock_def(this, bk_clock_name(hdl), bk_clock_vcd_num(hdl));
    vcd_write_def(bk_clock_vcd_num(__clk_handle_0), "CLK", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_access", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_imem_server_request_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_imem_server_response_get", 1u);
    vcd_write_def(num++, "RST_N", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_access", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_imem_server_request_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_imem_server_response_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "EN_imem_server_request_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "EN_imem_server_response_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_imem_server_request_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_imem_server_response_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "imem_server_request_put", 7u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "imem_server_response_get", 39u);
    num = INST_instReqQ.dump_VCD_defs(num);
    num = INST_instRespQ.dump_VCD_defs(num);
    num = INST_mem.dump_VCD_defs(num);
    fprintf(vcd_file, "$upscope $end\n");
    return num;
  }
  
  void MOD_mkImem::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkImem &backing)
  {
    vcd_defs(dt, backing);
    vcd_prims(dt, backing);
  }
  
  void MOD_mkImem::vcd_defs(tVCDDumpType dt, MOD_mkImem &backing)
  {
    unsigned int num = vcd_num;
    if (dt == VCD_DUMP_XS)
    {
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 7u);
      vcd_write_x(num++, 39u);
    }
    else
      if (dt == VCD_DUMP_CHANGES)
      {
	if ((backing.DEF_CAN_FIRE_RL_access) != DEF_CAN_FIRE_RL_access)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_access, 1u);
	  backing.DEF_CAN_FIRE_RL_access = DEF_CAN_FIRE_RL_access;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_imem_server_request_put) != DEF_CAN_FIRE_imem_server_request_put)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_imem_server_request_put, 1u);
	  backing.DEF_CAN_FIRE_imem_server_request_put = DEF_CAN_FIRE_imem_server_request_put;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_imem_server_response_get) != DEF_CAN_FIRE_imem_server_response_get)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_imem_server_response_get, 1u);
	  backing.DEF_CAN_FIRE_imem_server_response_get = DEF_CAN_FIRE_imem_server_response_get;
	}
	++num;
	if ((backing.PORT_RST_N) != PORT_RST_N)
	{
	  vcd_write_val(num, PORT_RST_N, 1u);
	  backing.PORT_RST_N = PORT_RST_N;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_access) != DEF_WILL_FIRE_RL_access)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_access, 1u);
	  backing.DEF_WILL_FIRE_RL_access = DEF_WILL_FIRE_RL_access;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_imem_server_request_put) != DEF_WILL_FIRE_imem_server_request_put)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_imem_server_request_put, 1u);
	  backing.DEF_WILL_FIRE_imem_server_request_put = DEF_WILL_FIRE_imem_server_request_put;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_imem_server_response_get) != DEF_WILL_FIRE_imem_server_response_get)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_imem_server_response_get, 1u);
	  backing.DEF_WILL_FIRE_imem_server_response_get = DEF_WILL_FIRE_imem_server_response_get;
	}
	++num;
	if ((backing.PORT_EN_imem_server_request_put) != PORT_EN_imem_server_request_put)
	{
	  vcd_write_val(num, PORT_EN_imem_server_request_put, 1u);
	  backing.PORT_EN_imem_server_request_put = PORT_EN_imem_server_request_put;
	}
	++num;
	if ((backing.PORT_EN_imem_server_response_get) != PORT_EN_imem_server_response_get)
	{
	  vcd_write_val(num, PORT_EN_imem_server_response_get, 1u);
	  backing.PORT_EN_imem_server_response_get = PORT_EN_imem_server_response_get;
	}
	++num;
	if ((backing.PORT_RDY_imem_server_request_put) != PORT_RDY_imem_server_request_put)
	{
	  vcd_write_val(num, PORT_RDY_imem_server_request_put, 1u);
	  backing.PORT_RDY_imem_server_request_put = PORT_RDY_imem_server_request_put;
	}
	++num;
	if ((backing.PORT_RDY_imem_server_response_get) != PORT_RDY_imem_server_response_get)
	{
	  vcd_write_val(num, PORT_RDY_imem_server_response_get, 1u);
	  backing.PORT_RDY_imem_server_response_get = PORT_RDY_imem_server_response_get;
	}
	++num;
	if ((backing.PORT_imem_server_request_put) != PORT_imem_server_request_put)
	{
	  vcd_write_val(num, PORT_imem_server_request_put, 7u);
	  backing.PORT_imem_server_request_put = PORT_imem_server_request_put;
	}
	++num;
	if ((backing.PORT_imem_server_response_get) != PORT_imem_server_response_get)
	{
	  vcd_write_val(num, PORT_imem_server_response_get, 39u);
	  backing.PORT_imem_server_response_get = PORT_imem_server_response_get;
	}
	++num;
      }
      else
      {
	vcd_write_val(num++, DEF_CAN_FIRE_RL_access, 1u);
	backing.DEF_CAN_FIRE_RL_access = DEF_CAN_FIRE_RL_access;
	vcd_write_val(num++, DEF_CAN_FIRE_imem_server_request_put, 1u);
	backing.DEF_CAN_FIRE_imem_server_request_put = DEF_CAN_FIRE_imem_server_request_put;
	vcd_write_val(num++, DEF_CAN_FIRE_imem_server_response_get, 1u);
	backing.DEF_CAN_FIRE_imem_server_response_get = DEF_CAN_FIRE_imem_server_response_get;
	vcd_write_val(num++, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_access, 1u);
	backing.DEF_WILL_FIRE_RL_access = DEF_WILL_FIRE_RL_access;
	vcd_write_val(num++, DEF_WILL_FIRE_imem_server_request_put, 1u);
	backing.DEF_WILL_FIRE_imem_server_request_put = DEF_WILL_FIRE_imem_server_request_put;
	vcd_write_val(num++, DEF_WILL_FIRE_imem_server_response_get, 1u);
	backing.DEF_WILL_FIRE_imem_server_response_get = DEF_WILL_FIRE_imem_server_response_get;
	vcd_write_val(num++, PORT_EN_imem_server_request_put, 1u);
	backing.PORT_EN_imem_server_request_put = PORT_EN_imem_server_request_put;
	vcd_write_val(num++, PORT_EN_imem_server_response_get, 1u);
	backing.PORT_EN_imem_server_response_get = PORT_EN_imem_server_response_get;
	vcd_write_val(num++, PORT_RDY_imem_server_request_put, 1u);
	backing.PORT_RDY_imem_server_request_put = PORT_RDY_imem_server_request_put;
	vcd_write_val(num++, PORT_RDY_imem_server_response_get, 1u);
	backing.PORT_RDY_imem_server_response_get = PORT_RDY_imem_server_response_get;
	vcd_write_val(num++, PORT_imem_server_request_put, 7u);
	backing.PORT_imem_server_request_put = PORT_imem_server_request_put;
	vcd_write_val(num++, PORT_imem_server_response_get, 39u);
	backing.PORT_imem_server_response_get = PORT_imem_server_response_get;
      }
  }
  
  void MOD_mkImem::vcd_prims(tVCDDumpType dt, MOD_mkImem &backing)
  {
    INST_instReqQ.dump_VCD(dt, backing.INST_instReqQ);
    INST_instRespQ.dump_VCD(dt, backing.INST_instRespQ);
    INST_mem.dump_VCD(dt, backing.INST_mem);
  }
}
