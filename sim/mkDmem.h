/*
 * Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
 * 
 * On Thu Jun 22 16:22:40 IST 2017
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkDmem_h__
#define __mkDmem_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkDmem module */
class MOD_mkDmem : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
  tUInt8 const PARAM_procId;
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_counter;
  MOD_Fifo<tUInt64> INST_dataReqQ;
  MOD_Fifo<tUInt64> INST_dataRespQ;
  MOD_Reg<tUInt32> INST_dumpFile;
  MOD_Reg<tUInt8> INST_dumpState;
  MOD_RegFile<tUInt8,tUInt32> INST_mem;
 
 /* Constructor */
 public:
  MOD_mkDmem(tSimStateHdl simHdl, char const *name, Module *parent, tUInt8 ARG_procId);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_dumpMem_startDump;
  tUInt8 PORT_EN_dmem_server_request_put;
  tUInt8 PORT_EN_dmem_server_response_get;
  tUInt64 PORT_dmem_server_request_put;
  tUInt8 PORT_RDY_dumpMem_startDump;
  tUInt8 PORT_dumpMem_doneDump;
  tUInt8 PORT_RDY_dumpMem_doneDump;
  tUInt8 PORT_RDY_dmem_server_request_put;
  tUInt64 PORT_dmem_server_response_get;
  tUInt8 PORT_RDY_dmem_server_response_get;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_dumpMem_startDump;
  tUInt8 DEF_CAN_FIRE_dumpMem_doneDump;
  tUInt8 DEF_CAN_FIRE_dumpMem_startDump;
  tUInt8 DEF_WILL_FIRE_dmem_server_response_get;
  tUInt8 DEF_WILL_FIRE_dmem_server_request_put;
  tUInt8 DEF_WILL_FIRE_RL_closeDumpFile;
  tUInt8 DEF_CAN_FIRE_RL_closeDumpFile;
  tUInt8 DEF_WILL_FIRE_RL_dumpMemory;
  tUInt8 DEF_CAN_FIRE_RL_dumpMemory;
  tUInt8 DEF_WILL_FIRE_RL_openDumpFile;
  tUInt8 DEF_CAN_FIRE_RL_openDumpFile;
  tUInt8 DEF_WILL_FIRE_RL_access;
  tUInt8 DEF_CAN_FIRE_RL_access;
  tUInt8 DEF_CAN_FIRE_dmem_server_response_get;
  tUInt8 DEF_CAN_FIRE_dmem_server_request_put;
  tUInt8 DEF_dumpState__h888;
 
 /* Local definitions */
 private:
  tUInt32 DEF_x__h909;
  tUInt32 DEF_dumpFile___d45;
  std::string DEF_dumpFilename__h892;
 
 /* Rules */
 public:
  void RL_access();
  void RL_openDumpFile();
  void RL_dumpMemory();
  void RL_closeDumpFile();
 
 /* Methods */
 public:
  void METH_dmem_server_request_put(tUInt64 ARG_dmem_server_request_put);
  tUInt8 METH_RDY_dmem_server_request_put();
  tUInt64 METH_dmem_server_response_get();
  tUInt8 METH_RDY_dmem_server_response_get();
  void METH_dumpMem_startDump();
  tUInt8 METH_RDY_dumpMem_startDump();
  tUInt8 METH_dumpMem_doneDump();
  tUInt8 METH_RDY_dumpMem_doneDump();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDmem &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkDmem &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkDmem &backing);
};

#endif /* ifndef __mkDmem_h__ */
