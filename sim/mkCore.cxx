/*
 * Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
 * 
 * On Sat Jun 28 05:29:27 IST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "mkCore.h"

namespace bluesim
{
  
  /* Constructor */
  MOD_mkCore::MOD_mkCore(char const *name, Module *parent, tUInt8 ARG_procId)
    : Module(name, parent),
      __clk_handle_0(BAD_CLOCK_HANDLE),
      PARAM_procId(ARG_procId),
      INST_cpu("cpu", this, ARG_procId),
      INST_cpuToNetwork("cpuToNetwork", this),
      INST_dataMemory("dataMemory", this, ARG_procId),
      INST_instMemory("instMemory", this, ARG_procId),
      INST_netConnectToNetwork("netConnectToNetwork", this, ARG_procId),
      PORT_RST_N((tUInt8)1u)
  {
    PORT_EN_dumpMem_startDump = false;
    PORT_EN_putNoCPacket_put = false;
    PORT_EN_getNoCPacket_get = false;
    PORT_putNoCPacket_put = 0llu;
    PORT_RDY_putNoCPacket_put = false;
    PORT_getNoCPacket_get = 0llu;
    PORT_RDY_getNoCPacket_get = false;
    PORT_checkStatus_getState = false;
    PORT_RDY_checkStatus_getState = false;
    PORT_RDY_dumpMem_startDump = false;
    PORT_dumpMem_doneDump = false;
    PORT_RDY_dumpMem_doneDump = false;
    symbol_count = 50u;
    symbols = new tSym[symbol_count];
    init_symbols_0();
  }
  
  
  /* Symbol init fns */
  
  void MOD_mkCore::init_symbols_0()
  {
    init_symbol(&symbols[0u],
		"CAN_FIRE_checkStatus_getState",
		SYM_DEF,
		&DEF_CAN_FIRE_checkStatus_getState,
		1u);
    init_symbol(&symbols[1u], "CAN_FIRE_dumpMem_doneDump", SYM_DEF, &DEF_CAN_FIRE_dumpMem_doneDump, 1u);
    init_symbol(&symbols[2u],
		"CAN_FIRE_dumpMem_startDump",
		SYM_DEF,
		&DEF_CAN_FIRE_dumpMem_startDump,
		1u);
    init_symbol(&symbols[3u], "CAN_FIRE_getNoCPacket_get", SYM_DEF, &DEF_CAN_FIRE_getNoCPacket_get, 1u);
    init_symbol(&symbols[4u], "CAN_FIRE_putNoCPacket_put", SYM_DEF, &DEF_CAN_FIRE_putNoCPacket_put, 1u);
    init_symbol(&symbols[5u],
		"CAN_FIRE_RL_ClientServerRequest",
		SYM_DEF,
		&DEF_CAN_FIRE_RL_ClientServerRequest,
		1u);
    init_symbol(&symbols[6u],
		"CAN_FIRE_RL_ClientServerRequest_1",
		SYM_DEF,
		&DEF_CAN_FIRE_RL_ClientServerRequest_1,
		1u);
    init_symbol(&symbols[7u],
		"CAN_FIRE_RL_ClientServerResponse",
		SYM_DEF,
		&DEF_CAN_FIRE_RL_ClientServerResponse,
		1u);
    init_symbol(&symbols[8u],
		"CAN_FIRE_RL_ClientServerResponse_1",
		SYM_DEF,
		&DEF_CAN_FIRE_RL_ClientServerResponse_1,
		1u);
    init_symbol(&symbols[9u],
		"CAN_FIRE_RL_mkConnectionGetPut",
		SYM_DEF,
		&DEF_CAN_FIRE_RL_mkConnectionGetPut,
		1u);
    init_symbol(&symbols[10u],
		"CAN_FIRE_RL_mkConnectionGetPut_1",
		SYM_DEF,
		&DEF_CAN_FIRE_RL_mkConnectionGetPut_1,
		1u);
    init_symbol(&symbols[11u],
		"CAN_FIRE_RL_mkConnectionGetPut_2",
		SYM_DEF,
		&DEF_CAN_FIRE_RL_mkConnectionGetPut_2,
		1u);
    init_symbol(&symbols[12u],
		"CAN_FIRE_RL_mkConnectionGetPut_3",
		SYM_DEF,
		&DEF_CAN_FIRE_RL_mkConnectionGetPut_3,
		1u);
    init_symbol(&symbols[13u], "checkStatus_getState", SYM_PORT, &PORT_checkStatus_getState, 1u);
    init_symbol(&symbols[14u], "cpu", SYM_MODULE, &INST_cpu);
    init_symbol(&symbols[15u], "cpuToNetwork", SYM_MODULE, &INST_cpuToNetwork);
    init_symbol(&symbols[16u], "dataMemory", SYM_MODULE, &INST_dataMemory);
    init_symbol(&symbols[17u], "dumpMem_doneDump", SYM_PORT, &PORT_dumpMem_doneDump, 1u);
    init_symbol(&symbols[18u], "EN_dumpMem_startDump", SYM_PORT, &PORT_EN_dumpMem_startDump, 1u);
    init_symbol(&symbols[19u], "EN_getNoCPacket_get", SYM_PORT, &PORT_EN_getNoCPacket_get, 1u);
    init_symbol(&symbols[20u], "EN_putNoCPacket_put", SYM_PORT, &PORT_EN_putNoCPacket_put, 1u);
    init_symbol(&symbols[21u], "getNoCPacket_get", SYM_PORT, &PORT_getNoCPacket_get, 51u);
    init_symbol(&symbols[22u], "instMemory", SYM_MODULE, &INST_instMemory);
    init_symbol(&symbols[23u], "netConnectToNetwork", SYM_MODULE, &INST_netConnectToNetwork);
    init_symbol(&symbols[24u], "procId", SYM_PARAM, (void *)(&PARAM_procId), 4u);
    init_symbol(&symbols[25u], "putNoCPacket_put", SYM_PORT, &PORT_putNoCPacket_put, 51u);
    init_symbol(&symbols[26u],
		"RDY_checkStatus_getState",
		SYM_PORT,
		&PORT_RDY_checkStatus_getState,
		1u);
    init_symbol(&symbols[27u], "RDY_dumpMem_doneDump", SYM_PORT, &PORT_RDY_dumpMem_doneDump, 1u);
    init_symbol(&symbols[28u], "RDY_dumpMem_startDump", SYM_PORT, &PORT_RDY_dumpMem_startDump, 1u);
    init_symbol(&symbols[29u], "RDY_getNoCPacket_get", SYM_PORT, &PORT_RDY_getNoCPacket_get, 1u);
    init_symbol(&symbols[30u], "RDY_putNoCPacket_put", SYM_PORT, &PORT_RDY_putNoCPacket_put, 1u);
    init_symbol(&symbols[31u], "RL_ClientServerRequest", SYM_RULE);
    init_symbol(&symbols[32u], "RL_ClientServerRequest_1", SYM_RULE);
    init_symbol(&symbols[33u], "RL_ClientServerResponse", SYM_RULE);
    init_symbol(&symbols[34u], "RL_ClientServerResponse_1", SYM_RULE);
    init_symbol(&symbols[35u], "RL_mkConnectionGetPut", SYM_RULE);
    init_symbol(&symbols[36u], "RL_mkConnectionGetPut_1", SYM_RULE);
    init_symbol(&symbols[37u], "RL_mkConnectionGetPut_2", SYM_RULE);
    init_symbol(&symbols[38u], "RL_mkConnectionGetPut_3", SYM_RULE);
    init_symbol(&symbols[39u],
		"WILL_FIRE_dumpMem_startDump",
		SYM_DEF,
		&DEF_WILL_FIRE_dumpMem_startDump,
		1u);
    init_symbol(&symbols[40u],
		"WILL_FIRE_getNoCPacket_get",
		SYM_DEF,
		&DEF_WILL_FIRE_getNoCPacket_get,
		1u);
    init_symbol(&symbols[41u],
		"WILL_FIRE_putNoCPacket_put",
		SYM_DEF,
		&DEF_WILL_FIRE_putNoCPacket_put,
		1u);
    init_symbol(&symbols[42u],
		"WILL_FIRE_RL_ClientServerRequest",
		SYM_DEF,
		&DEF_WILL_FIRE_RL_ClientServerRequest,
		1u);
    init_symbol(&symbols[43u],
		"WILL_FIRE_RL_ClientServerRequest_1",
		SYM_DEF,
		&DEF_WILL_FIRE_RL_ClientServerRequest_1,
		1u);
    init_symbol(&symbols[44u],
		"WILL_FIRE_RL_ClientServerResponse",
		SYM_DEF,
		&DEF_WILL_FIRE_RL_ClientServerResponse,
		1u);
    init_symbol(&symbols[45u],
		"WILL_FIRE_RL_ClientServerResponse_1",
		SYM_DEF,
		&DEF_WILL_FIRE_RL_ClientServerResponse_1,
		1u);
    init_symbol(&symbols[46u],
		"WILL_FIRE_RL_mkConnectionGetPut",
		SYM_DEF,
		&DEF_WILL_FIRE_RL_mkConnectionGetPut,
		1u);
    init_symbol(&symbols[47u],
		"WILL_FIRE_RL_mkConnectionGetPut_1",
		SYM_DEF,
		&DEF_WILL_FIRE_RL_mkConnectionGetPut_1,
		1u);
    init_symbol(&symbols[48u],
		"WILL_FIRE_RL_mkConnectionGetPut_2",
		SYM_DEF,
		&DEF_WILL_FIRE_RL_mkConnectionGetPut_2,
		1u);
    init_symbol(&symbols[49u],
		"WILL_FIRE_RL_mkConnectionGetPut_3",
		SYM_DEF,
		&DEF_WILL_FIRE_RL_mkConnectionGetPut_3,
		1u);
  }
  
  
  /* Rule actions */
  
  void MOD_mkCore::RL_ClientServerRequest()
  {
    tUInt64 DEF_cpu_dmem_client_request_get___d33;
    tUInt64 DEF_AVMeth_cpu_dmem_client_request_get;
    DEF_AVMeth_cpu_dmem_client_request_get = INST_cpu.METH_dmem_client_request_get();
    DEF_cpu_dmem_client_request_get___d33 = DEF_AVMeth_cpu_dmem_client_request_get;
    INST_dataMemory.METH_dmem_server_request_put(DEF_cpu_dmem_client_request_get___d33);
  }
  
  void MOD_mkCore::RL_ClientServerResponse()
  {
    tUInt64 DEF_dataMemory_dmem_server_response_get___d34;
    tUInt64 DEF_AVMeth_dataMemory_dmem_server_response_get;
    DEF_AVMeth_dataMemory_dmem_server_response_get = INST_dataMemory.METH_dmem_server_response_get();
    DEF_dataMemory_dmem_server_response_get___d34 = DEF_AVMeth_dataMemory_dmem_server_response_get;
    INST_cpu.METH_dmem_client_response_put(DEF_dataMemory_dmem_server_response_get___d34);
  }
  
  void MOD_mkCore::RL_ClientServerRequest_1()
  {
    tUInt8 DEF_cpu_imem_client_request_get___d35;
    tUInt8 DEF_AVMeth_cpu_imem_client_request_get;
    DEF_AVMeth_cpu_imem_client_request_get = INST_cpu.METH_imem_client_request_get();
    DEF_cpu_imem_client_request_get___d35 = DEF_AVMeth_cpu_imem_client_request_get;
    INST_instMemory.METH_imem_server_request_put(DEF_cpu_imem_client_request_get___d35);
  }
  
  void MOD_mkCore::RL_ClientServerResponse_1()
  {
    tUInt64 DEF_instMemory_imem_server_response_get___d36;
    tUInt64 DEF_AVMeth_instMemory_imem_server_response_get;
    DEF_AVMeth_instMemory_imem_server_response_get = INST_instMemory.METH_imem_server_response_get();
    DEF_instMemory_imem_server_response_get___d36 = DEF_AVMeth_instMemory_imem_server_response_get;
    INST_cpu.METH_imem_client_response_put(DEF_instMemory_imem_server_response_get___d36);
  }
  
  void MOD_mkCore::RL_mkConnectionGetPut()
  {
    tUInt64 DEF_cpuToNetwork_getDataPacket_get___d20;
    tUInt64 DEF_AVMeth_cpuToNetwork_getDataPacket_get;
    DEF_AVMeth_cpuToNetwork_getDataPacket_get = INST_cpuToNetwork.METH_getDataPacket_get();
    DEF_cpuToNetwork_getDataPacket_get___d20 = DEF_AVMeth_cpuToNetwork_getDataPacket_get;
    INST_cpu.METH_putDataPacket_put(DEF_cpuToNetwork_getDataPacket_get___d20);
  }
  
  void MOD_mkCore::RL_mkConnectionGetPut_1()
  {
    tUInt64 DEF_cpu_getDataPacket_get___d24;
    tUInt64 DEF_AVMeth_cpu_getDataPacket_get;
    DEF_AVMeth_cpu_getDataPacket_get = INST_cpu.METH_getDataPacket_get();
    DEF_cpu_getDataPacket_get___d24 = DEF_AVMeth_cpu_getDataPacket_get;
    INST_cpuToNetwork.METH_putDataPacket_put(DEF_cpu_getDataPacket_get___d24);
  }
  
  void MOD_mkCore::RL_mkConnectionGetPut_2()
  {
    tUInt64 DEF_netConnectToNetwork_getNetConnectPacket_get___d28;
    tUInt64 DEF_AVMeth_netConnectToNetwork_getNetConnectPacket_get;
    DEF_AVMeth_netConnectToNetwork_getNetConnectPacket_get = INST_netConnectToNetwork.METH_getNetConnectPacket_get();
    DEF_netConnectToNetwork_getNetConnectPacket_get___d28 = DEF_AVMeth_netConnectToNetwork_getNetConnectPacket_get;
    INST_cpuToNetwork.METH_putNoCPacket_put(DEF_netConnectToNetwork_getNetConnectPacket_get___d28);
  }
  
  void MOD_mkCore::RL_mkConnectionGetPut_3()
  {
    tUInt64 DEF_cpuToNetwork_getNoCPacket_get___d32;
    tUInt64 DEF_AVMeth_cpuToNetwork_getNoCPacket_get;
    DEF_AVMeth_cpuToNetwork_getNoCPacket_get = INST_cpuToNetwork.METH_getNoCPacket_get();
    DEF_cpuToNetwork_getNoCPacket_get___d32 = DEF_AVMeth_cpuToNetwork_getNoCPacket_get;
    INST_netConnectToNetwork.METH_putNetConnectPacket_put(DEF_cpuToNetwork_getNoCPacket_get___d32);
  }
  
  
  /* Methods */
  
  void MOD_mkCore::METH_putNoCPacket_put(tUInt64 ARG_putNoCPacket_put)
  {
    PORT_EN_putNoCPacket_put = (tUInt8)1u;
    DEF_WILL_FIRE_putNoCPacket_put = (tUInt8)1u;
    PORT_putNoCPacket_put = ARG_putNoCPacket_put;
    INST_netConnectToNetwork.METH_putNoCPacket_put(ARG_putNoCPacket_put);
  }
  
  tUInt8 MOD_mkCore::METH_RDY_putNoCPacket_put()
  {
    DEF_CAN_FIRE_putNoCPacket_put = INST_netConnectToNetwork.METH_RDY_putNoCPacket_put();
    PORT_RDY_putNoCPacket_put = DEF_CAN_FIRE_putNoCPacket_put;
    return PORT_RDY_putNoCPacket_put;
  }
  
  tUInt64 MOD_mkCore::METH_getNoCPacket_get()
  {
    PORT_EN_getNoCPacket_get = (tUInt8)1u;
    DEF_WILL_FIRE_getNoCPacket_get = (tUInt8)1u;
    tUInt64 DEF_AVMeth_netConnectToNetwork_getNoCPacket_get;
    DEF_AVMeth_netConnectToNetwork_getNoCPacket_get = INST_netConnectToNetwork.METH_getNoCPacket_get();
    PORT_getNoCPacket_get = DEF_AVMeth_netConnectToNetwork_getNoCPacket_get;
    return PORT_getNoCPacket_get;
  }
  
  tUInt8 MOD_mkCore::METH_RDY_getNoCPacket_get()
  {
    DEF_CAN_FIRE_getNoCPacket_get = INST_netConnectToNetwork.METH_RDY_getNoCPacket_get();
    PORT_RDY_getNoCPacket_get = DEF_CAN_FIRE_getNoCPacket_get;
    return PORT_RDY_getNoCPacket_get;
  }
  
  tUInt8 MOD_mkCore::METH_checkStatus_getState()
  {
    PORT_checkStatus_getState = INST_cpu.METH_checkStatus_getState();
    return PORT_checkStatus_getState;
  }
  
  tUInt8 MOD_mkCore::METH_RDY_checkStatus_getState()
  {
    DEF_CAN_FIRE_checkStatus_getState = (tUInt8)1u;
    PORT_RDY_checkStatus_getState = DEF_CAN_FIRE_checkStatus_getState;
    return PORT_RDY_checkStatus_getState;
  }
  
  void MOD_mkCore::METH_dumpMem_startDump()
  {
    PORT_EN_dumpMem_startDump = (tUInt8)1u;
    DEF_WILL_FIRE_dumpMem_startDump = (tUInt8)1u;
    INST_dataMemory.METH_dumpMem_startDump();
  }
  
  tUInt8 MOD_mkCore::METH_RDY_dumpMem_startDump()
  {
    DEF_CAN_FIRE_dumpMem_startDump = (tUInt8)1u;
    PORT_RDY_dumpMem_startDump = DEF_CAN_FIRE_dumpMem_startDump;
    return PORT_RDY_dumpMem_startDump;
  }
  
  tUInt8 MOD_mkCore::METH_dumpMem_doneDump()
  {
    PORT_dumpMem_doneDump = INST_dataMemory.METH_dumpMem_doneDump();
    return PORT_dumpMem_doneDump;
  }
  
  tUInt8 MOD_mkCore::METH_RDY_dumpMem_doneDump()
  {
    DEF_CAN_FIRE_dumpMem_doneDump = (tUInt8)1u;
    PORT_RDY_dumpMem_doneDump = DEF_CAN_FIRE_dumpMem_doneDump;
    return PORT_RDY_dumpMem_doneDump;
  }
  
  
  /* Reset routines */
  
  void MOD_mkCore::reset_RST_N(tUInt8 ARG_rst_in)
  {
    PORT_RST_N = ARG_rst_in;
    INST_netConnectToNetwork.reset_RST_N(ARG_rst_in);
    INST_instMemory.reset_RST_N(ARG_rst_in);
    INST_dataMemory.reset_RST_N(ARG_rst_in);
    INST_cpuToNetwork.reset_RST_N(ARG_rst_in);
    INST_cpu.reset_RST_N(ARG_rst_in);
  }
  
  
  /* Static handles to reset routines */
  
  
  /* Functions for the parent module to register its reset fns */
  
  
  /* Functions to set the elaborated clock id */
  
  void MOD_mkCore::set_clk_0(char const *s)
  {
    __clk_handle_0 = bk_get_or_define_clock(s);
  }
  
  
  /* State dumping routine */
  void MOD_mkCore::dump_state(unsigned int indent)
  {
    printf("%*s%s:\n", indent, "", inst_name);
    INST_cpu.dump_state(indent + 2u);
    INST_cpuToNetwork.dump_state(indent + 2u);
    INST_dataMemory.dump_state(indent + 2u);
    INST_instMemory.dump_state(indent + 2u);
    INST_netConnectToNetwork.dump_state(indent + 2u);
  }
  
  
  /* VCD dumping routines */
  
  unsigned int MOD_mkCore::dump_VCD_defs(unsigned int levels)
  {
    fprintf(vcd_file, "$scope module %s $end\n", inst_name);
    vcd_num = vcd_reserve_ids(37u);
    unsigned int num = vcd_num;
    for (unsigned int hdl = 0u; hdl < bk_num_clocks(); ++hdl)
      vcd_add_clock_def(this, bk_clock_name(hdl), bk_clock_vcd_num(hdl));
    vcd_write_def(bk_clock_vcd_num(__clk_handle_0), "CLK", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_ClientServerRequest", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_ClientServerRequest_1", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_ClientServerResponse", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_ClientServerResponse_1", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_mkConnectionGetPut", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_mkConnectionGetPut_1", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_mkConnectionGetPut_2", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_RL_mkConnectionGetPut_3", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_checkStatus_getState", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_dumpMem_doneDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_dumpMem_startDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_getNoCPacket_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "CAN_FIRE_putNoCPacket_put", 1u);
    vcd_write_def(num++, "RST_N", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_ClientServerRequest", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_ClientServerRequest_1", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_ClientServerResponse", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_ClientServerResponse_1", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_mkConnectionGetPut", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_mkConnectionGetPut_1", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_mkConnectionGetPut_2", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_RL_mkConnectionGetPut_3", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_dumpMem_startDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_getNoCPacket_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "WILL_FIRE_putNoCPacket_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "EN_dumpMem_startDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "EN_getNoCPacket_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "EN_putNoCPacket_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_checkStatus_getState", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_dumpMem_doneDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_dumpMem_startDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_getNoCPacket_get", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "RDY_putNoCPacket_put", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "checkStatus_getState", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "dumpMem_doneDump", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "getNoCPacket_get", 51u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "putNoCPacket_put", 51u);
    if (levels != 1u)
    {
      unsigned int l = levels == 0u ? 0u : levels - 1u;
      num = INST_cpu.dump_VCD_defs(l);
      num = INST_cpuToNetwork.dump_VCD_defs(l);
      num = INST_dataMemory.dump_VCD_defs(l);
      num = INST_instMemory.dump_VCD_defs(l);
      num = INST_netConnectToNetwork.dump_VCD_defs(l);
    }
    fprintf(vcd_file, "$upscope $end\n");
    return num;
  }
  
  void MOD_mkCore::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCore &backing)
  {
    vcd_defs(dt, backing);
    if (levels != 1u)
      vcd_submodules(dt, levels - 1u, backing);
  }
  
  void MOD_mkCore::vcd_defs(tVCDDumpType dt, MOD_mkCore &backing)
  {
    unsigned int num = vcd_num;
    if (dt == VCD_DUMP_XS)
    {
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 51u);
      vcd_write_x(num++, 51u);
    }
    else
      if (dt == VCD_DUMP_CHANGES)
      {
	if ((backing.DEF_CAN_FIRE_RL_ClientServerRequest) != DEF_CAN_FIRE_RL_ClientServerRequest)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_ClientServerRequest, 1u);
	  backing.DEF_CAN_FIRE_RL_ClientServerRequest = DEF_CAN_FIRE_RL_ClientServerRequest;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_RL_ClientServerRequest_1) != DEF_CAN_FIRE_RL_ClientServerRequest_1)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_ClientServerRequest_1, 1u);
	  backing.DEF_CAN_FIRE_RL_ClientServerRequest_1 = DEF_CAN_FIRE_RL_ClientServerRequest_1;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_RL_ClientServerResponse) != DEF_CAN_FIRE_RL_ClientServerResponse)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_ClientServerResponse, 1u);
	  backing.DEF_CAN_FIRE_RL_ClientServerResponse = DEF_CAN_FIRE_RL_ClientServerResponse;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_RL_ClientServerResponse_1) != DEF_CAN_FIRE_RL_ClientServerResponse_1)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_ClientServerResponse_1, 1u);
	  backing.DEF_CAN_FIRE_RL_ClientServerResponse_1 = DEF_CAN_FIRE_RL_ClientServerResponse_1;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut) != DEF_CAN_FIRE_RL_mkConnectionGetPut)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_mkConnectionGetPut, 1u);
	  backing.DEF_CAN_FIRE_RL_mkConnectionGetPut = DEF_CAN_FIRE_RL_mkConnectionGetPut;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_1) != DEF_CAN_FIRE_RL_mkConnectionGetPut_1)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_mkConnectionGetPut_1, 1u);
	  backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_1 = DEF_CAN_FIRE_RL_mkConnectionGetPut_1;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_2) != DEF_CAN_FIRE_RL_mkConnectionGetPut_2)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_mkConnectionGetPut_2, 1u);
	  backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_2 = DEF_CAN_FIRE_RL_mkConnectionGetPut_2;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_3) != DEF_CAN_FIRE_RL_mkConnectionGetPut_3)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_RL_mkConnectionGetPut_3, 1u);
	  backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_3 = DEF_CAN_FIRE_RL_mkConnectionGetPut_3;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_checkStatus_getState) != DEF_CAN_FIRE_checkStatus_getState)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_checkStatus_getState, 1u);
	  backing.DEF_CAN_FIRE_checkStatus_getState = DEF_CAN_FIRE_checkStatus_getState;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_dumpMem_doneDump) != DEF_CAN_FIRE_dumpMem_doneDump)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_dumpMem_doneDump, 1u);
	  backing.DEF_CAN_FIRE_dumpMem_doneDump = DEF_CAN_FIRE_dumpMem_doneDump;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_dumpMem_startDump) != DEF_CAN_FIRE_dumpMem_startDump)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_dumpMem_startDump, 1u);
	  backing.DEF_CAN_FIRE_dumpMem_startDump = DEF_CAN_FIRE_dumpMem_startDump;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_getNoCPacket_get) != DEF_CAN_FIRE_getNoCPacket_get)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_getNoCPacket_get, 1u);
	  backing.DEF_CAN_FIRE_getNoCPacket_get = DEF_CAN_FIRE_getNoCPacket_get;
	}
	++num;
	if ((backing.DEF_CAN_FIRE_putNoCPacket_put) != DEF_CAN_FIRE_putNoCPacket_put)
	{
	  vcd_write_val(num, DEF_CAN_FIRE_putNoCPacket_put, 1u);
	  backing.DEF_CAN_FIRE_putNoCPacket_put = DEF_CAN_FIRE_putNoCPacket_put;
	}
	++num;
	if ((backing.PORT_RST_N) != PORT_RST_N)
	{
	  vcd_write_val(num, PORT_RST_N, 1u);
	  backing.PORT_RST_N = PORT_RST_N;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_ClientServerRequest) != DEF_WILL_FIRE_RL_ClientServerRequest)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_ClientServerRequest, 1u);
	  backing.DEF_WILL_FIRE_RL_ClientServerRequest = DEF_WILL_FIRE_RL_ClientServerRequest;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_ClientServerRequest_1) != DEF_WILL_FIRE_RL_ClientServerRequest_1)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_ClientServerRequest_1, 1u);
	  backing.DEF_WILL_FIRE_RL_ClientServerRequest_1 = DEF_WILL_FIRE_RL_ClientServerRequest_1;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_ClientServerResponse) != DEF_WILL_FIRE_RL_ClientServerResponse)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_ClientServerResponse, 1u);
	  backing.DEF_WILL_FIRE_RL_ClientServerResponse = DEF_WILL_FIRE_RL_ClientServerResponse;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_ClientServerResponse_1) != DEF_WILL_FIRE_RL_ClientServerResponse_1)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_ClientServerResponse_1, 1u);
	  backing.DEF_WILL_FIRE_RL_ClientServerResponse_1 = DEF_WILL_FIRE_RL_ClientServerResponse_1;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut) != DEF_WILL_FIRE_RL_mkConnectionGetPut)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_mkConnectionGetPut, 1u);
	  backing.DEF_WILL_FIRE_RL_mkConnectionGetPut = DEF_WILL_FIRE_RL_mkConnectionGetPut;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_1) != DEF_WILL_FIRE_RL_mkConnectionGetPut_1)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_mkConnectionGetPut_1, 1u);
	  backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_1 = DEF_WILL_FIRE_RL_mkConnectionGetPut_1;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_2) != DEF_WILL_FIRE_RL_mkConnectionGetPut_2)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_mkConnectionGetPut_2, 1u);
	  backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_2 = DEF_WILL_FIRE_RL_mkConnectionGetPut_2;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_3) != DEF_WILL_FIRE_RL_mkConnectionGetPut_3)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_RL_mkConnectionGetPut_3, 1u);
	  backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_3 = DEF_WILL_FIRE_RL_mkConnectionGetPut_3;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_dumpMem_startDump) != DEF_WILL_FIRE_dumpMem_startDump)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_dumpMem_startDump, 1u);
	  backing.DEF_WILL_FIRE_dumpMem_startDump = DEF_WILL_FIRE_dumpMem_startDump;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_getNoCPacket_get) != DEF_WILL_FIRE_getNoCPacket_get)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_getNoCPacket_get, 1u);
	  backing.DEF_WILL_FIRE_getNoCPacket_get = DEF_WILL_FIRE_getNoCPacket_get;
	}
	++num;
	if ((backing.DEF_WILL_FIRE_putNoCPacket_put) != DEF_WILL_FIRE_putNoCPacket_put)
	{
	  vcd_write_val(num, DEF_WILL_FIRE_putNoCPacket_put, 1u);
	  backing.DEF_WILL_FIRE_putNoCPacket_put = DEF_WILL_FIRE_putNoCPacket_put;
	}
	++num;
	if ((backing.PORT_EN_dumpMem_startDump) != PORT_EN_dumpMem_startDump)
	{
	  vcd_write_val(num, PORT_EN_dumpMem_startDump, 1u);
	  backing.PORT_EN_dumpMem_startDump = PORT_EN_dumpMem_startDump;
	}
	++num;
	if ((backing.PORT_EN_getNoCPacket_get) != PORT_EN_getNoCPacket_get)
	{
	  vcd_write_val(num, PORT_EN_getNoCPacket_get, 1u);
	  backing.PORT_EN_getNoCPacket_get = PORT_EN_getNoCPacket_get;
	}
	++num;
	if ((backing.PORT_EN_putNoCPacket_put) != PORT_EN_putNoCPacket_put)
	{
	  vcd_write_val(num, PORT_EN_putNoCPacket_put, 1u);
	  backing.PORT_EN_putNoCPacket_put = PORT_EN_putNoCPacket_put;
	}
	++num;
	if ((backing.PORT_RDY_checkStatus_getState) != PORT_RDY_checkStatus_getState)
	{
	  vcd_write_val(num, PORT_RDY_checkStatus_getState, 1u);
	  backing.PORT_RDY_checkStatus_getState = PORT_RDY_checkStatus_getState;
	}
	++num;
	if ((backing.PORT_RDY_dumpMem_doneDump) != PORT_RDY_dumpMem_doneDump)
	{
	  vcd_write_val(num, PORT_RDY_dumpMem_doneDump, 1u);
	  backing.PORT_RDY_dumpMem_doneDump = PORT_RDY_dumpMem_doneDump;
	}
	++num;
	if ((backing.PORT_RDY_dumpMem_startDump) != PORT_RDY_dumpMem_startDump)
	{
	  vcd_write_val(num, PORT_RDY_dumpMem_startDump, 1u);
	  backing.PORT_RDY_dumpMem_startDump = PORT_RDY_dumpMem_startDump;
	}
	++num;
	if ((backing.PORT_RDY_getNoCPacket_get) != PORT_RDY_getNoCPacket_get)
	{
	  vcd_write_val(num, PORT_RDY_getNoCPacket_get, 1u);
	  backing.PORT_RDY_getNoCPacket_get = PORT_RDY_getNoCPacket_get;
	}
	++num;
	if ((backing.PORT_RDY_putNoCPacket_put) != PORT_RDY_putNoCPacket_put)
	{
	  vcd_write_val(num, PORT_RDY_putNoCPacket_put, 1u);
	  backing.PORT_RDY_putNoCPacket_put = PORT_RDY_putNoCPacket_put;
	}
	++num;
	if ((backing.PORT_checkStatus_getState) != PORT_checkStatus_getState)
	{
	  vcd_write_val(num, PORT_checkStatus_getState, 1u);
	  backing.PORT_checkStatus_getState = PORT_checkStatus_getState;
	}
	++num;
	if ((backing.PORT_dumpMem_doneDump) != PORT_dumpMem_doneDump)
	{
	  vcd_write_val(num, PORT_dumpMem_doneDump, 1u);
	  backing.PORT_dumpMem_doneDump = PORT_dumpMem_doneDump;
	}
	++num;
	if ((backing.PORT_getNoCPacket_get) != PORT_getNoCPacket_get)
	{
	  vcd_write_val(num, PORT_getNoCPacket_get, 51u);
	  backing.PORT_getNoCPacket_get = PORT_getNoCPacket_get;
	}
	++num;
	if ((backing.PORT_putNoCPacket_put) != PORT_putNoCPacket_put)
	{
	  vcd_write_val(num, PORT_putNoCPacket_put, 51u);
	  backing.PORT_putNoCPacket_put = PORT_putNoCPacket_put;
	}
	++num;
      }
      else
      {
	vcd_write_val(num++, DEF_CAN_FIRE_RL_ClientServerRequest, 1u);
	backing.DEF_CAN_FIRE_RL_ClientServerRequest = DEF_CAN_FIRE_RL_ClientServerRequest;
	vcd_write_val(num++, DEF_CAN_FIRE_RL_ClientServerRequest_1, 1u);
	backing.DEF_CAN_FIRE_RL_ClientServerRequest_1 = DEF_CAN_FIRE_RL_ClientServerRequest_1;
	vcd_write_val(num++, DEF_CAN_FIRE_RL_ClientServerResponse, 1u);
	backing.DEF_CAN_FIRE_RL_ClientServerResponse = DEF_CAN_FIRE_RL_ClientServerResponse;
	vcd_write_val(num++, DEF_CAN_FIRE_RL_ClientServerResponse_1, 1u);
	backing.DEF_CAN_FIRE_RL_ClientServerResponse_1 = DEF_CAN_FIRE_RL_ClientServerResponse_1;
	vcd_write_val(num++, DEF_CAN_FIRE_RL_mkConnectionGetPut, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut = DEF_CAN_FIRE_RL_mkConnectionGetPut;
	vcd_write_val(num++, DEF_CAN_FIRE_RL_mkConnectionGetPut_1, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_1 = DEF_CAN_FIRE_RL_mkConnectionGetPut_1;
	vcd_write_val(num++, DEF_CAN_FIRE_RL_mkConnectionGetPut_2, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_2 = DEF_CAN_FIRE_RL_mkConnectionGetPut_2;
	vcd_write_val(num++, DEF_CAN_FIRE_RL_mkConnectionGetPut_3, 1u);
	backing.DEF_CAN_FIRE_RL_mkConnectionGetPut_3 = DEF_CAN_FIRE_RL_mkConnectionGetPut_3;
	vcd_write_val(num++, DEF_CAN_FIRE_checkStatus_getState, 1u);
	backing.DEF_CAN_FIRE_checkStatus_getState = DEF_CAN_FIRE_checkStatus_getState;
	vcd_write_val(num++, DEF_CAN_FIRE_dumpMem_doneDump, 1u);
	backing.DEF_CAN_FIRE_dumpMem_doneDump = DEF_CAN_FIRE_dumpMem_doneDump;
	vcd_write_val(num++, DEF_CAN_FIRE_dumpMem_startDump, 1u);
	backing.DEF_CAN_FIRE_dumpMem_startDump = DEF_CAN_FIRE_dumpMem_startDump;
	vcd_write_val(num++, DEF_CAN_FIRE_getNoCPacket_get, 1u);
	backing.DEF_CAN_FIRE_getNoCPacket_get = DEF_CAN_FIRE_getNoCPacket_get;
	vcd_write_val(num++, DEF_CAN_FIRE_putNoCPacket_put, 1u);
	backing.DEF_CAN_FIRE_putNoCPacket_put = DEF_CAN_FIRE_putNoCPacket_put;
	vcd_write_val(num++, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_ClientServerRequest, 1u);
	backing.DEF_WILL_FIRE_RL_ClientServerRequest = DEF_WILL_FIRE_RL_ClientServerRequest;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_ClientServerRequest_1, 1u);
	backing.DEF_WILL_FIRE_RL_ClientServerRequest_1 = DEF_WILL_FIRE_RL_ClientServerRequest_1;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_ClientServerResponse, 1u);
	backing.DEF_WILL_FIRE_RL_ClientServerResponse = DEF_WILL_FIRE_RL_ClientServerResponse;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_ClientServerResponse_1, 1u);
	backing.DEF_WILL_FIRE_RL_ClientServerResponse_1 = DEF_WILL_FIRE_RL_ClientServerResponse_1;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_mkConnectionGetPut, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut = DEF_WILL_FIRE_RL_mkConnectionGetPut;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_mkConnectionGetPut_1, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_1 = DEF_WILL_FIRE_RL_mkConnectionGetPut_1;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_mkConnectionGetPut_2, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_2 = DEF_WILL_FIRE_RL_mkConnectionGetPut_2;
	vcd_write_val(num++, DEF_WILL_FIRE_RL_mkConnectionGetPut_3, 1u);
	backing.DEF_WILL_FIRE_RL_mkConnectionGetPut_3 = DEF_WILL_FIRE_RL_mkConnectionGetPut_3;
	vcd_write_val(num++, DEF_WILL_FIRE_dumpMem_startDump, 1u);
	backing.DEF_WILL_FIRE_dumpMem_startDump = DEF_WILL_FIRE_dumpMem_startDump;
	vcd_write_val(num++, DEF_WILL_FIRE_getNoCPacket_get, 1u);
	backing.DEF_WILL_FIRE_getNoCPacket_get = DEF_WILL_FIRE_getNoCPacket_get;
	vcd_write_val(num++, DEF_WILL_FIRE_putNoCPacket_put, 1u);
	backing.DEF_WILL_FIRE_putNoCPacket_put = DEF_WILL_FIRE_putNoCPacket_put;
	vcd_write_val(num++, PORT_EN_dumpMem_startDump, 1u);
	backing.PORT_EN_dumpMem_startDump = PORT_EN_dumpMem_startDump;
	vcd_write_val(num++, PORT_EN_getNoCPacket_get, 1u);
	backing.PORT_EN_getNoCPacket_get = PORT_EN_getNoCPacket_get;
	vcd_write_val(num++, PORT_EN_putNoCPacket_put, 1u);
	backing.PORT_EN_putNoCPacket_put = PORT_EN_putNoCPacket_put;
	vcd_write_val(num++, PORT_RDY_checkStatus_getState, 1u);
	backing.PORT_RDY_checkStatus_getState = PORT_RDY_checkStatus_getState;
	vcd_write_val(num++, PORT_RDY_dumpMem_doneDump, 1u);
	backing.PORT_RDY_dumpMem_doneDump = PORT_RDY_dumpMem_doneDump;
	vcd_write_val(num++, PORT_RDY_dumpMem_startDump, 1u);
	backing.PORT_RDY_dumpMem_startDump = PORT_RDY_dumpMem_startDump;
	vcd_write_val(num++, PORT_RDY_getNoCPacket_get, 1u);
	backing.PORT_RDY_getNoCPacket_get = PORT_RDY_getNoCPacket_get;
	vcd_write_val(num++, PORT_RDY_putNoCPacket_put, 1u);
	backing.PORT_RDY_putNoCPacket_put = PORT_RDY_putNoCPacket_put;
	vcd_write_val(num++, PORT_checkStatus_getState, 1u);
	backing.PORT_checkStatus_getState = PORT_checkStatus_getState;
	vcd_write_val(num++, PORT_dumpMem_doneDump, 1u);
	backing.PORT_dumpMem_doneDump = PORT_dumpMem_doneDump;
	vcd_write_val(num++, PORT_getNoCPacket_get, 51u);
	backing.PORT_getNoCPacket_get = PORT_getNoCPacket_get;
	vcd_write_val(num++, PORT_putNoCPacket_put, 51u);
	backing.PORT_putNoCPacket_put = PORT_putNoCPacket_put;
      }
  }
  
  void MOD_mkCore::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkCore &backing)
  {
    INST_cpu.dump_VCD(dt, levels, backing.INST_cpu);
    INST_cpuToNetwork.dump_VCD(dt, levels, backing.INST_cpuToNetwork);
    INST_dataMemory.dump_VCD(dt, levels, backing.INST_dataMemory);
    INST_instMemory.dump_VCD(dt, levels, backing.INST_instMemory);
    INST_netConnectToNetwork.dump_VCD(dt, levels, backing.INST_netConnectToNetwork);
  }
}
