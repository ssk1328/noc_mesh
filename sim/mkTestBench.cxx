/*
 * Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
 * 
 * On Fri Jun 16 21:57:11 IST 2017
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestBench.h"


/* String declarations */
static std::string const __str_literal_2("Cycle : %d \n", 12u);
static std::string const __str_literal_1("Simulation Completed **SUCESSFULLY**", 36u);


/* Constructor */
MOD_mkTestBench::MOD_mkTestBench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycleCount(simHdl, "cycleCount", this, 32u, 0u, (tUInt8)0u),
    INST_done(simHdl, "done", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_dut(simHdl, "dut", this),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 12u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestBench::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_checkHalt", SYM_DEF, &DEF_CAN_FIRE_RL_checkHalt, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_countCycles", SYM_DEF, &DEF_CAN_FIRE_RL_countCycles, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_finishSim", SYM_DEF, &DEF_CAN_FIRE_RL_finishSim, 1u);
  init_symbol(&symbols[3u], "cycleCount", SYM_MODULE, &INST_cycleCount);
  init_symbol(&symbols[4u], "done", SYM_MODULE, &INST_done);
  init_symbol(&symbols[5u], "dut", SYM_MODULE, &INST_dut);
  init_symbol(&symbols[6u], "RL_checkHalt", SYM_RULE);
  init_symbol(&symbols[7u], "RL_countCycles", SYM_RULE);
  init_symbol(&symbols[8u], "RL_finishSim", SYM_RULE);
  init_symbol(&symbols[9u], "WILL_FIRE_RL_checkHalt", SYM_DEF, &DEF_WILL_FIRE_RL_checkHalt, 1u);
  init_symbol(&symbols[10u], "WILL_FIRE_RL_countCycles", SYM_DEF, &DEF_WILL_FIRE_RL_countCycles, 1u);
  init_symbol(&symbols[11u], "WILL_FIRE_RL_finishSim", SYM_DEF, &DEF_WILL_FIRE_RL_finishSim, 1u);
}


/* Rule actions */

void MOD_mkTestBench::RL_checkHalt()
{
  tUInt8 DEF_dut_coreStatus_6_getState_AND_dut_coreStatus_5_ETC___d15;
  DEF_dut_coreStatus_6_getState_AND_dut_coreStatus_5_ETC___d15 = INST_dut.METH_coreStatus_6_getState() && (INST_dut.METH_coreStatus_5_getState() && (INST_dut.METH_coreStatus_4_getState() && (INST_dut.METH_coreStatus_3_getState() && (INST_dut.METH_coreStatus_2_getState() && (INST_dut.METH_coreStatus_1_getState() && INST_dut.METH_coreStatus_0_getState())))));
  if (DEF_dut_coreStatus_6_getState_AND_dut_coreStatus_5_ETC___d15)
    INST_dut.METH_dumpDataMem_0_startDump();
  if (DEF_dut_coreStatus_6_getState_AND_dut_coreStatus_5_ETC___d15)
    INST_dut.METH_dumpDataMem_1_startDump();
  if (DEF_dut_coreStatus_6_getState_AND_dut_coreStatus_5_ETC___d15)
    INST_dut.METH_dumpDataMem_2_startDump();
  if (DEF_dut_coreStatus_6_getState_AND_dut_coreStatus_5_ETC___d15)
    INST_dut.METH_dumpDataMem_3_startDump();
  if (DEF_dut_coreStatus_6_getState_AND_dut_coreStatus_5_ETC___d15)
    INST_dut.METH_dumpDataMem_4_startDump();
  if (DEF_dut_coreStatus_6_getState_AND_dut_coreStatus_5_ETC___d15)
    INST_dut.METH_dumpDataMem_5_startDump();
  if (DEF_dut_coreStatus_6_getState_AND_dut_coreStatus_5_ETC___d15)
    INST_dut.METH_dumpDataMem_6_startDump();
  if (DEF_dut_coreStatus_6_getState_AND_dut_coreStatus_5_ETC___d15)
    INST_done.METH_write((tUInt8)1u);
}

void MOD_mkTestBench::RL_finishSim()
{
  tUInt8 DEF_dut_dumpDataMem_6_doneDump__6_AND_dut_dumpData_ETC___d28;
  DEF_dut_dumpDataMem_6_doneDump__6_AND_dut_dumpData_ETC___d28 = INST_dut.METH_dumpDataMem_6_doneDump() && (INST_dut.METH_dumpDataMem_5_doneDump() && (INST_dut.METH_dumpDataMem_4_doneDump() && (INST_dut.METH_dumpDataMem_3_doneDump() && (INST_dut.METH_dumpDataMem_2_doneDump() && (INST_dut.METH_dumpDataMem_1_doneDump() && INST_dut.METH_dumpDataMem_0_doneDump())))));
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_dut_dumpDataMem_6_doneDump__6_AND_dut_dumpData_ETC___d28)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_dut_dumpDataMem_6_doneDump__6_AND_dut_dumpData_ETC___d28)
      dollar_finish(sim_hdl, "32", 1u);
  }
}

void MOD_mkTestBench::RL_countCycles()
{
  tUInt32 DEF_cycleCount_9_PLUS_1___d30;
  tUInt32 DEF_b__h1879;
  tUInt32 DEF_signed_cycleCount_9___d31;
  DEF_b__h1879 = INST_cycleCount.METH_read();
  DEF_signed_cycleCount_9___d31 = DEF_b__h1879;
  DEF_cycleCount_9_PLUS_1___d30 = DEF_b__h1879 + 1u;
  INST_cycleCount.METH_write(DEF_cycleCount_9_PLUS_1___d30);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_2, DEF_signed_cycleCount_9___d31);
}


/* Methods */


/* Reset routines */

void MOD_mkTestBench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_dut.reset_RST_N(ARG_rst_in);
  INST_done.reset_RST(ARG_rst_in);
  INST_cycleCount.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestBench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestBench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycleCount.dump_state(indent + 2u);
  INST_done.dump_state(indent + 2u);
  INST_dut.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestBench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 9u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_checkHalt", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_countCycles", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_finishSim", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_checkHalt", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_countCycles", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_finishSim", 1u);
  num = INST_cycleCount.dump_VCD_defs(num);
  num = INST_done.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_dut.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestBench::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestBench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTestBench::vcd_defs(tVCDDumpType dt, MOD_mkTestBench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_checkHalt) != DEF_CAN_FIRE_RL_checkHalt)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_checkHalt, 1u);
	backing.DEF_CAN_FIRE_RL_checkHalt = DEF_CAN_FIRE_RL_checkHalt;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_countCycles) != DEF_CAN_FIRE_RL_countCycles)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_countCycles, 1u);
	backing.DEF_CAN_FIRE_RL_countCycles = DEF_CAN_FIRE_RL_countCycles;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_finishSim) != DEF_CAN_FIRE_RL_finishSim)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_finishSim, 1u);
	backing.DEF_CAN_FIRE_RL_finishSim = DEF_CAN_FIRE_RL_finishSim;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_checkHalt) != DEF_WILL_FIRE_RL_checkHalt)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_checkHalt, 1u);
	backing.DEF_WILL_FIRE_RL_checkHalt = DEF_WILL_FIRE_RL_checkHalt;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_countCycles) != DEF_WILL_FIRE_RL_countCycles)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_countCycles, 1u);
	backing.DEF_WILL_FIRE_RL_countCycles = DEF_WILL_FIRE_RL_countCycles;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_finishSim) != DEF_WILL_FIRE_RL_finishSim)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_finishSim, 1u);
	backing.DEF_WILL_FIRE_RL_finishSim = DEF_WILL_FIRE_RL_finishSim;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_checkHalt, 1u);
      backing.DEF_CAN_FIRE_RL_checkHalt = DEF_CAN_FIRE_RL_checkHalt;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_countCycles, 1u);
      backing.DEF_CAN_FIRE_RL_countCycles = DEF_CAN_FIRE_RL_countCycles;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_finishSim, 1u);
      backing.DEF_CAN_FIRE_RL_finishSim = DEF_CAN_FIRE_RL_finishSim;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_checkHalt, 1u);
      backing.DEF_WILL_FIRE_RL_checkHalt = DEF_WILL_FIRE_RL_checkHalt;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_countCycles, 1u);
      backing.DEF_WILL_FIRE_RL_countCycles = DEF_WILL_FIRE_RL_countCycles;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_finishSim, 1u);
      backing.DEF_WILL_FIRE_RL_finishSim = DEF_WILL_FIRE_RL_finishSim;
    }
}

void MOD_mkTestBench::vcd_prims(tVCDDumpType dt, MOD_mkTestBench &backing)
{
  INST_cycleCount.dump_VCD(dt, backing.INST_cycleCount);
  INST_done.dump_VCD(dt, backing.INST_done);
}

void MOD_mkTestBench::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTestBench &backing)
{
  INST_dut.dump_VCD(dt, levels, backing.INST_dut);
}
